//
// TestResultUpdateModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultUpdateModel: Codable, JSONEncodable, Hashable {

    static let durationInMsRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let durationRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var failureClassIds: [UUID]?
    public var outcome: TestResultOutcome?
    public var comment: String?
    public var links: [LinkModel]?
    public var stepResults: [StepResultModel]?
    public var attachments: [AttachmentPutModel]?
    @available(*, deprecated, message: "This property is deprecated.")
    public var durationInMs: Int64?
    public var duration: Int64?
    public var stepComments: [TestResultStepCommentPutModel]?
    public var setupResults: [AttachmentPutModelAutoTestStepResultsModel]?
    public var teardownResults: [AttachmentPutModelAutoTestStepResultsModel]?
    public var message: String?
    public var trace: String?

    public init(failureClassIds: [UUID]? = nil, outcome: TestResultOutcome? = nil, comment: String? = nil, links: [LinkModel]? = nil, stepResults: [StepResultModel]? = nil, attachments: [AttachmentPutModel]? = nil, durationInMs: Int64? = nil, duration: Int64? = nil, stepComments: [TestResultStepCommentPutModel]? = nil, setupResults: [AttachmentPutModelAutoTestStepResultsModel]? = nil, teardownResults: [AttachmentPutModelAutoTestStepResultsModel]? = nil, message: String? = nil, trace: String? = nil) {
        self.failureClassIds = failureClassIds
        self.outcome = outcome
        self.comment = comment
        self.links = links
        self.stepResults = stepResults
        self.attachments = attachments
        self.durationInMs = durationInMs
        self.duration = duration
        self.stepComments = stepComments
        self.setupResults = setupResults
        self.teardownResults = teardownResults
        self.message = message
        self.trace = trace
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case failureClassIds
        case outcome
        case comment
        case links
        case stepResults
        case attachments
        case durationInMs
        case duration
        case stepComments
        case setupResults
        case teardownResults
        case message
        case trace
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(failureClassIds, forKey: .failureClassIds)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(stepResults, forKey: .stepResults)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(durationInMs, forKey: .durationInMs)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(stepComments, forKey: .stepComments)
        try container.encodeIfPresent(setupResults, forKey: .setupResults)
        try container.encodeIfPresent(teardownResults, forKey: .teardownResults)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(trace, forKey: .trace)
    }
}

