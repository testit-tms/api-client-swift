//
// TestPlanModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPlanModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 450, pattern: nil)
    static let descriptionRule = StringRule(minLength: 0, maxLength: 100000, pattern: nil)
    static let buildRule = StringRule(minLength: 0, maxLength: 450, pattern: nil)
    static let productNameRule = StringRule(minLength: 0, maxLength: 450, pattern: nil)
    internal var status: TestPlanStatusModel
    /** Set when test plan is starter (status changed to: In Progress) */
    internal var startedOn: Date?
    /** set when test plan status is completed (status changed to: Completed) */
    internal var completedOn: Date?
    internal var createdDate: Date?
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    /** Used for search Test plan */
    internal var globalId: Int64
    internal var isDeleted: Bool
    internal var lockedDate: Date?
    internal var id: UUID
    internal var lockedById: UUID?
    internal var tags: [TagPostModel]?
    internal var name: String
    /** Used for analytics */
    internal var startDate: Date?
    /** Used for analytics */
    internal var endDate: Date?
    internal var description: String?
    internal var build: String?
    internal var projectId: UUID
    internal var productName: String?
    internal var hasAutomaticDurationTimer: Bool?
    internal var attributes: [String: AnyCodable]

    internal init(status: TestPlanStatusModel, startedOn: Date? = nil, completedOn: Date? = nil, createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, globalId: Int64, isDeleted: Bool, lockedDate: Date? = nil, id: UUID, lockedById: UUID? = nil, tags: [TagPostModel]? = nil, name: String, startDate: Date? = nil, endDate: Date? = nil, description: String? = nil, build: String? = nil, projectId: UUID, productName: String? = nil, hasAutomaticDurationTimer: Bool? = nil, attributes: [String: AnyCodable]) {
        self.status = status
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.globalId = globalId
        self.isDeleted = isDeleted
        self.lockedDate = lockedDate
        self.id = id
        self.lockedById = lockedById
        self.tags = tags
        self.name = name
        self.startDate = startDate
        self.endDate = endDate
        self.description = description
        self.build = build
        self.projectId = projectId
        self.productName = productName
        self.hasAutomaticDurationTimer = hasAutomaticDurationTimer
        self.attributes = attributes
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case startedOn
        case completedOn
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case globalId
        case isDeleted
        case lockedDate
        case id
        case lockedById
        case tags
        case name
        case startDate
        case endDate
        case description
        case build
        case projectId
        case productName
        case hasAutomaticDurationTimer
        case attributes
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(lockedDate, forKey: .lockedDate)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(lockedById, forKey: .lockedById)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(hasAutomaticDurationTimer, forKey: .hasAutomaticDurationTimer)
        try container.encode(attributes, forKey: .attributes)
    }
}

