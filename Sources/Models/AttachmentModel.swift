//
// AttachmentModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AttachmentModel: Codable, JSONEncodable, Hashable {

    /** Unique ID of the attachment file */
    public var fileId: String
    /** MIME type of the attachment */
    public var type: String
    /** Size in bytes of the attachment file */
    public var size: Float
    /** Creation date of the attachment */
    public var createdDate: Date
    /** Last modification date of the attachment */
    public var modifiedDate: Date?
    /** Unique ID of the attachment creator */
    public var createdById: UUID
    /** Unique ID of the attachment last editor */
    public var modifiedById: UUID?
    /** Name of the attachment file */
    public var name: String
    /** Unique ID of the attachment */
    public var id: UUID

    public init(fileId: String, type: String, size: Float, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, name: String, id: UUID) {
        self.fileId = fileId
        self.type = type
        self.size = size
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.name = name
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileId
        case type
        case size
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case name
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fileId, forKey: .fileId)
        try container.encode(type, forKey: .type)
        try container.encode(size, forKey: .size)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(name, forKey: .name)
        try container.encode(id, forKey: .id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AttachmentModel: Identifiable {}
