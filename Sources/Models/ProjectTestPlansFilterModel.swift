//
// ProjectTestPlansFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProjectTestPlansFilterModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let descriptionRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let buildRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let productNameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let statusRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let automaticDurationTimerRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let tagNamesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var name: String?
    public var description: String?
    public var build: String?
    public var productName: String?
    public var status: Set<TestPlanStatusModel>?
    public var globalIds: Set<Int64>?
    public var isLocked: Bool?
    public var lockedDate: DateTimeRangeSelectorModel?
    public var automaticDurationTimer: Set<Bool>?
    public var createdByIds: Set<UUID>?
    public var createdDate: DateTimeRangeSelectorModel?
    public var startDate: DateTimeRangeSelectorModel?
    public var endDate: DateTimeRangeSelectorModel?
    public var tagNames: Set<String>?
    public var attributes: [String: Set<String>]?
    public var isDeleted: Bool?

    public init(name: String? = nil, description: String? = nil, build: String? = nil, productName: String? = nil, status: Set<TestPlanStatusModel>? = nil, globalIds: Set<Int64>? = nil, isLocked: Bool? = nil, lockedDate: DateTimeRangeSelectorModel? = nil, automaticDurationTimer: Set<Bool>? = nil, createdByIds: Set<UUID>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, startDate: DateTimeRangeSelectorModel? = nil, endDate: DateTimeRangeSelectorModel? = nil, tagNames: Set<String>? = nil, attributes: [String: Set<String>]? = nil, isDeleted: Bool? = nil) {
        self.name = name
        self.description = description
        self.build = build
        self.productName = productName
        self.status = status
        self.globalIds = globalIds
        self.isLocked = isLocked
        self.lockedDate = lockedDate
        self.automaticDurationTimer = automaticDurationTimer
        self.createdByIds = createdByIds
        self.createdDate = createdDate
        self.startDate = startDate
        self.endDate = endDate
        self.tagNames = tagNames
        self.attributes = attributes
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case build
        case productName
        case status
        case globalIds
        case isLocked
        case lockedDate
        case automaticDurationTimer
        case createdByIds
        case createdDate
        case startDate
        case endDate
        case tagNames
        case attributes
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(isLocked, forKey: .isLocked)
        try container.encodeIfPresent(lockedDate, forKey: .lockedDate)
        try container.encodeIfPresent(automaticDurationTimer, forKey: .automaticDurationTimer)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(tagNames, forKey: .tagNames)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
    }
}

