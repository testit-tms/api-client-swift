//
// WorkItemShortModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WorkItemShortModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let entityTypeNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let sectionNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Work Item internal unique identifier */
    public var id: UUID
    /** Work Item version identifier */
    public var versionId: UUID
    /** Work Item version number */
    public var versionNumber: Int
    /** Work Item name */
    public var name: String
    /** Work Item type. Possible values: CheckLists, SharedSteps, TestCases */
    public var entityTypeName: String
    /** Project unique identifier */
    public var projectId: UUID
    /** Identifier of Section where Work Item is located */
    public var sectionId: UUID
    /** Section name of Work Item */
    public var sectionName: String
    /** Boolean flag determining whether Work Item is automated */
    public var isAutomated: Bool
    /** Work Item global identifier */
    public var globalId: Int64
    /** Work Item duration */
    public var duration: Int
    /** Work Item median duration */
    public var medianDuration: Int64?
    /** Work Item attributes */
    public var attributes: [String: AnyCodable]?
    /** Unique identifier of user who created Work Item */
    public var createdById: UUID
    /** Unique identifier of user who applied the latest modification of Work Item */
    public var modifiedById: UUID?
    /** Date and time of Work Item creation */
    public var createdDate: Date?
    /** Date and time of the latest modification of Work Item */
    public var modifiedDate: Date?
    /** The current state of Work Item */
    public var state: WorkItemStates
    /** Work Item priority level */
    public var priority: WorkItemPriorityModel
    /** Work Item source type */
    public var sourceType: WorkItemSourceTypeModel
    /** Flag determining whether Work Item is deleted */
    public var isDeleted: Bool
    /** Array of tag names of Work Item */
    public var tagNames: [String]?
    /** Set of iterations related to Work Item */
    public var iterations: [IterationModel]
    /** Set of links related to Work Item */
    public var links: [LinkShortModel]

    public init(id: UUID, versionId: UUID, versionNumber: Int, name: String, entityTypeName: String, projectId: UUID, sectionId: UUID, sectionName: String, isAutomated: Bool, globalId: Int64, duration: Int, medianDuration: Int64? = nil, attributes: [String: AnyCodable]? = nil, createdById: UUID, modifiedById: UUID? = nil, createdDate: Date? = nil, modifiedDate: Date? = nil, state: WorkItemStates, priority: WorkItemPriorityModel, sourceType: WorkItemSourceTypeModel, isDeleted: Bool, tagNames: [String]? = nil, iterations: [IterationModel], links: [LinkShortModel]) {
        self.id = id
        self.versionId = versionId
        self.versionNumber = versionNumber
        self.name = name
        self.entityTypeName = entityTypeName
        self.projectId = projectId
        self.sectionId = sectionId
        self.sectionName = sectionName
        self.isAutomated = isAutomated
        self.globalId = globalId
        self.duration = duration
        self.medianDuration = medianDuration
        self.attributes = attributes
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.state = state
        self.priority = priority
        self.sourceType = sourceType
        self.isDeleted = isDeleted
        self.tagNames = tagNames
        self.iterations = iterations
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case versionId
        case versionNumber
        case name
        case entityTypeName
        case projectId
        case sectionId
        case sectionName
        case isAutomated
        case globalId
        case duration
        case medianDuration
        case attributes
        case createdById
        case modifiedById
        case createdDate
        case modifiedDate
        case state
        case priority
        case sourceType
        case isDeleted
        case tagNames
        case iterations
        case links
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(versionId, forKey: .versionId)
        try container.encode(versionNumber, forKey: .versionNumber)
        try container.encode(name, forKey: .name)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encode(sectionName, forKey: .sectionName)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(duration, forKey: .duration)
        try container.encodeIfPresent(medianDuration, forKey: .medianDuration)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(sourceType, forKey: .sourceType)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(tagNames, forKey: .tagNames)
        try container.encode(iterations, forKey: .iterations)
        try container.encode(links, forKey: .links)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WorkItemShortModel: Identifiable {}
