//
// ProjectModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct ProjectModel: Codable, JSONEncodable, Hashable {

    /** Unique ID of the project */
    internal var id: UUID
    /** Description of the project */
    internal var description: String?
    /** Name of the project */
    internal var name: String
    /** Indicates if the project is marked as favorite */
    internal var isFavorite: Bool
    /** Collection of the project attributes */
    internal var attributesScheme: [CustomAttributeModel]?
    /** Collection of the project test plans attributes */
    internal var testPlansAttributesScheme: [CustomAttributeModel]?
    /** Number of test cases in the project */
    internal var testCasesCount: Int?
    /** Number of shared steps in the project */
    internal var sharedStepsCount: Int?
    /** Number of checklists in the project */
    internal var checkListsCount: Int?
    /** Number of autotests in the project */
    internal var autoTestsCount: Int?
    /** Indicates if the project is deleted */
    internal var isDeleted: Bool
    /** Creation date of the project */
    internal var createdDate: Date
    /** Last modification date of the project */
    internal var modifiedDate: Date?
    /** Unique ID of the project creator */
    internal var createdById: UUID
    /** Unique ID of the project last editor */
    internal var modifiedById: UUID?
    /** Global ID of the project */
    internal var globalId: Int64
    /** Type of the project */
    internal var type: ProjectTypeModel
    /** Indicates if the status \"Flaky/Stable\" sets automatically */
    internal var isFlakyAuto: Bool

    internal init(id: UUID, description: String? = nil, name: String, isFavorite: Bool, attributesScheme: [CustomAttributeModel]? = nil, testPlansAttributesScheme: [CustomAttributeModel]? = nil, testCasesCount: Int? = nil, sharedStepsCount: Int? = nil, checkListsCount: Int? = nil, autoTestsCount: Int? = nil, isDeleted: Bool, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, globalId: Int64, type: ProjectTypeModel, isFlakyAuto: Bool) {
        self.id = id
        self.description = description
        self.name = name
        self.isFavorite = isFavorite
        self.attributesScheme = attributesScheme
        self.testPlansAttributesScheme = testPlansAttributesScheme
        self.testCasesCount = testCasesCount
        self.sharedStepsCount = sharedStepsCount
        self.checkListsCount = checkListsCount
        self.autoTestsCount = autoTestsCount
        self.isDeleted = isDeleted
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.globalId = globalId
        self.type = type
        self.isFlakyAuto = isFlakyAuto
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case description
        case name
        case isFavorite
        case attributesScheme
        case testPlansAttributesScheme
        case testCasesCount
        case sharedStepsCount
        case checkListsCount
        case autoTestsCount
        case isDeleted
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case globalId
        case type
        case isFlakyAuto
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(name, forKey: .name)
        try container.encode(isFavorite, forKey: .isFavorite)
        try container.encodeIfPresent(attributesScheme, forKey: .attributesScheme)
        try container.encodeIfPresent(testPlansAttributesScheme, forKey: .testPlansAttributesScheme)
        try container.encodeIfPresent(testCasesCount, forKey: .testCasesCount)
        try container.encodeIfPresent(sharedStepsCount, forKey: .sharedStepsCount)
        try container.encodeIfPresent(checkListsCount, forKey: .checkListsCount)
        try container.encodeIfPresent(autoTestsCount, forKey: .autoTestsCount)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(type, forKey: .type)
        try container.encode(isFlakyAuto, forKey: .isFlakyAuto)
    }
}

