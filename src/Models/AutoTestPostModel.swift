//
// AutoTestPostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AutoTestPostModel: Codable, JSONEncodable, Hashable {

    static let workItemIdsForLinkWithAutoTestRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let externalIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Specifies the IDs of work items to link your autotest to. You can specify several IDs. */
    internal var workItemIdsForLinkWithAutoTest: Set<UUID>?
    /** Creates a test case linked to the autotest. */
    internal var shouldCreateWorkItem: Bool?
    /** Key value pair of custom work item attributes */
    internal var attributes: [String: AnyCodable]?
    /** External ID of the autotest */
    internal var externalId: String
    /** Collection of the autotest links */
    internal var links: [LinkPostModel]?
    /** Unique ID of the autotest project */
    internal var projectId: UUID
    /** Name of the autotest */
    internal var name: String
    /** Name of the autotest namespace */
    internal var namespace: String?
    /** Name of the autotest class */
    internal var classname: String?
    /** Collection of the autotest steps */
    internal var steps: [AutoTestStepModel]?
    /** Collection of the autotest setup steps */
    internal var setup: [AutoTestStepModel]?
    /** Collection of the autotest teardown steps */
    internal var teardown: [AutoTestStepModel]?
    /** Name of the autotest in autotest's card */
    internal var title: String?
    /** Description of the autotest in autotest's card */
    internal var description: String?
    /** Collection of the autotest labels */
    internal var labels: [LabelPostModel]?
    /** Indicates if the autotest is marked as flaky */
    internal var isFlaky: Bool?
    /** External key of the autotest */
    internal var externalKey: String?

    internal init(workItemIdsForLinkWithAutoTest: Set<UUID>? = nil, shouldCreateWorkItem: Bool? = nil, attributes: [String: AnyCodable]? = nil, externalId: String, links: [LinkPostModel]? = nil, projectId: UUID, name: String, namespace: String? = nil, classname: String? = nil, steps: [AutoTestStepModel]? = nil, setup: [AutoTestStepModel]? = nil, teardown: [AutoTestStepModel]? = nil, title: String? = nil, description: String? = nil, labels: [LabelPostModel]? = nil, isFlaky: Bool? = nil, externalKey: String? = nil) {
        self.workItemIdsForLinkWithAutoTest = workItemIdsForLinkWithAutoTest
        self.shouldCreateWorkItem = shouldCreateWorkItem
        self.attributes = attributes
        self.externalId = externalId
        self.links = links
        self.projectId = projectId
        self.name = name
        self.namespace = namespace
        self.classname = classname
        self.steps = steps
        self.setup = setup
        self.teardown = teardown
        self.title = title
        self.description = description
        self.labels = labels
        self.isFlaky = isFlaky
        self.externalKey = externalKey
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case workItemIdsForLinkWithAutoTest
        case shouldCreateWorkItem
        case attributes
        case externalId
        case links
        case projectId
        case name
        case namespace
        case classname
        case steps
        case setup
        case teardown
        case title
        case description
        case labels
        case isFlaky
        case externalKey
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(workItemIdsForLinkWithAutoTest, forKey: .workItemIdsForLinkWithAutoTest)
        try container.encodeIfPresent(shouldCreateWorkItem, forKey: .shouldCreateWorkItem)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encode(externalId, forKey: .externalId)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(classname, forKey: .classname)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(setup, forKey: .setup)
        try container.encodeIfPresent(teardown, forKey: .teardown)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
    }
}

