//
// WorkItemPutModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct WorkItemPutModel: Codable, JSONEncodable, Hashable {

    static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400000, exclusiveMaximum: false, multipleOf: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    internal var attachments: [AttachmentPutModel]
    internal var iterations: [IterationPutModel]?
    internal var autoTests: [AutoTestIdModel]?
    internal var id: UUID
    internal var sectionId: UUID
    internal var description: String?
    internal var state: WorkItemStates
    internal var priority: WorkItemPriorityModel
    internal var steps: [StepPutModel]
    internal var preconditionSteps: [StepPutModel]
    internal var postconditionSteps: [StepPutModel]
    internal var duration: Int
    internal var attributes: [String: AnyCodable]
    internal var tags: [TagPutModel]
    internal var links: [LinkPutModel]
    internal var name: String

    internal init(attachments: [AttachmentPutModel], iterations: [IterationPutModel]? = nil, autoTests: [AutoTestIdModel]? = nil, id: UUID, sectionId: UUID, description: String? = nil, state: WorkItemStates, priority: WorkItemPriorityModel, steps: [StepPutModel], preconditionSteps: [StepPutModel], postconditionSteps: [StepPutModel], duration: Int, attributes: [String: AnyCodable], tags: [TagPutModel], links: [LinkPutModel], name: String) {
        self.attachments = attachments
        self.iterations = iterations
        self.autoTests = autoTests
        self.id = id
        self.sectionId = sectionId
        self.description = description
        self.state = state
        self.priority = priority
        self.steps = steps
        self.preconditionSteps = preconditionSteps
        self.postconditionSteps = postconditionSteps
        self.duration = duration
        self.attributes = attributes
        self.tags = tags
        self.links = links
        self.name = name
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case attachments
        case iterations
        case autoTests
        case id
        case sectionId
        case description
        case state
        case priority
        case steps
        case preconditionSteps
        case postconditionSteps
        case duration
        case attributes
        case tags
        case links
        case name
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(attachments, forKey: .attachments)
        try container.encodeIfPresent(iterations, forKey: .iterations)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
        try container.encode(id, forKey: .id)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(steps, forKey: .steps)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(duration, forKey: .duration)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(links, forKey: .links)
        try container.encode(name, forKey: .name)
    }
}

