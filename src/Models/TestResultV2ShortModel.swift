//
// TestResultV2ShortModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestResultV2ShortModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var configurationId: UUID
    internal var workItemVersionId: UUID
    internal var autoTestId: UUID?
    internal var message: String?
    internal var traces: String?
    internal var startedOn: Date?
    internal var completedOn: Date?
    internal var runByUserId: UUID?
    internal var stoppedByUserId: UUID?
    internal var testPointId: UUID?
    internal var testPoint: TestPointShortModel?
    internal var testRunId: UUID
    /** Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped */
    internal var outcome: String
    internal var comment: String?
    internal var links: [LinkModel]?
    internal var attachments: [AttachmentModel]?
    internal var parameters: [String: String]?
    internal var properties: [String: String]?

    internal init(id: UUID, configurationId: UUID, workItemVersionId: UUID, autoTestId: UUID? = nil, message: String? = nil, traces: String? = nil, startedOn: Date? = nil, completedOn: Date? = nil, runByUserId: UUID? = nil, stoppedByUserId: UUID? = nil, testPointId: UUID? = nil, testPoint: TestPointShortModel? = nil, testRunId: UUID, outcome: String, comment: String? = nil, links: [LinkModel]? = nil, attachments: [AttachmentModel]? = nil, parameters: [String: String]? = nil, properties: [String: String]? = nil) {
        self.id = id
        self.configurationId = configurationId
        self.workItemVersionId = workItemVersionId
        self.autoTestId = autoTestId
        self.message = message
        self.traces = traces
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.runByUserId = runByUserId
        self.stoppedByUserId = stoppedByUserId
        self.testPointId = testPointId
        self.testPoint = testPoint
        self.testRunId = testRunId
        self.outcome = outcome
        self.comment = comment
        self.links = links
        self.attachments = attachments
        self.parameters = parameters
        self.properties = properties
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case configurationId
        case workItemVersionId
        case autoTestId
        case message
        case traces
        case startedOn
        case completedOn
        case runByUserId
        case stoppedByUserId
        case testPointId
        case testPoint
        case testRunId
        case outcome
        case comment
        case links
        case attachments
        case parameters
        case properties
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(autoTestId, forKey: .autoTestId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(traces, forKey: .traces)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(runByUserId, forKey: .runByUserId)
        try container.encodeIfPresent(stoppedByUserId, forKey: .stoppedByUserId)
        try container.encodeIfPresent(testPointId, forKey: .testPointId)
        try container.encodeIfPresent(testPoint, forKey: .testPoint)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encode(outcome, forKey: .outcome)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(properties, forKey: .properties)
    }
}

