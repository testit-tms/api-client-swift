//
// TestPointAnalyticResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPointAnalyticResult: Codable, JSONEncodable, Hashable {

    internal var countGroupByStatus: [TestPlanGroupByStatus]
    internal var sumGroupByTester: [TestPlanGroupByTester]
    internal var countGroupByTester: [TestPlanGroupByTester]
    internal var countGroupByTestSuite: [TestPlanGroupByTestSuite]
    internal var countGroupByTesterAndStatus: [TestPlanGroupByTesterAndStatus]

    internal init(countGroupByStatus: [TestPlanGroupByStatus], sumGroupByTester: [TestPlanGroupByTester], countGroupByTester: [TestPlanGroupByTester], countGroupByTestSuite: [TestPlanGroupByTestSuite], countGroupByTesterAndStatus: [TestPlanGroupByTesterAndStatus]) {
        self.countGroupByStatus = countGroupByStatus
        self.sumGroupByTester = sumGroupByTester
        self.countGroupByTester = countGroupByTester
        self.countGroupByTestSuite = countGroupByTestSuite
        self.countGroupByTesterAndStatus = countGroupByTesterAndStatus
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case countGroupByStatus
        case sumGroupByTester
        case countGroupByTester
        case countGroupByTestSuite
        case countGroupByTesterAndStatus
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(countGroupByStatus, forKey: .countGroupByStatus)
        try container.encode(sumGroupByTester, forKey: .sumGroupByTester)
        try container.encode(countGroupByTester, forKey: .countGroupByTester)
        try container.encode(countGroupByTestSuite, forKey: .countGroupByTestSuite)
        try container.encode(countGroupByTesterAndStatus, forKey: .countGroupByTesterAndStatus)
    }
}

