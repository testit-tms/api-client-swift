//
// ProjectsFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct ProjectsFilterModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let typesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Specifies a project name to search for */
    internal var name: String?
    /** Specifies a project favorite status to search for */
    internal var isFavorite: Bool?
    /** Specifies a project deleted status to search for */
    internal var isDeleted: Bool?
    /** Specifies a project range of test cases count to search for */
    internal var testCasesCount: Int32RangeSelectorModel?
    /** Specifies a project range of checklists count to search for */
    internal var checklistsCount: Int32RangeSelectorModel?
    /** Specifies a project range of shared steps count to search for */
    internal var sharedStepsCount: Int32RangeSelectorModel?
    /** Specifies a project range of autotests count to search for */
    internal var autotestsCount: Int32RangeSelectorModel?
    /** Specifies a project global IDs to search for */
    internal var globalIds: Set<Int64>?
    /** Specifies a project range of creation date to search for */
    internal var createdDate: DateTimeRangeSelectorModel?
    /** Specifies an autotest creator IDs to search for */
    internal var createdByIds: Set<UUID>?
    /** Collection of project types to search for */
    internal var types: Set<ProjectTypeModel>?

    internal init(name: String? = nil, isFavorite: Bool? = nil, isDeleted: Bool? = nil, testCasesCount: Int32RangeSelectorModel? = nil, checklistsCount: Int32RangeSelectorModel? = nil, sharedStepsCount: Int32RangeSelectorModel? = nil, autotestsCount: Int32RangeSelectorModel? = nil, globalIds: Set<Int64>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, createdByIds: Set<UUID>? = nil, types: Set<ProjectTypeModel>? = nil) {
        self.name = name
        self.isFavorite = isFavorite
        self.isDeleted = isDeleted
        self.testCasesCount = testCasesCount
        self.checklistsCount = checklistsCount
        self.sharedStepsCount = sharedStepsCount
        self.autotestsCount = autotestsCount
        self.globalIds = globalIds
        self.createdDate = createdDate
        self.createdByIds = createdByIds
        self.types = types
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case isFavorite
        case isDeleted
        case testCasesCount
        case checklistsCount
        case sharedStepsCount
        case autotestsCount
        case globalIds
        case createdDate
        case createdByIds
        case types
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isFavorite, forKey: .isFavorite)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(testCasesCount, forKey: .testCasesCount)
        try container.encodeIfPresent(checklistsCount, forKey: .checklistsCount)
        try container.encodeIfPresent(sharedStepsCount, forKey: .sharedStepsCount)
        try container.encodeIfPresent(autotestsCount, forKey: .autotestsCount)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(types, forKey: .types)
    }
}

