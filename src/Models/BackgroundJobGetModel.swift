//
// BackgroundJobGetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct BackgroundJobGetModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var jobId: String
    internal var jobType: BackgroundJobType
    internal var state: BackgroundJobState
    internal var isDeleted: Bool
    internal var progress: Int64
    internal var createdDate: Date
    internal var startDate: Date?
    internal var endDate: Date?
    internal var error: String?
    internal var attachments: [BackgroundJobAttachmentModel]

    internal init(id: UUID, jobId: String, jobType: BackgroundJobType, state: BackgroundJobState, isDeleted: Bool, progress: Int64, createdDate: Date, startDate: Date? = nil, endDate: Date? = nil, error: String? = nil, attachments: [BackgroundJobAttachmentModel]) {
        self.id = id
        self.jobId = jobId
        self.jobType = jobType
        self.state = state
        self.isDeleted = isDeleted
        self.progress = progress
        self.createdDate = createdDate
        self.startDate = startDate
        self.endDate = endDate
        self.error = error
        self.attachments = attachments
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case jobId
        case jobType
        case state
        case isDeleted
        case progress
        case createdDate
        case startDate
        case endDate
        case error
        case attachments
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(jobId, forKey: .jobId)
        try container.encode(jobType, forKey: .jobType)
        try container.encode(state, forKey: .state)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(progress, forKey: .progress)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encode(attachments, forKey: .attachments)
    }
}

