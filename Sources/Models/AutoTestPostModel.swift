//
// AutoTestPostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AutoTestPostModel: Codable, JSONEncodable, Hashable {

    public static let workItemIdsForLinkWithAutoTestRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let externalIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Specifies the IDs of work items to link your autotest to. You can specify several IDs. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var workItemIdsForLinkWithAutoTest: Set<UUID>?
    /** Specifies the IDs of work items to link your autotest to. You can specify several IDs. */
    public var workItemIds: [UUID]?
    /** Creates a test case linked to the autotest. */
    public var shouldCreateWorkItem: Bool?
    /** Key value pair of custom work item attributes */
    public var attributes: [String: AnyCodable]?
    /** External ID of the autotest */
    public var externalId: String
    /** Collection of the autotest links */
    public var links: [LinkPostModel]?
    /** Unique ID of the autotest project */
    public var projectId: UUID
    /** Name of the autotest */
    public var name: String
    /** Name of the autotest namespace */
    public var namespace: String?
    /** Name of the autotest class */
    public var classname: String?
    /** Collection of the autotest steps */
    public var steps: [AutoTestStepModel]?
    /** Collection of the autotest setup steps */
    public var setup: [AutoTestStepModel]?
    /** Collection of the autotest teardown steps */
    public var teardown: [AutoTestStepModel]?
    /** Name of the autotest in autotest's card */
    public var title: String?
    /** Description of the autotest in autotest's card */
    public var description: String?
    /** Collection of the autotest labels */
    public var labels: [LabelPostModel]?
    /** Indicates if the autotest is marked as flaky */
    public var isFlaky: Bool?
    /** External key of the autotest */
    public var externalKey: String?

    public init(workItemIdsForLinkWithAutoTest: Set<UUID>? = nil, workItemIds: [UUID]? = nil, shouldCreateWorkItem: Bool? = nil, attributes: [String: AnyCodable]? = nil, externalId: String, links: [LinkPostModel]? = nil, projectId: UUID, name: String, namespace: String? = nil, classname: String? = nil, steps: [AutoTestStepModel]? = nil, setup: [AutoTestStepModel]? = nil, teardown: [AutoTestStepModel]? = nil, title: String? = nil, description: String? = nil, labels: [LabelPostModel]? = nil, isFlaky: Bool? = nil, externalKey: String? = nil) {
        self.workItemIdsForLinkWithAutoTest = workItemIdsForLinkWithAutoTest
        self.workItemIds = workItemIds
        self.shouldCreateWorkItem = shouldCreateWorkItem
        self.attributes = attributes
        self.externalId = externalId
        self.links = links
        self.projectId = projectId
        self.name = name
        self.namespace = namespace
        self.classname = classname
        self.steps = steps
        self.setup = setup
        self.teardown = teardown
        self.title = title
        self.description = description
        self.labels = labels
        self.isFlaky = isFlaky
        self.externalKey = externalKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case workItemIdsForLinkWithAutoTest
        case workItemIds
        case shouldCreateWorkItem
        case attributes
        case externalId
        case links
        case projectId
        case name
        case namespace
        case classname
        case steps
        case setup
        case teardown
        case title
        case description
        case labels
        case isFlaky
        case externalKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(workItemIdsForLinkWithAutoTest, forKey: .workItemIdsForLinkWithAutoTest)
        try container.encodeIfPresent(workItemIds, forKey: .workItemIds)
        try container.encodeIfPresent(shouldCreateWorkItem, forKey: .shouldCreateWorkItem)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encode(externalId, forKey: .externalId)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(classname, forKey: .classname)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(setup, forKey: .setup)
        try container.encodeIfPresent(teardown, forKey: .teardown)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
    }
}

