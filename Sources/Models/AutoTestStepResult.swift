//
// AutoTestStepResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AutoTestStepResult: Codable, JSONEncodable, Hashable {

    public static let durationRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 43200000000, exclusiveMaximum: false, multipleOf: nil)
    /** The name of the step. */
    public var title: String?
    /** Description of the step result. */
    public var description: String?
    /** Extended description of the step result. */
    public var info: String?
    /** Step start date. */
    public var startedOn: Date?
    /** Step end date. */
    public var completedOn: Date?
    /** Expected or actual duration of the test run execution in milliseconds. */
    public var duration: Int64?
    /** Specifies the result of the autotest execution. */
    public var outcome: AvailableTestResultOutcome?
    /** Nested step results. The maximum nesting level is 15. */
    public var stepResults: [AutoTestStepResult]?
    /** /// <summary> Specifies an attachment GUID. Multiple values can be sent. </summary> */
    public var attachments: [AttachmentApiResult]?
    /** \"<b>parameter</b>\": \"<b>value</b>\" pair with arbitrary custom parameters. Multiple parameters can be sent. */
    public var parameters: [String: String]?

    public init(title: String? = nil, description: String? = nil, info: String? = nil, startedOn: Date? = nil, completedOn: Date? = nil, duration: Int64? = nil, outcome: AvailableTestResultOutcome? = nil, stepResults: [AutoTestStepResult]? = nil, attachments: [AttachmentApiResult]? = nil, parameters: [String: String]? = nil) {
        self.title = title
        self.description = description
        self.info = info
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.duration = duration
        self.outcome = outcome
        self.stepResults = stepResults
        self.attachments = attachments
        self.parameters = parameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case description
        case info
        case startedOn
        case completedOn
        case duration
        case outcome
        case stepResults
        case attachments
        case parameters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(info, forKey: .info)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(stepResults, forKey: .stepResults)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(parameters, forKey: .parameters)
    }
}

