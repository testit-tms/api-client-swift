//
// ProjectTestPlanTestPointsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProjectTestPlanTestPointsAPI {

    /**
     Rerun autotests.
     
     - parameter projectId: (path)  
     - parameter testPlanId: (path)  
     - parameter testPlanTestPointsAutoTestsRerunApiModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost(projectId: String, testPlanId: UUID, testPlanTestPointsAutoTestsRerunApiModel: TestPlanTestPointsAutoTestsRerunApiModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostWithRequestBuilder(projectId: projectId, testPlanId: testPlanId, testPlanTestPointsAutoTestsRerunApiModel: testPlanTestPointsAutoTestsRerunApiModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Rerun autotests.
     - POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (path)  
     - parameter testPlanId: (path)  
     - parameter testPlanTestPointsAutoTestsRerunApiModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostWithRequestBuilder(projectId: String, testPlanId: UUID, testPlanTestPointsAutoTestsRerunApiModel: TestPlanTestPointsAutoTestsRerunApiModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let testPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(testPlanId))"
        let testPlanIdPostEscape = testPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{testPlanId}", with: testPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPlanTestPointsAutoTestsRerunApiModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Run autotests.
     
     - parameter projectId: (path)  
     - parameter testPlanId: (path)  
     - parameter testPlanTestPointsAutoTestsRunApiModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost(projectId: String, testPlanId: UUID, testPlanTestPointsAutoTestsRunApiModel: TestPlanTestPointsAutoTestsRunApiModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestRunNameApiResult?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostWithRequestBuilder(projectId: projectId, testPlanId: testPlanId, testPlanTestPointsAutoTestsRunApiModel: testPlanTestPointsAutoTestsRunApiModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Run autotests.
     - POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (path)  
     - parameter testPlanId: (path)  
     - parameter testPlanTestPointsAutoTestsRunApiModel: (body)  (optional)
     - returns: RequestBuilder<TestRunNameApiResult> 
     */
    open class func apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostWithRequestBuilder(projectId: String, testPlanId: UUID, testPlanTestPointsAutoTestsRunApiModel: TestPlanTestPointsAutoTestsRunApiModel? = nil) -> RequestBuilder<TestRunNameApiResult> {
        var localVariablePath = "/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let testPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(testPlanId))"
        let testPlanIdPostEscape = testPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{testPlanId}", with: testPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPlanTestPointsAutoTestsRunApiModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestRunNameApiResult>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
