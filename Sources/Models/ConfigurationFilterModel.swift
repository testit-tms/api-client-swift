//
// ConfigurationFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConfigurationFilterModel: Codable, JSONEncodable, Hashable {

    public static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Collection of identifiers of projects from which configurations will be taken */
    public var projectIds: Set<UUID>?
    /** Filter to search by name (case-insensitive, partial match) */
    public var name: String?
    /** Is configurations deleted or existing */
    public var isDeleted: Bool?
    /** Collection of global (integer) identifiers to filter configurations */
    public var globalIds: Set<Int64>?

    public init(projectIds: Set<UUID>? = nil, name: String? = nil, isDeleted: Bool? = nil, globalIds: Set<Int64>? = nil) {
        self.projectIds = projectIds
        self.name = name
        self.isDeleted = isDeleted
        self.globalIds = globalIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectIds
        case name
        case isDeleted
        case globalIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
    }
}

