//
// ProjectImportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProjectImportAPI {

    /**
     Import project from JSON file into existing project in background job
     
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter file: (form) Select file (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func backgroundImportToExistingProject(projectId: String, file: URL? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: UUID?, _ error: Error?) -> Void)) -> RequestTask {
        return backgroundImportToExistingProjectWithRequestBuilder(projectId: projectId, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Import project from JSON file into existing project in background job
     - POST /api/v2/projects/{projectId}/import/json
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter file: (form) Select file (optional)
     - returns: RequestBuilder<UUID> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func backgroundImportToExistingProjectWithRequestBuilder(projectId: String, file: URL? = nil) -> RequestBuilder<UUID> {
        var localVariablePath = "/api/v2/projects/{projectId}/import/json"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UUID>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Import project from Zip file into existing project in background job
     
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter file: (form) Select file (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func backgroundImportZipToExistingProject(projectId: String, file: URL? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: UUID?, _ error: Error?) -> Void)) -> RequestTask {
        return backgroundImportZipToExistingProjectWithRequestBuilder(projectId: projectId, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Import project from Zip file into existing project in background job
     - POST /api/v2/projects/{projectId}/import/zip
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter file: (form) Select file (optional)
     - returns: RequestBuilder<UUID> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func backgroundImportZipToExistingProjectWithRequestBuilder(projectId: String, file: URL? = nil) -> RequestBuilder<UUID> {
        var localVariablePath = "/api/v2/projects/{projectId}/import/zip"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UUID>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Import project from JSON file into existing project
     
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter includeAttachments: (query)  (optional)
     - parameter file: (form) Select file (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func importToExistingProject(projectId: String, includeAttachments: Bool? = nil, file: URL? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return importToExistingProjectWithRequestBuilder(projectId: projectId, includeAttachments: includeAttachments, file: file).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Import project from JSON file into existing project
     - POST /api/v2/projects/{projectId}/import
     -  Use case   User attaches project as json file taken from export or export-by-testPlans method   User runs method execution   System updates project   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (path) Project internal (UUID) or global (integer) identifier 
     - parameter includeAttachments: (query)  (optional)
     - parameter file: (form) Select file (optional)
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func importToExistingProjectWithRequestBuilder(projectId: String, includeAttachments: Bool? = nil, file: URL? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/projects/{projectId}/import"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeAttachments": (wrappedValue: includeAttachments?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
