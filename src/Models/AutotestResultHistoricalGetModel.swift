//
// AutotestResultHistoricalGetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AutotestResultHistoricalGetModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var createdDate: Date
    internal var createdById: UUID
    internal var createdByName: String
    internal var testRunId: UUID
    internal var testRunName: String?
    internal var configurationId: UUID
    internal var configurationName: String
    internal var outcome: AutotestResultOutcome
    internal var launchSource: String?
    internal var modifiedDate: Date?
    internal var modifiedById: UUID?
    internal var testPlanId: UUID?
    internal var testPlanGlobalId: Int64?
    internal var testPlanName: String?
    internal var duration: Int64?

    internal init(id: UUID, createdDate: Date, createdById: UUID, createdByName: String, testRunId: UUID, testRunName: String? = nil, configurationId: UUID, configurationName: String, outcome: AutotestResultOutcome, launchSource: String? = nil, modifiedDate: Date? = nil, modifiedById: UUID? = nil, testPlanId: UUID? = nil, testPlanGlobalId: Int64? = nil, testPlanName: String? = nil, duration: Int64? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.createdById = createdById
        self.createdByName = createdByName
        self.testRunId = testRunId
        self.testRunName = testRunName
        self.configurationId = configurationId
        self.configurationName = configurationName
        self.outcome = outcome
        self.launchSource = launchSource
        self.modifiedDate = modifiedDate
        self.modifiedById = modifiedById
        self.testPlanId = testPlanId
        self.testPlanGlobalId = testPlanGlobalId
        self.testPlanName = testPlanName
        self.duration = duration
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case createdById
        case createdByName
        case testRunId
        case testRunName
        case configurationId
        case configurationName
        case outcome
        case launchSource
        case modifiedDate
        case modifiedById
        case testPlanId
        case testPlanGlobalId
        case testPlanName
        case duration
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encode(createdByName, forKey: .createdByName)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encodeIfPresent(testRunName, forKey: .testRunName)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(configurationName, forKey: .configurationName)
        try container.encode(outcome, forKey: .outcome)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(testPlanGlobalId, forKey: .testPlanGlobalId)
        try container.encodeIfPresent(testPlanName, forKey: .testPlanName)
        try container.encodeIfPresent(duration, forKey: .duration)
    }
}

