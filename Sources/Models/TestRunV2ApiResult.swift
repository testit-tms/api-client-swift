//
// TestRunV2ApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestRunV2ApiResult: Codable, JSONEncodable, Hashable {

    /** Test run unique identifier */
    public var id: UUID
    /** Test run name */
    public var name: String
    /** Test run description */
    public var description: String?
    /** Test run launch source              Once launch source is specified it cannot be updated. */
    public var launchSource: String?
    /** Date and time of test run start */
    public var startedOn: Date?
    /** Date and time of test run end */
    public var completedOn: Date?
    /** Test run state */
    @available(*, deprecated, message: "This property is deprecated.")
    public var stateName: TestRunState
    /** Test run status */
    public var status: TestStatusApiResult
    /** Project unique identifier              This property is used to link test run with project. */
    public var projectId: UUID
    /** Test plan unique identifier              This property is used to link test run with test plan. */
    public var testPlanId: UUID?
    /** Enumeration of test results related to test run */
    public var testResults: [TestResultV2GetModel]?
    /** Date and time of test run creation */
    public var createdDate: Date
    /** Date and time of last test run  modification */
    public var modifiedDate: Date?
    /** Unique identifier of user who created test run */
    public var createdById: UUID
    /** Unique identifier of user who applied last test run  modification */
    public var modifiedById: UUID?
    /** Username of user who created test run */
    public var createdByUserName: String?
    /** Collection of attachments related to the test run */
    public var attachments: [AttachmentApiResult]
    /** Collection of links related to the test run */
    public var links: [LinkApiResult]
    /** Customers test run parameters */
    public var customParameters: [String: String]?
    /** Enabled webhooks */
    public var webhooks: [NamedEntityApiModel]
    /** Run count */
    public var runCount: Int

    public init(id: UUID, name: String, description: String? = nil, launchSource: String? = nil, startedOn: Date? = nil, completedOn: Date? = nil, stateName: TestRunState, status: TestStatusApiResult, projectId: UUID, testPlanId: UUID? = nil, testResults: [TestResultV2GetModel]? = nil, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, createdByUserName: String? = nil, attachments: [AttachmentApiResult], links: [LinkApiResult], customParameters: [String: String]? = nil, webhooks: [NamedEntityApiModel], runCount: Int) {
        self.id = id
        self.name = name
        self.description = description
        self.launchSource = launchSource
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.stateName = stateName
        self.status = status
        self.projectId = projectId
        self.testPlanId = testPlanId
        self.testResults = testResults
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdByUserName = createdByUserName
        self.attachments = attachments
        self.links = links
        self.customParameters = customParameters
        self.webhooks = webhooks
        self.runCount = runCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case launchSource
        case startedOn
        case completedOn
        case stateName
        case status
        case projectId
        case testPlanId
        case testResults
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case createdByUserName
        case attachments
        case links
        case customParameters
        case webhooks
        case runCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encode(stateName, forKey: .stateName)
        try container.encode(status, forKey: .status)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(testResults, forKey: .testResults)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(createdByUserName, forKey: .createdByUserName)
        try container.encode(attachments, forKey: .attachments)
        try container.encode(links, forKey: .links)
        try container.encodeIfPresent(customParameters, forKey: .customParameters)
        try container.encode(webhooks, forKey: .webhooks)
        try container.encode(runCount, forKey: .runCount)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestRunV2ApiResult: Identifiable {}
