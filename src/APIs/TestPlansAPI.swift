//
// TestPlansAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class TestPlansAPI {

    /**
     Add test-points to TestPlan with sections
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter workItemSelectModel: (body) Filter object to retrieve work items for test-suite&#39;s project (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func addTestPointsWithSections(id: String, workItemSelectModel: WorkItemSelectModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return addTestPointsWithSectionsWithRequestBuilder(id: id, workItemSelectModel: workItemSelectModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add test-points to TestPlan with sections
     - POST /api/v2/testPlans/{id}/test-points/withSections
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter workItemSelectModel: (body) Filter object to retrieve work items for test-suite&#39;s project (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func addTestPointsWithSectionsWithRequestBuilder(id: String, workItemSelectModel: WorkItemSelectModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/test-points/withSections"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workItemSelectModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add WorkItems to TestPlan with Sections as TestSuites
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter requestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func addWorkItemsWithSections(id: String, requestBody: Set<UUID>? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return addWorkItemsWithSectionsWithRequestBuilder(id: id, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add WorkItems to TestPlan with Sections as TestSuites
     - POST /api/v2/testPlans/{id}/workItems/withSections
     -  Use case   User sets TestPlan identifier   User sets WorkItem identifiers (listed in request example)   User runs method execution   System added WorkItems and Sections to TestPlan   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter requestBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func addWorkItemsWithSectionsWithRequestBuilder(id: String, requestBody: Set<UUID>? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/workItems/withSections"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get analytics by TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdAnalyticsGet(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestPointAnalyticResult?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdAnalyticsGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get analytics by TestPlan
     - GET /api/v2/testPlans/{id}/analytics
     -  Use case   User sets test plan identifier   User runs method execution   System returns analytics by test plan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<TestPointAnalyticResult> 
     */
    internal class func apiV2TestPlansIdAnalyticsGetWithRequestBuilder(id: String) -> RequestBuilder<TestPointAnalyticResult> {
        var localVariablePath = "/api/v2/testPlans/{id}/analytics"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestPointAnalyticResult>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Distribute test points between the users
     
     - parameter id: (path) Test plan unique or global ID 
     - parameter testers: (query) Specifies a project user IDs to distribute (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdAutobalancePost(id: String, testers: Set<UUID>? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestPlanWithTestSuiteTreeModel?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdAutobalancePostWithRequestBuilder(id: id, testers: testers).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Distribute test points between the users
     - POST /api/v2/testPlans/{id}/autobalance
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan unique or global ID 
     - parameter testers: (query) Specifies a project user IDs to distribute (optional)
     - returns: RequestBuilder<TestPlanWithTestSuiteTreeModel> 
     */
    internal class func apiV2TestPlansIdAutobalancePostWithRequestBuilder(id: String, testers: Set<UUID>? = nil) -> RequestBuilder<TestPlanWithTestSuiteTreeModel> {
        var localVariablePath = "/api/v2/testPlans/{id}/autobalance"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "testers": (wrappedValue: testers?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestPlanWithTestSuiteTreeModel>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestPlan configurations
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdConfigurationsGet(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ConfigurationModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdConfigurationsGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestPlan configurations
     - GET /api/v2/testPlans/{id}/configurations
     -  Use case   User sets test plan identifier   User runs method execution   System return test plan configurations
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<[ConfigurationModel]> 
     */
    internal class func apiV2TestPlansIdConfigurationsGetWithRequestBuilder(id: String) -> RequestBuilder<[ConfigurationModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/configurations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConfigurationModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Export TestPoints from TestPlan in xls format
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter timeZoneOffsetInMinutes: (header)  (optional)
     - parameter getXlsxTestPointsByTestPlanModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdExportTestPointsXlsxPost(id: String, timeZoneOffsetInMinutes: Int64? = nil, getXlsxTestPointsByTestPlanModel: GetXlsxTestPointsByTestPlanModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdExportTestPointsXlsxPostWithRequestBuilder(id: id, timeZoneOffsetInMinutes: timeZoneOffsetInMinutes, getXlsxTestPointsByTestPlanModel: getXlsxTestPointsByTestPlanModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Export TestPoints from TestPlan in xls format
     - POST /api/v2/testPlans/{id}/export/testPoints/xlsx
     -  Use case   User sets test plan identifier   User sets filter model (listed in request example)   User runs method execution   System return export xlsx file
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter timeZoneOffsetInMinutes: (header)  (optional)
     - parameter getXlsxTestPointsByTestPlanModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdExportTestPointsXlsxPostWithRequestBuilder(id: String, timeZoneOffsetInMinutes: Int64? = nil, getXlsxTestPointsByTestPlanModel: GetXlsxTestPointsByTestPlanModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/export/testPoints/xlsx"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getXlsxTestPointsByTestPlanModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "time-Zone-Offset-In-Minutes": timeZoneOffsetInMinutes?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Export TestResults history from TestPlan in xls format
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter mustReturnOnlyLastTestResult: (query)  (optional)
     - parameter includeSteps: (query)  (optional)
     - parameter includeDeletedTestSuites: (query)  (optional)
     - parameter timeZoneOffsetInMinutes: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdExportTestResultHistoryXlsxPost(id: String, mustReturnOnlyLastTestResult: Bool? = nil, includeSteps: Bool? = nil, includeDeletedTestSuites: Bool? = nil, timeZoneOffsetInMinutes: Int64? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdExportTestResultHistoryXlsxPostWithRequestBuilder(id: id, mustReturnOnlyLastTestResult: mustReturnOnlyLastTestResult, includeSteps: includeSteps, includeDeletedTestSuites: includeDeletedTestSuites, timeZoneOffsetInMinutes: timeZoneOffsetInMinutes).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Export TestResults history from TestPlan in xls format
     - POST /api/v2/testPlans/{id}/export/testResultHistory/xlsx
     -  Use case   User sets test plan identifier   User sets filter model (listed in request example)   User runs method execution   System return export xlsx file
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter mustReturnOnlyLastTestResult: (query)  (optional)
     - parameter includeSteps: (query)  (optional)
     - parameter includeDeletedTestSuites: (query)  (optional)
     - parameter timeZoneOffsetInMinutes: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdExportTestResultHistoryXlsxPostWithRequestBuilder(id: String, mustReturnOnlyLastTestResult: Bool? = nil, includeSteps: Bool? = nil, includeDeletedTestSuites: Bool? = nil, timeZoneOffsetInMinutes: Int64? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/export/testResultHistory/xlsx"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mustReturnOnlyLastTestResult": (wrappedValue: mustReturnOnlyLastTestResult?.encodeToJSON(), isExplode: true),
            "includeSteps": (wrappedValue: includeSteps?.encodeToJSON(), isExplode: true),
            "includeDeletedTestSuites": (wrappedValue: includeDeletedTestSuites?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "time-Zone-Offset-In-Minutes": timeZoneOffsetInMinutes?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestPlan history
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdHistoryGet(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestPlanChangeModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdHistoryGetWithRequestBuilder(id: id, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestPlan history
     - GET /api/v2/testPlans/{id}/history
     -  Use case   User sets test plan identifier   User runs method execution   System return test plan history
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - returns: RequestBuilder<[TestPlanChangeModel]> 
     */
    internal class func apiV2TestPlansIdHistoryGetWithRequestBuilder(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil) -> RequestBuilder<[TestPlanChangeModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/history"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestPlanChangeModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Links of TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdLinksGet(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestPlanLink]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdLinksGetWithRequestBuilder(id: id, skip: skip, take: take, orderBy: orderBy).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Links of TestPlan
     - GET /api/v2/testPlans/{id}/links
     -  Use case   User sets test plan identifier   User sets pagination filter (listed in request example)   User runs method execution   System returns links of TestPlan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - returns: RequestBuilder<[TestPlanLink]> 
     */
    internal class func apiV2TestPlansIdLinksGetWithRequestBuilder(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil) -> RequestBuilder<[TestPlanLink]> {
        var localVariablePath = "/api/v2/testPlans/{id}/links"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestPlanLink]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch test plan
     
     - parameter id: (path) Unique ID of the test plan 
     - parameter operation: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdPatch(id: UUID, operation: [Operation]? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdPatchWithRequestBuilder(id: id, operation: operation).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch test plan
     - PATCH /api/v2/testPlans/{id}
     - See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Unique ID of the test plan 
     - parameter operation: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdPatchWithRequestBuilder(id: UUID, operation: [Operation]? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: operation)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestPoints with last result from TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter testerId: (query)  (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestPointsLastResultsGet(id: String, testerId: UUID? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestPointWithLastResultModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestPointsLastResultsGetWithRequestBuilder(id: id, testerId: testerId, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestPoints with last result from TestPlan
     - GET /api/v2/testPlans/{id}/testPoints/lastResults
     -  Use case   User sets test plan identifier   User sets filter (listed in request example)   User runs method execution   System return test points with last result from test plan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter testerId: (query)  (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - returns: RequestBuilder<[TestPointWithLastResultModel]> 
     */
    internal class func apiV2TestPlansIdTestPointsLastResultsGetWithRequestBuilder(id: String, testerId: UUID? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil) -> RequestBuilder<[TestPointWithLastResultModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testPoints/lastResults"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "testerId": (wrappedValue: testerId?.encodeToJSON(), isExplode: true),
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestPointWithLastResultModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset TestPoints status of TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter requestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestPointsResetPost(id: String, requestBody: Set<UUID>? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestPointsResetPostWithRequestBuilder(id: id, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reset TestPoints status of TestPlan
     - POST /api/v2/testPlans/{id}/testPoints/reset
     -  Use case   User sets test plan identifier   User sets test points identifiers   User runs method execution   System reset test points statuses of test plan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter requestBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdTestPointsResetPostWithRequestBuilder(id: String, requestBody: Set<UUID>? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/testPoints/reset"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unassign users from multiple test points
     
     - parameter id: (path) Unique or global ID of the test plan 
     - parameter testPointSelectModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestPointsTesterDelete(id: String, testPointSelectModel: TestPointSelectModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UUID]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestPointsTesterDeleteWithRequestBuilder(id: id, testPointSelectModel: testPointSelectModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unassign users from multiple test points
     - DELETE /api/v2/testPlans/{id}/testPoints/tester
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Unique or global ID of the test plan 
     - parameter testPointSelectModel: (body)  (optional)
     - returns: RequestBuilder<[UUID]> 
     */
    internal class func apiV2TestPlansIdTestPointsTesterDeleteWithRequestBuilder(id: String, testPointSelectModel: TestPointSelectModel? = nil) -> RequestBuilder<[UUID]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testPoints/tester"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPointSelectModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UUID]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Assign user as a tester to multiple test points
     
     - parameter id: (path) Unique or global ID of the test plan 
     - parameter userId: (path) Unique ID of the user 
     - parameter testPointSelectModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestPointsTesterUserIdPost(id: String, userId: UUID, testPointSelectModel: TestPointSelectModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UUID]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestPointsTesterUserIdPostWithRequestBuilder(id: id, userId: userId, testPointSelectModel: testPointSelectModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Assign user as a tester to multiple test points
     - POST /api/v2/testPlans/{id}/testPoints/tester/{userId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Unique or global ID of the test plan 
     - parameter userId: (path) Unique ID of the user 
     - parameter testPointSelectModel: (body)  (optional)
     - returns: RequestBuilder<[UUID]> 
     */
    internal class func apiV2TestPlansIdTestPointsTesterUserIdPostWithRequestBuilder(id: String, userId: UUID, testPointSelectModel: TestPointSelectModel? = nil) -> RequestBuilder<[UUID]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testPoints/tester/{userId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPointSelectModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UUID]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestRuns of TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter notStarted: (query)  (optional)
     - parameter inProgress: (query)  (optional)
     - parameter stopped: (query)  (optional)
     - parameter completed: (query)  (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestRunsGet(id: String, notStarted: Bool? = nil, inProgress: Bool? = nil, stopped: Bool? = nil, completed: Bool? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestRunModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestRunsGetWithRequestBuilder(id: id, notStarted: notStarted, inProgress: inProgress, stopped: stopped, completed: completed, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestRuns of TestPlan
     - GET /api/v2/testPlans/{id}/testRuns
     -  Use case   User sets test plan identifier   User sets TestRun status filter (listed in request example)   User runs method execution   System returns TestRuns for TestPlan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter notStarted: (query)  (optional)
     - parameter inProgress: (query)  (optional)
     - parameter stopped: (query)  (optional)
     - parameter completed: (query)  (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - returns: RequestBuilder<[TestRunModel]> 
     */
    internal class func apiV2TestPlansIdTestRunsGetWithRequestBuilder(id: String, notStarted: Bool? = nil, inProgress: Bool? = nil, stopped: Bool? = nil, completed: Bool? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil) -> RequestBuilder<[TestRunModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testRuns"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "notStarted": (wrappedValue: notStarted?.encodeToJSON(), isExplode: true),
            "inProgress": (wrappedValue: inProgress?.encodeToJSON(), isExplode: true),
            "stopped": (wrappedValue: stopped?.encodeToJSON(), isExplode: true),
            "completed": (wrappedValue: completed?.encodeToJSON(), isExplode: true),
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestRunModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search TestRuns of TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter testRunSearchQueryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestRunsSearchPost(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, testRunSearchQueryModel: TestRunSearchQueryModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestRunModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestRunsSearchPostWithRequestBuilder(id: id, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue, testRunSearchQueryModel: testRunSearchQueryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search TestRuns of TestPlan
     - POST /api/v2/testPlans/{id}/testRuns/search
     -  Use case   User sets test plan identifier   User sets TestRuns filter (listed in request example)   User runs method execution   System returns TestRuns for TestPlan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter testRunSearchQueryModel: (body)  (optional)
     - returns: RequestBuilder<[TestRunModel]> 
     */
    internal class func apiV2TestPlansIdTestRunsSearchPostWithRequestBuilder(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, testRunSearchQueryModel: TestRunSearchQueryModel? = nil) -> RequestBuilder<[TestRunModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testRuns/search"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testRunSearchQueryModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestRunModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get last modification date of test plan's test results
     
     - parameter id: (path) Test plan unique or global ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get last modification date of test plan's test results
     - GET /api/v2/testPlans/{id}/testRuns/testResults/lastModified/modifiedDate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan unique or global ID 
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGetWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/testRuns/testResults/lastModified/modifiedDate"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Send unlock TestPlan notification
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansIdUnlockRequestPost(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansIdUnlockRequestPostWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send unlock TestPlan notification
     - POST /api/v2/testPlans/{id}/unlock/request
     -  Use case   User sets test plan identifier   User runs method execution   System send unlock test plan notification
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func apiV2TestPlansIdUnlockRequestPostWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/unlock/request"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestPlans short models by Project identifiers
     
     - parameter isDeleted: (query)  (optional)
     - parameter requestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func apiV2TestPlansShortsPost(isDeleted: Bool? = nil, requestBody: Set<UUID>? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestPlanShortModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2TestPlansShortsPostWithRequestBuilder(isDeleted: isDeleted, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestPlans short models by Project identifiers
     - POST /api/v2/testPlans/shorts
     -  Use case   User sets projects identifiers   User runs method execution   System return test plans short models (listed in response example)
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter isDeleted: (query)  (optional)
     - parameter requestBody: (body)  (optional)
     - returns: RequestBuilder<[TestPlanShortModel]> 
     */
    internal class func apiV2TestPlansShortsPostWithRequestBuilder(isDeleted: Bool? = nil, requestBody: Set<UUID>? = nil) -> RequestBuilder<[TestPlanShortModel]> {
        let localVariablePath = "/api/v2/testPlans/shorts"
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isDeleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestPlanShortModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Clone TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func clone(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestPlanModel?, _ error: Error?) -> Void)) -> RequestTask {
        return cloneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Clone TestPlan
     - POST /api/v2/testPlans/{id}/clone
     -  Use case   User sets test plan identifier   User runs method execution   System clones test plan   System returns test plan (listed in response example)
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<TestPlanModel> 
     */
    internal class func cloneWithRequestBuilder(id: String) -> RequestBuilder<TestPlanModel> {
        var localVariablePath = "/api/v2/testPlans/{id}/clone"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestPlanModel>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Complete TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func complete(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return completeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Complete TestPlan
     - POST /api/v2/testPlans/{id}/complete
     -  Use case   User sets test plan identifier   User runs method execution   System completes the test plan and updates test plan status   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func completeWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/complete"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create TestPlan
     
     - parameter testPlanPostModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func createTestPlan(testPlanPostModel: TestPlanPostModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestPlanModel?, _ error: Error?) -> Void)) -> RequestTask {
        return createTestPlanWithRequestBuilder(testPlanPostModel: testPlanPostModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create TestPlan
     - POST /api/v2/testPlans
     -  Use case   User sets test plan properties (listed in request example)   User runs method execution   System creates test plan   System returns test plan (listed in response example)
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter testPlanPostModel: (body)  (optional)
     - returns: RequestBuilder<TestPlanModel> 
     */
    internal class func createTestPlanWithRequestBuilder(testPlanPostModel: TestPlanPostModel? = nil) -> RequestBuilder<TestPlanModel> {
        let localVariablePath = "/api/v2/testPlans"
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPlanPostModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestPlanModel>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func deleteTestPlan(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTestPlanWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete TestPlan
     - DELETE /api/v2/testPlans/{id}
     -  Use case   User sets test plan identifier   User runs method execution   System delete test plan   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func deleteTestPlanWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestPlan by Id
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func getTestPlanById(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: TestPlanModel?, _ error: Error?) -> Void)) -> RequestTask {
        return getTestPlanByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestPlan by Id
     - GET /api/v2/testPlans/{id}
     -  Use case   User sets test plan identifier   User runs method execution   System search  test plan by the identifier   System returns test plan
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<TestPlanModel> 
     */
    internal class func getTestPlanByIdWithRequestBuilder(id: String) -> RequestBuilder<TestPlanModel> {
        var localVariablePath = "/api/v2/testPlans/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestPlanModel>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get TestSuites Tree By Id
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func getTestSuitesById(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestSuiteV2TreeModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTestSuitesByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get TestSuites Tree By Id
     - GET /api/v2/testPlans/{id}/testSuites
     -  Use case   User sets test plan identifier   User runs method execution   System finds test suites related to the test plan   System returns test suites as a tree model (listed in response example)
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<[TestSuiteV2TreeModel]> 
     */
    internal class func getTestSuitesByIdWithRequestBuilder(id: String) -> RequestBuilder<[TestSuiteV2TreeModel]> {
        var localVariablePath = "/api/v2/testPlans/{id}/testSuites"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestSuiteV2TreeModel]>.Type = ruTestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Pause TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func pause(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return pauseWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pause TestPlan
     - POST /api/v2/testPlans/{id}/pause
     -  Use case   User sets test plan identifier   User runs method execution   System pauses the test plan and updates test plan status   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func pauseWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/pause"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Permanently delete test plan from archive
     
     - parameter id: (path) Unique or global ID of the test plan 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func purgeTestPlan(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return purgeTestPlanWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Permanently delete test plan from archive
     - POST /api/v2/testPlans/{id}/purge
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Unique or global ID of the test plan 
     - returns: RequestBuilder<Void> 
     */
    internal class func purgeTestPlanWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/purge"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Restore TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func restoreTestPlan(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return restoreTestPlanWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Restore TestPlan
     - POST /api/v2/testPlans/{id}/restore
     -  Use case   User sets test plan identifier   User runs method execution   System restores test plan   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func restoreTestPlanWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/restore"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Start TestPlan
     
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func start(id: String, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return startWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Start TestPlan
     - POST /api/v2/testPlans/{id}/start
     -  Use case   User sets test plan identifier   User runs method execution   System starts the test plan and updates test plan status   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Test plan internal (guid format) or global (int  format) identifier 
     - returns: RequestBuilder<Void> 
     */
    internal class func startWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/testPlans/{id}/start"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update TestPlan
     
     - parameter testPlanPutModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    internal class func updateTestPlan(testPlanPutModel: TestPlanPutModel? = nil, apiResponseQueue: DispatchQueue = ruTestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateTestPlanWithRequestBuilder(testPlanPutModel: testPlanPutModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update TestPlan
     - PUT /api/v2/testPlans
     -  Use case   User sets test plan properties(listed in request example)   User runs method execution   System updates test plan   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter testPlanPutModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func updateTestPlanWithRequestBuilder(testPlanPutModel: TestPlanPutModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v2/testPlans"
        let localVariableURLString = ruTestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPlanPutModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ruTestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
