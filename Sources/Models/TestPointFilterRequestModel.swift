//
// TestPointFilterRequestModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPointFilterRequestModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    /** Specifies a test point test plan IDS to search for */
    public var testPlanIds: [UUID]?
    /** Specifies a test point test suite IDs to search for */
    public var testSuiteIds: [UUID]?
    /** Specifies a test point work item global IDs to search for */
    public var workItemGlobalIds: [Int64]?
    /** Specifies a test point work item median duration range to search for */
    public var workItemMedianDuration: Int64RangeSelectorModel?
    /** Specifies a test point work item is deleted flag to search for */
    public var workItemIsDeleted: Bool?
    /** Specifies a test point statuses to search for */
    @available(*, deprecated, message: "This property is deprecated.")
    public var statuses: [TestPointStatus]?
    /** Specifies a test point status codes to search for */
    public var statusCodes: [String]?
    /** Specifies a test point priorities to search for */
    public var priorities: [WorkItemPriorityModel]?
    /** Specifies a test point automation status to search for */
    public var isAutomated: Bool?
    /** Specifies a test point name to search for */
    public var name: String?
    /** Specifies a test point configuration IDs to search for */
    public var configurationIds: [UUID]?
    /** Specifies a test point assigned user IDs to search for */
    public var testerIds: [UUID]?
    /** Specifies a test point range of duration to search for */
    public var duration: Int64RangeSelectorModel?
    /** Specifies a test point work item section IDs to search for */
    public var sectionIds: [UUID]?
    /** Specifies a test point range of creation date to search for */
    public var createdDate: DateTimeRangeSelectorModel?
    /** Specifies a test point creator IDs to search for */
    public var createdByIds: [UUID]?
    /** Specifies a test point range of last modification date to search for */
    public var modifiedDate: DateTimeRangeSelectorModel?
    /** Specifies a test point last editor IDs to search for */
    public var modifiedByIds: [UUID]?
    /** Specifies a test point tags to search for */
    public var tags: [String]?
    /** Specifies a test point attributes to search for */
    public var attributes: [String: Set<String>]?
    /** Specifies a work item range of creation date to search for */
    public var workItemCreatedDate: DateTimeRangeSelectorModel?
    /** Specifies a work item creator IDs to search for */
    public var workItemCreatedByIds: [UUID]?
    /** Specifies a work item range of last modification date to search for */
    public var workItemModifiedDate: DateTimeRangeSelectorModel?
    /** Specifies a work item last editor IDs to search for */
    public var workItemModifiedByIds: [UUID]?

    public init(testPlanIds: [UUID]? = nil, testSuiteIds: [UUID]? = nil, workItemGlobalIds: [Int64]? = nil, workItemMedianDuration: Int64RangeSelectorModel? = nil, workItemIsDeleted: Bool? = nil, statuses: [TestPointStatus]? = nil, statusCodes: [String]? = nil, priorities: [WorkItemPriorityModel]? = nil, isAutomated: Bool? = nil, name: String? = nil, configurationIds: [UUID]? = nil, testerIds: [UUID]? = nil, duration: Int64RangeSelectorModel? = nil, sectionIds: [UUID]? = nil, createdDate: DateTimeRangeSelectorModel? = nil, createdByIds: [UUID]? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, modifiedByIds: [UUID]? = nil, tags: [String]? = nil, attributes: [String: Set<String>]? = nil, workItemCreatedDate: DateTimeRangeSelectorModel? = nil, workItemCreatedByIds: [UUID]? = nil, workItemModifiedDate: DateTimeRangeSelectorModel? = nil, workItemModifiedByIds: [UUID]? = nil) {
        self.testPlanIds = testPlanIds
        self.testSuiteIds = testSuiteIds
        self.workItemGlobalIds = workItemGlobalIds
        self.workItemMedianDuration = workItemMedianDuration
        self.workItemIsDeleted = workItemIsDeleted
        self.statuses = statuses
        self.statusCodes = statusCodes
        self.priorities = priorities
        self.isAutomated = isAutomated
        self.name = name
        self.configurationIds = configurationIds
        self.testerIds = testerIds
        self.duration = duration
        self.sectionIds = sectionIds
        self.createdDate = createdDate
        self.createdByIds = createdByIds
        self.modifiedDate = modifiedDate
        self.modifiedByIds = modifiedByIds
        self.tags = tags
        self.attributes = attributes
        self.workItemCreatedDate = workItemCreatedDate
        self.workItemCreatedByIds = workItemCreatedByIds
        self.workItemModifiedDate = workItemModifiedDate
        self.workItemModifiedByIds = workItemModifiedByIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case testPlanIds
        case testSuiteIds
        case workItemGlobalIds
        case workItemMedianDuration
        case workItemIsDeleted
        case statuses
        case statusCodes
        case priorities
        case isAutomated
        case name
        case configurationIds
        case testerIds
        case duration
        case sectionIds
        case createdDate
        case createdByIds
        case modifiedDate
        case modifiedByIds
        case tags
        case attributes
        case workItemCreatedDate
        case workItemCreatedByIds
        case workItemModifiedDate
        case workItemModifiedByIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(testPlanIds, forKey: .testPlanIds)
        try container.encodeIfPresent(testSuiteIds, forKey: .testSuiteIds)
        try container.encodeIfPresent(workItemGlobalIds, forKey: .workItemGlobalIds)
        try container.encodeIfPresent(workItemMedianDuration, forKey: .workItemMedianDuration)
        try container.encodeIfPresent(workItemIsDeleted, forKey: .workItemIsDeleted)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(statusCodes, forKey: .statusCodes)
        try container.encodeIfPresent(priorities, forKey: .priorities)
        try container.encodeIfPresent(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(configurationIds, forKey: .configurationIds)
        try container.encodeIfPresent(testerIds, forKey: .testerIds)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(sectionIds, forKey: .sectionIds)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(workItemCreatedDate, forKey: .workItemCreatedDate)
        try container.encodeIfPresent(workItemCreatedByIds, forKey: .workItemCreatedByIds)
        try container.encodeIfPresent(workItemModifiedDate, forKey: .workItemModifiedDate)
        try container.encodeIfPresent(workItemModifiedByIds, forKey: .workItemModifiedByIds)
    }
}

