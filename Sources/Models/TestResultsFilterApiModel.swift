//
// TestResultsFilterApiModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultsFilterApiModel: Codable, JSONEncodable, Hashable {

    public static let namespaceRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let classNameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    /** Specifies a test result configuration IDs to search for */
    public var configurationIds: [UUID]?
    /** Specifies a test result outcomes to search for */
    @available(*, deprecated, message: "This property is deprecated.")
    public var outcomes: [TestResultOutcome]?
    /** Specifies a test result status codes to search for */
    public var statusCodes: [String]?
    /** Specifies a test result failure categories to search for */
    public var failureCategories: [FailureCategoryModel]?
    /** Specifies a test result namespace to search for */
    public var namespace: String?
    /** Specifies a test result class name to search for */
    public var className: String?
    /** Specifies an autotest global IDs to search results for */
    public var autoTestGlobalIds: [Int64]?
    /** Specifies an autotest name to search results for */
    public var name: String?
    /** Specifies a test result creation date and time range to search for */
    public var createdDate: DateTimeRangeSelectorModel?
    /** Specifies a test result modified date and time range to search for */
    public var modifiedDate: DateTimeRangeSelectorModel?
    /** Specifies a test result started on date and time range to search for */
    public var startedOn: DateTimeRangeSelectorModel?
    /** Specifies a test result completed on date and time range to search for */
    public var completedOn: DateTimeRangeSelectorModel?
    /** Specifies a test result duration range to search for */
    public var duration: Int64RangeSelectorModel?
    /** Specifies result reasons for searching test results */
    public var resultReasons: [String]?
    /** Specifies a test result test run IDs to search for */
    public var testRunIds: [UUID]?

    public init(configurationIds: [UUID]? = nil, outcomes: [TestResultOutcome]? = nil, statusCodes: [String]? = nil, failureCategories: [FailureCategoryModel]? = nil, namespace: String? = nil, className: String? = nil, autoTestGlobalIds: [Int64]? = nil, name: String? = nil, createdDate: DateTimeRangeSelectorModel? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, startedOn: DateTimeRangeSelectorModel? = nil, completedOn: DateTimeRangeSelectorModel? = nil, duration: Int64RangeSelectorModel? = nil, resultReasons: [String]? = nil, testRunIds: [UUID]? = nil) {
        self.configurationIds = configurationIds
        self.outcomes = outcomes
        self.statusCodes = statusCodes
        self.failureCategories = failureCategories
        self.namespace = namespace
        self.className = className
        self.autoTestGlobalIds = autoTestGlobalIds
        self.name = name
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.duration = duration
        self.resultReasons = resultReasons
        self.testRunIds = testRunIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case configurationIds
        case outcomes
        case statusCodes
        case failureCategories
        case namespace
        case className
        case autoTestGlobalIds
        case name
        case createdDate
        case modifiedDate
        case startedOn
        case completedOn
        case duration
        case resultReasons
        case testRunIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(configurationIds, forKey: .configurationIds)
        try container.encodeIfPresent(outcomes, forKey: .outcomes)
        try container.encodeIfPresent(statusCodes, forKey: .statusCodes)
        try container.encodeIfPresent(failureCategories, forKey: .failureCategories)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(autoTestGlobalIds, forKey: .autoTestGlobalIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(resultReasons, forKey: .resultReasons)
        try container.encodeIfPresent(testRunIds, forKey: .testRunIds)
    }
}

