//
// TestResultsLocalFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestResultsLocalFilterModel: Codable, JSONEncodable, Hashable {

    static let namespaceRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let classNameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    /** Specifies a test result configuration IDs to search for */
    internal var configurationIds: [UUID]?
    /** Specifies a test result outcomes to search for */
    internal var outcomes: [TestResultOutcome]?
    /** Specifies a test result failure categories to search for */
    internal var failureCategories: [FailureCategoryModel]?
    /** Specifies a test result namespace to search for */
    internal var namespace: String?
    /** Specifies a test result class name to search for */
    internal var className: String?

    internal init(configurationIds: [UUID]? = nil, outcomes: [TestResultOutcome]? = nil, failureCategories: [FailureCategoryModel]? = nil, namespace: String? = nil, className: String? = nil) {
        self.configurationIds = configurationIds
        self.outcomes = outcomes
        self.failureCategories = failureCategories
        self.namespace = namespace
        self.className = className
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case configurationIds
        case outcomes
        case failureCategories
        case namespace
        case className
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(configurationIds, forKey: .configurationIds)
        try container.encodeIfPresent(outcomes, forKey: .outcomes)
        try container.encodeIfPresent(failureCategories, forKey: .failureCategories)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(className, forKey: .className)
    }
}

