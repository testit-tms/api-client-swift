//
// AutoTestsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AutoTestsAPI {

    /**
     Set \"Flaky\" status for multiple autotests
     
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter flakyBulkModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsFlakyBulkPost(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, flakyBulkModel: FlakyBulkModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsFlakyBulkPostWithRequestBuilder(skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue, flakyBulkModel: flakyBulkModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set \"Flaky\" status for multiple autotests
     - POST /api/v2/autoTests/flaky/bulk
     - User permissions for project:  - Read only  - Execute  - Write  - Full control
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter flakyBulkModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2AutoTestsFlakyBulkPostWithRequestBuilder(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, flakyBulkModel: FlakyBulkModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v2/autoTests/flaky/bulk"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flakyBulkModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch auto test
     
     - parameter id: (path) Global Id of auto test 
     - parameter operation: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsIdPatch(id: UUID, operation: [Operation]? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsIdPatchWithRequestBuilder(id: id, operation: operation).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch auto test
     - PATCH /api/v2/autoTests/{id}
     - See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Global Id of auto test 
     - parameter operation: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2AutoTestsIdPatchWithRequestBuilder(id: UUID, operation: [Operation]? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/autoTests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: operation)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get test results history for autotest
     
     - parameter id: (path) Autotest identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter autotestHistoricalResultSelectModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsIdTestResultsSearchPost(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, autotestHistoricalResultSelectModel: AutotestHistoricalResultSelectModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AutotestResultHistoricalGetModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsIdTestResultsSearchPostWithRequestBuilder(id: id, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue, autotestHistoricalResultSelectModel: autotestHistoricalResultSelectModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get test results history for autotest
     - POST /api/v2/autoTests/{id}/testResults/search
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   User sets getTestResultHistoryReportQuery (listed in the example)   User runs method execution   System search for test results using filters set by user in getTestResultHistoryReportQuery and id   System returns the enumeration of test results
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path) Autotest identifier 
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter autotestHistoricalResultSelectModel: (body)  (optional)
     - returns: RequestBuilder<[AutotestResultHistoricalGetModel]> 
     */
    open class func apiV2AutoTestsIdTestResultsSearchPostWithRequestBuilder(id: String, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, autotestHistoricalResultSelectModel: AutotestHistoricalResultSelectModel? = nil) -> RequestBuilder<[AutotestResultHistoricalGetModel]> {
        var localVariablePath = "/api/v2/autoTests/{id}/testResults/search"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autotestHistoricalResultSelectModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AutotestResultHistoricalGetModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get identifiers of changed linked work items
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsIdWorkItemsChangedIdGet(id: UUID, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UUID]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsIdWorkItemsChangedIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get identifiers of changed linked work items
     - GET /api/v2/autoTests/{id}/workItems/changed/id
     - User permissions for project:  - Read only  - Execute  - Write  - Full control
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path)  
     - returns: RequestBuilder<[UUID]> 
     */
    open class func apiV2AutoTestsIdWorkItemsChangedIdGetWithRequestBuilder(id: UUID) -> RequestBuilder<[UUID]> {
        var localVariablePath = "/api/v2/autoTests/{id}/workItems/changed/id"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UUID]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Approve changes to work items linked to autotest
     
     - parameter id: (path)  
     - parameter workItemId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost(id: UUID, workItemId: UUID, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePostWithRequestBuilder(id: id, workItemId: workItemId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Approve changes to work items linked to autotest
     - POST /api/v2/autoTests/{id}/workItems/changed/{workItemId}/approve
     - User permissions for project:  - Read only  - Execute  - Write  - Full control
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path)  
     - parameter workItemId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePostWithRequestBuilder(id: UUID, workItemId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/autoTests/{id}/workItems/changed/{workItemId}/approve"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let workItemIdPreEscape = "\(APIHelper.mapValueToPathItem(workItemId))"
        let workItemIdPostEscape = workItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workItemId}", with: workItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search for autotests
     
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter autotestsSelectModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2AutoTestsSearchPost(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, autotestsSelectModel: AutotestsSelectModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AutoTestModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2AutoTestsSearchPostWithRequestBuilder(skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue, autotestsSelectModel: autotestsSelectModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for autotests
     - POST /api/v2/autoTests/search
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter autotestsSelectModel: (body)  (optional)
     - returns: RequestBuilder<[AutoTestModel]> 
     */
    open class func apiV2AutoTestsSearchPostWithRequestBuilder(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, autotestsSelectModel: AutotestsSelectModel? = nil) -> RequestBuilder<[AutoTestModel]> {
        let localVariablePath = "/api/v2/autoTests/search"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autotestsSelectModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AutoTestModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create autotest
     
     - parameter autoTestPostModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAutoTest(autoTestPostModel: AutoTestPostModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: AutoTestModel?, _ error: Error?) -> Void)) -> RequestTask {
        return createAutoTestWithRequestBuilder(autoTestPostModel: autoTestPostModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create autotest
     - POST /api/v2/autoTests
     -  This method creates a new autotest.   To add an autotest to the test plan, link it to a work item using the `POST /api/v2/autoTests/{autoTestId}/workItems` method.   Use the `POST /api/v2/testRuns/byAutoTests` method to run autotest outside the test plan.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter autoTestPostModel: (body)  (optional)
     - returns: RequestBuilder<AutoTestModel> 
     */
    open class func createAutoTestWithRequestBuilder(autoTestPostModel: AutoTestPostModel? = nil) -> RequestBuilder<AutoTestModel> {
        let localVariablePath = "/api/v2/autoTests"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoTestPostModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutoTestModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create multiple autotests
     
     - parameter autoTestPostModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createMultiple(autoTestPostModel: [AutoTestPostModel]? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AutoTestModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return createMultipleWithRequestBuilder(autoTestPostModel: autoTestPostModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create multiple autotests
     - POST /api/v2/autoTests/bulk
     -  Use case   User sets autotest parameters (listed in the example) and runs method execution   System creates autotest   [Optional] If steps enumeration is set, system creates step items and relates them to autotest   [Optional] If setup enumeration is set, system creates setup items and relates them to autotest   [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest   [Optional] If label enumeration is set, system creates labels and relates them to autotest   [Optional] If link enumeration is set, system creates links and relates them to autotest   System returns autotest model (example listed in response parameters)
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter autoTestPostModel: (body)  (optional)
     - returns: RequestBuilder<[AutoTestModel]> 
     */
    open class func createMultipleWithRequestBuilder(autoTestPostModel: [AutoTestPostModel]? = nil) -> RequestBuilder<[AutoTestModel]> {
        let localVariablePath = "/api/v2/autoTests/bulk"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoTestPostModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AutoTestModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete autotest
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAutoTest(id: String, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAutoTestWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete autotest
     - DELETE /api/v2/autoTests/{id}
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier and runs method execution   System finds the autotest by the identifier   System deletes autotest and returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAutoTestWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/autoTests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unlink autotest from work item
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter workItemId: (query) Work item internal (UUID) or global (integer) identifier (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAutoTestLinkFromWorkItem(id: String, workItemId: String? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAutoTestLinkFromWorkItemWithRequestBuilder(id: id, workItemId: workItemId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unlink autotest from work item
     - DELETE /api/v2/autoTests/{id}/workItems
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   [Optional] User sets workitem internal (guid format) or global (integer format) identifier   User runs method execution   System finds the autotest by the autotest identifier                 [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it              from autotest.                 [Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.   System returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter workItemId: (query) Work item internal (UUID) or global (integer) identifier (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAutoTestLinkFromWorkItemWithRequestBuilder(id: String, workItemId: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/autoTests/{id}/workItems"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "workItemId": (wrappedValue: workItemId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter projectId: (query) Project internal ID (optional)
     - parameter externalId: (query) Autotest external ID (optional)
     - parameter globalId: (query) Autotest global ID (optional)
     - parameter namespace: (query) Namespace in which autotest is located (optional)
     - parameter isNamespaceNull: (query) OBSOLETE: Use &#x60;includeEmptyNamespaces&#x60; instead (optional)
     - parameter includeEmptyNamespaces: (query) If result must contain autotests without namespace (optional)
     - parameter className: (query) Name of class in which autotest is located (optional)
     - parameter isClassnameNull: (query) OBSOLETE: Use &#x60;includeEmptyClassNames&#x60; instead (optional)
     - parameter includeEmptyClassNames: (query) If result must contain autotests without class (optional)
     - parameter isDeleted: (query) OBSOLETE: Use &#x60;deleted&#x60; instead (optional)
     - parameter deleted: (query) Is autotest deleted (optional)
     - parameter labels: (query) Include only autotests with provided labels (optional)
     - parameter stabilityMinimal: (query) OBSOLETE: Use &#x60;minStability&#x60; instead (optional)
     - parameter minStability: (query) Minimum stability value of autotest (optional)
     - parameter stabilityMaximal: (query) OBSOLETE: Use &#x60;maxStability&#x60; instead (optional)
     - parameter maxStability: (query) Maximum stability value of autotest (optional)
     - parameter isFlaky: (query) OBSOLETE: Use &#x60;flaky&#x60; instead (optional)
     - parameter flaky: (query) Is autotest marked as \&quot;Flaky\&quot; (optional)
     - parameter includeSteps: (query) If result must also include autotest steps (optional)
     - parameter includeLabels: (query) If result must also include autotest labels (optional)
     - parameter externalKey: (query) External key of autotest (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func getAllAutoTests(projectId: UUID? = nil, externalId: String? = nil, globalId: Int64? = nil, namespace: String? = nil, isNamespaceNull: Bool? = nil, includeEmptyNamespaces: Bool? = nil, className: String? = nil, isClassnameNull: Bool? = nil, includeEmptyClassNames: Bool? = nil, isDeleted: Bool? = nil, deleted: Bool? = nil, labels: [String]? = nil, stabilityMinimal: Int? = nil, minStability: Int? = nil, stabilityMaximal: Int? = nil, maxStability: Int? = nil, isFlaky: Bool? = nil, flaky: Bool? = nil, includeSteps: Bool? = nil, includeLabels: Bool? = nil, externalKey: String? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AutoTestModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllAutoTestsWithRequestBuilder(projectId: projectId, externalId: externalId, globalId: globalId, namespace: namespace, isNamespaceNull: isNamespaceNull, includeEmptyNamespaces: includeEmptyNamespaces, className: className, isClassnameNull: isClassnameNull, includeEmptyClassNames: includeEmptyClassNames, isDeleted: isDeleted, deleted: deleted, labels: labels, stabilityMinimal: stabilityMinimal, minStability: minStability, stabilityMaximal: stabilityMaximal, maxStability: maxStability, isFlaky: isFlaky, flaky: flaky, includeSteps: includeSteps, includeLabels: includeLabels, externalKey: externalKey, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/autoTests
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter projectId: (query) Project internal ID (optional)
     - parameter externalId: (query) Autotest external ID (optional)
     - parameter globalId: (query) Autotest global ID (optional)
     - parameter namespace: (query) Namespace in which autotest is located (optional)
     - parameter isNamespaceNull: (query) OBSOLETE: Use &#x60;includeEmptyNamespaces&#x60; instead (optional)
     - parameter includeEmptyNamespaces: (query) If result must contain autotests without namespace (optional)
     - parameter className: (query) Name of class in which autotest is located (optional)
     - parameter isClassnameNull: (query) OBSOLETE: Use &#x60;includeEmptyClassNames&#x60; instead (optional)
     - parameter includeEmptyClassNames: (query) If result must contain autotests without class (optional)
     - parameter isDeleted: (query) OBSOLETE: Use &#x60;deleted&#x60; instead (optional)
     - parameter deleted: (query) Is autotest deleted (optional)
     - parameter labels: (query) Include only autotests with provided labels (optional)
     - parameter stabilityMinimal: (query) OBSOLETE: Use &#x60;minStability&#x60; instead (optional)
     - parameter minStability: (query) Minimum stability value of autotest (optional)
     - parameter stabilityMaximal: (query) OBSOLETE: Use &#x60;maxStability&#x60; instead (optional)
     - parameter maxStability: (query) Maximum stability value of autotest (optional)
     - parameter isFlaky: (query) OBSOLETE: Use &#x60;flaky&#x60; instead (optional)
     - parameter flaky: (query) Is autotest marked as \&quot;Flaky\&quot; (optional)
     - parameter includeSteps: (query) If result must also include autotest steps (optional)
     - parameter includeLabels: (query) If result must also include autotest labels (optional)
     - parameter externalKey: (query) External key of autotest (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - returns: RequestBuilder<[AutoTestModel]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getAllAutoTestsWithRequestBuilder(projectId: UUID? = nil, externalId: String? = nil, globalId: Int64? = nil, namespace: String? = nil, isNamespaceNull: Bool? = nil, includeEmptyNamespaces: Bool? = nil, className: String? = nil, isClassnameNull: Bool? = nil, includeEmptyClassNames: Bool? = nil, isDeleted: Bool? = nil, deleted: Bool? = nil, labels: [String]? = nil, stabilityMinimal: Int? = nil, minStability: Int? = nil, stabilityMaximal: Int? = nil, maxStability: Int? = nil, isFlaky: Bool? = nil, flaky: Bool? = nil, includeSteps: Bool? = nil, includeLabels: Bool? = nil, externalKey: String? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil) -> RequestBuilder<[AutoTestModel]> {
        let localVariablePath = "/api/v2/autoTests"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "projectId": (wrappedValue: projectId?.encodeToJSON(), isExplode: true),
            "externalId": (wrappedValue: externalId?.encodeToJSON(), isExplode: true),
            "globalId": (wrappedValue: globalId?.encodeToJSON(), isExplode: true),
            "namespace": (wrappedValue: namespace?.encodeToJSON(), isExplode: true),
            "isNamespaceNull": (wrappedValue: isNamespaceNull?.encodeToJSON(), isExplode: true),
            "includeEmptyNamespaces": (wrappedValue: includeEmptyNamespaces?.encodeToJSON(), isExplode: true),
            "className": (wrappedValue: className?.encodeToJSON(), isExplode: true),
            "isClassnameNull": (wrappedValue: isClassnameNull?.encodeToJSON(), isExplode: true),
            "includeEmptyClassNames": (wrappedValue: includeEmptyClassNames?.encodeToJSON(), isExplode: true),
            "isDeleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
            "deleted": (wrappedValue: deleted?.encodeToJSON(), isExplode: true),
            "labels": (wrappedValue: labels?.encodeToJSON(), isExplode: true),
            "stabilityMinimal": (wrappedValue: stabilityMinimal?.encodeToJSON(), isExplode: true),
            "minStability": (wrappedValue: minStability?.encodeToJSON(), isExplode: true),
            "stabilityMaximal": (wrappedValue: stabilityMaximal?.encodeToJSON(), isExplode: true),
            "maxStability": (wrappedValue: maxStability?.encodeToJSON(), isExplode: true),
            "isFlaky": (wrappedValue: isFlaky?.encodeToJSON(), isExplode: true),
            "flaky": (wrappedValue: flaky?.encodeToJSON(), isExplode: true),
            "includeSteps": (wrappedValue: includeSteps?.encodeToJSON(), isExplode: true),
            "includeLabels": (wrappedValue: includeLabels?.encodeToJSON(), isExplode: true),
            "externalKey": (wrappedValue: externalKey?.encodeToJSON(), isExplode: true),
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AutoTestModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get average autotest duration
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAutoTestAverageDuration(id: String, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: AutoTestAverageDurationModel?, _ error: Error?) -> Void)) -> RequestTask {
        return getAutoTestAverageDurationWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get average autotest duration
     - GET /api/v2/autoTests/{id}/averageDuration
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   User runs method execution   System calculates pass average duration and fail average duration of autotest from all related test results   System returns pass average duration and fail average duration for autotest
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - returns: RequestBuilder<AutoTestAverageDurationModel> 
     */
    open class func getAutoTestAverageDurationWithRequestBuilder(id: String) -> RequestBuilder<AutoTestAverageDurationModel> {
        var localVariablePath = "/api/v2/autoTests/{id}/averageDuration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutoTestAverageDurationModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get autotest by internal or global ID
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAutoTestById(id: String, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: AutoTestModel?, _ error: Error?) -> Void)) -> RequestTask {
        return getAutoTestByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get autotest by internal or global ID
     - GET /api/v2/autoTests/{id}
     -  Use case   User sets autotest internal or global identifier and runs method execution   System returns autotest, which internal or global identifier equals the identifier value set in the previous action
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - returns: RequestBuilder<AutoTestModel> 
     */
    open class func getAutoTestByIdWithRequestBuilder(id: String) -> RequestBuilder<AutoTestModel> {
        var localVariablePath = "/api/v2/autoTests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutoTestModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get autotest chronology
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAutoTestChronology(id: String, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestResultChronologyModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAutoTestChronologyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get autotest chronology
     - GET /api/v2/autoTests/{id}/chronology
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   User runs method execution   System search all test results related to autotest (with default limit equal 100)   System orders the test results by CompletedOn property descending and then orders by CreatedDate property descending   System returns test result chronology for autotest
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - returns: RequestBuilder<[TestResultChronologyModel]> 
     */
    open class func getAutoTestChronologyWithRequestBuilder(id: String) -> RequestBuilder<[TestResultChronologyModel]> {
        var localVariablePath = "/api/v2/autoTests/{id}/chronology"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestResultChronologyModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get completed tests runs for autotests
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTestRuns(id: String, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestRunShortModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTestRunsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get completed tests runs for autotests
     - GET /api/v2/autoTests/{id}/testRuns
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   User runs method execution   System search for all test runs related to the autotest   System returns the enumeration of test runs
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - returns: RequestBuilder<[TestRunShortModel]> 
     */
    open class func getTestRunsWithRequestBuilder(id: String) -> RequestBuilder<[TestRunShortModel]> {
        var localVariablePath = "/api/v2/autoTests/{id}/testRuns"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestRunShortModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter from: (query) Take results from this date (optional)
     - parameter to: (query) Take results until this date (optional)
     - parameter configurationIds: (query) Identifiers of test result configurations (optional)
     - parameter testPlanIds: (query) Identifiers of test plans which contain test results (optional)
     - parameter userIds: (query) Identifiers of users who set test results (optional)
     - parameter outcomes: (query) List of outcomes of test results (optional)
     - parameter isAutomated: (query) OBSOLETE: Use &#x60;Automated&#x60; instead (optional)
     - parameter automated: (query) If result must consist of only manual/automated test results (optional)
     - parameter testRunIds: (query) Identifiers of test runs which contain test results (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func getWorkItemResults(id: String, from: Date? = nil, to: Date? = nil, configurationIds: [UUID]? = nil, testPlanIds: [UUID]? = nil, userIds: [UUID]? = nil, outcomes: [String]? = nil, isAutomated: Bool? = nil, automated: Bool? = nil, testRunIds: [UUID]? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TestResultHistoryReportModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkItemResultsWithRequestBuilder(id: id, from: from, to: to, configurationIds: configurationIds, testPlanIds: testPlanIds, userIds: userIds, outcomes: outcomes, isAutomated: isAutomated, automated: automated, testRunIds: testRunIds, skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/autoTests/{id}/testResultHistory
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter id: (path)  
     - parameter from: (query) Take results from this date (optional)
     - parameter to: (query) Take results until this date (optional)
     - parameter configurationIds: (query) Identifiers of test result configurations (optional)
     - parameter testPlanIds: (query) Identifiers of test plans which contain test results (optional)
     - parameter userIds: (query) Identifiers of users who set test results (optional)
     - parameter outcomes: (query) List of outcomes of test results (optional)
     - parameter isAutomated: (query) OBSOLETE: Use &#x60;Automated&#x60; instead (optional)
     - parameter automated: (query) If result must consist of only manual/automated test results (optional)
     - parameter testRunIds: (query) Identifiers of test runs which contain test results (optional)
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - returns: RequestBuilder<[TestResultHistoryReportModel]> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getWorkItemResultsWithRequestBuilder(id: String, from: Date? = nil, to: Date? = nil, configurationIds: [UUID]? = nil, testPlanIds: [UUID]? = nil, userIds: [UUID]? = nil, outcomes: [String]? = nil, isAutomated: Bool? = nil, automated: Bool? = nil, testRunIds: [UUID]? = nil, skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil) -> RequestBuilder<[TestResultHistoryReportModel]> {
        var localVariablePath = "/api/v2/autoTests/{id}/testResultHistory"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": (wrappedValue: from?.encodeToJSON(), isExplode: true),
            "to": (wrappedValue: to?.encodeToJSON(), isExplode: true),
            "configurationIds": (wrappedValue: configurationIds?.encodeToJSON(), isExplode: true),
            "testPlanIds": (wrappedValue: testPlanIds?.encodeToJSON(), isExplode: true),
            "userIds": (wrappedValue: userIds?.encodeToJSON(), isExplode: true),
            "outcomes": (wrappedValue: outcomes?.encodeToJSON(), isExplode: true),
            "isAutomated": (wrappedValue: isAutomated?.encodeToJSON(), isExplode: true),
            "automated": (wrappedValue: automated?.encodeToJSON(), isExplode: true),
            "testRunIds": (wrappedValue: testRunIds?.encodeToJSON(), isExplode: true),
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TestResultHistoryReportModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get work items linked to autotest
     
     - parameter id: (path) Specifies the autotest entity ID.   You can copy it from the address bar in your web browser or use autotest GUID. 
     - parameter isDeleted: (query) Specifies that a test is deleted or still relevant. (optional)
     - parameter isWorkItemDeleted: (query) OBSOLETE: Use &#x60;isDeleted&#x60; instead (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWorkItemsLinkedToAutoTest(id: String, isDeleted: Bool? = nil, isWorkItemDeleted: Bool? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [WorkItemIdentifierModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkItemsLinkedToAutoTestWithRequestBuilder(id: id, isDeleted: isDeleted, isWorkItemDeleted: isWorkItemDeleted).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get work items linked to autotest
     - GET /api/v2/autoTests/{id}/workItems
     -                This method links an autotest to a test case or a checklist.              A manual test case with a linked automated work item is marked in the test management system as an autotest.              You can run it from graphical user interface (GUI). To do that:                               1. Open the project in GUI.               2. Go to <b>Test plans</b> section and switch to the <b>Execution</b> tab.               3. Select the autotest(s) you want to run using checkboxes.               4. In the toolbar above the test list, click <b>Run autotests</b>.              
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Specifies the autotest entity ID.   You can copy it from the address bar in your web browser or use autotest GUID. 
     - parameter isDeleted: (query) Specifies that a test is deleted or still relevant. (optional)
     - parameter isWorkItemDeleted: (query) OBSOLETE: Use &#x60;isDeleted&#x60; instead (optional, default to false)
     - returns: RequestBuilder<[WorkItemIdentifierModel]> 
     */
    open class func getWorkItemsLinkedToAutoTestWithRequestBuilder(id: String, isDeleted: Bool? = nil, isWorkItemDeleted: Bool? = nil) -> RequestBuilder<[WorkItemIdentifierModel]> {
        var localVariablePath = "/api/v2/autoTests/{id}/workItems"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isDeleted": (wrappedValue: isDeleted?.encodeToJSON(), isExplode: true),
            "isWorkItemDeleted": (wrappedValue: isWorkItemDeleted?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WorkItemIdentifierModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Link autotest with work items
     
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter workItemIdModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func linkAutoTestToWorkItem(id: String, workItemIdModel: WorkItemIdModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return linkAutoTestToWorkItemWithRequestBuilder(id: id, workItemIdModel: workItemIdModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Link autotest with work items
     - POST /api/v2/autoTests/{id}/workItems
     -  Use case   User sets autotest internal (guid format) or global (integer format) identifier   User sets work item internal (guid format) or global (integer format) identifier   User runs method execution   System finds the autotest by the autotest identifier   System finds the work item by the work item identifier   System relates the work item with the autotest and returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Autotest internal (UUID) or global (integer) identifier 
     - parameter workItemIdModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func linkAutoTestToWorkItemWithRequestBuilder(id: String, workItemIdModel: WorkItemIdModel? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/autoTests/{id}/workItems"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workItemIdModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update autotest
     
     - parameter autoTestPutModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateAutoTest(autoTestPutModel: AutoTestPutModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateAutoTestWithRequestBuilder(autoTestPutModel: autoTestPutModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update autotest
     - PUT /api/v2/autoTests
     -  Use case   User sets autotest updated parameters values (listed in the example) and runs method execution   System finds the autotest by the identifier   System updates autotest parameters                  [Optional] If steps enumeration is set, system creates step items, relates them to autotest              and deletes relations with current steps( if exist)                               [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest              and deletes relations with current Setup items (if exist)                               [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest              and deletes relations with current teardown items (if exist)                               [Optional] If label enumeration is set, system creates labels and relates them to autotest              and deletes relations with current Labels (if exist)                               [Optional] If link enumeration is set, system creates links and relates them to autotest              and deletes relations with current Links (if exist)                 System updates autotest and returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter autoTestPutModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateAutoTestWithRequestBuilder(autoTestPutModel: AutoTestPutModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v2/autoTests"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoTestPutModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update multiple autotests
     
     - parameter autoTestPutModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMultiple(autoTestPutModel: [AutoTestPutModel]? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMultipleWithRequestBuilder(autoTestPutModel: autoTestPutModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update multiple autotests
     - PUT /api/v2/autoTests/bulk
     -  Use case   User sets autotest updated parameters values (listed in the example) and runs method execution   System finds the autotest by the identifier   System updates autotest parameters                  [Optional] If steps enumeration is set, system creates step items, relates them to autotest              and deletes relations with current steps( if exist)                               [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest              and deletes relations with current Setup items (if exist)                               [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest              and deletes relations with current teardown items (if exist)                               [Optional] If label enumeration is set, system creates labels and relates them to autotest              and deletes relations with current Labels (if exist)                               [Optional] If link enumeration is set, system creates links and relates them to autotest              and deletes relations with current Links (if exist)                 System updates autotest and returns no content response
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter autoTestPutModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateMultipleWithRequestBuilder(autoTestPutModel: [AutoTestPutModel]? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v2/autoTests/bulk"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoTestPutModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
