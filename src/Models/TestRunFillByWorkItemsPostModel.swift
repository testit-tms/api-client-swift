//
// TestRunFillByWorkItemsPostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestRunFillByWorkItemsPostModel: Codable, JSONEncodable, Hashable {

    /** Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs. */
    internal var configurationIds: [UUID]
    /** Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs. */
    internal var workItemIds: [UUID]
    /** Specifies the GUID of the project, in which a test run will be created. */
    internal var projectId: UUID
    /** Specifies the GUID of the test plan, within which the test run will be created. */
    internal var testPlanId: UUID
    /** Specifies the name of the test run. */
    internal var name: String?
    /** Specifies the test run description. */
    internal var description: String?
    /** Specifies the test run launch source. */
    internal var launchSource: String?
    /** Collection of attachment ids to relate to the test run */
    internal var attachments: [AttachmentPutModel]?
    /** Collection of links to relate to the test run */
    internal var links: [LinkPostModel]?

    internal init(configurationIds: [UUID], workItemIds: [UUID], projectId: UUID, testPlanId: UUID, name: String? = nil, description: String? = nil, launchSource: String? = nil, attachments: [AttachmentPutModel]? = nil, links: [LinkPostModel]? = nil) {
        self.configurationIds = configurationIds
        self.workItemIds = workItemIds
        self.projectId = projectId
        self.testPlanId = testPlanId
        self.name = name
        self.description = description
        self.launchSource = launchSource
        self.attachments = attachments
        self.links = links
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case configurationIds
        case workItemIds
        case projectId
        case testPlanId
        case name
        case description
        case launchSource
        case attachments
        case links
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(configurationIds, forKey: .configurationIds)
        try container.encode(workItemIds, forKey: .workItemIds)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

