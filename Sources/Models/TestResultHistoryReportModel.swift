//
// TestResultHistoryReportModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultHistoryReportModel: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var createdDate: Date
    public var modifiedDate: Date
    /** If test run was stopped, this property equals identifier of user who stopped it.Otherwise, the property equals identifier of user who created the test result */
    public var userId: UUID
    public var testRunId: UUID?
    public var testRunName: String?
    public var createdByUserName: String?
    public var testPlanId: UUID?
    public var testPlanGlobalId: Int64?
    public var testPlanName: String?
    /** If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name */
    public var configurationName: String?
    public var isAutomated: Bool
    /** If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equalsto the worst outcome of the last modified test result.Otherwise, the outcome equals to the outcome of first created test result in the test run */
    public var outcome: String?
    /** If any test result related to the test run is linked with autotest, comment will have default valueOtherwise, the comment equals to the comment of first created test result in the test run */
    public var comment: String?
    /** If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.Otherwise, the links equals to the links of first created test result in the test run */
    public var links: [LinkModel]?
    public var startedOn: Date?
    public var completedOn: Date?
    public var duration: Int64?
    public var createdById: UUID
    public var modifiedById: UUID?
    /** If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result.Otherwise, the attachments equals to the attachments of first created test result in the test run */
    public var attachments: [AttachmentModel]?
    public var workItemVersionId: UUID?
    public var workItemVersionNumber: Int?
    public var launchSource: String?
    public var failureClassIds: [UUID]
    public var parameters: [String: String]?

    public init(id: UUID, createdDate: Date, modifiedDate: Date, userId: UUID, testRunId: UUID? = nil, testRunName: String? = nil, createdByUserName: String? = nil, testPlanId: UUID? = nil, testPlanGlobalId: Int64? = nil, testPlanName: String? = nil, configurationName: String? = nil, isAutomated: Bool, outcome: String? = nil, comment: String? = nil, links: [LinkModel]? = nil, startedOn: Date? = nil, completedOn: Date? = nil, duration: Int64? = nil, createdById: UUID, modifiedById: UUID? = nil, attachments: [AttachmentModel]? = nil, workItemVersionId: UUID? = nil, workItemVersionNumber: Int? = nil, launchSource: String? = nil, failureClassIds: [UUID], parameters: [String: String]? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.userId = userId
        self.testRunId = testRunId
        self.testRunName = testRunName
        self.createdByUserName = createdByUserName
        self.testPlanId = testPlanId
        self.testPlanGlobalId = testPlanGlobalId
        self.testPlanName = testPlanName
        self.configurationName = configurationName
        self.isAutomated = isAutomated
        self.outcome = outcome
        self.comment = comment
        self.links = links
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.duration = duration
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.attachments = attachments
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.launchSource = launchSource
        self.failureClassIds = failureClassIds
        self.parameters = parameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case modifiedDate
        case userId
        case testRunId
        case testRunName
        case createdByUserName
        case testPlanId
        case testPlanGlobalId
        case testPlanName
        case configurationName
        case isAutomated
        case outcome
        case comment
        case links
        case startedOn
        case completedOn
        case duration
        case createdById
        case modifiedById
        case attachments
        case workItemVersionId
        case workItemVersionNumber
        case launchSource
        case failureClassIds
        case parameters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(modifiedDate, forKey: .modifiedDate)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(testRunId, forKey: .testRunId)
        try container.encodeIfPresent(testRunName, forKey: .testRunName)
        try container.encodeIfPresent(createdByUserName, forKey: .createdByUserName)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(testPlanGlobalId, forKey: .testPlanGlobalId)
        try container.encodeIfPresent(testPlanName, forKey: .testPlanName)
        try container.encodeIfPresent(configurationName, forKey: .configurationName)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encode(failureClassIds, forKey: .failureClassIds)
        try container.encodeIfPresent(parameters, forKey: .parameters)
    }
}

