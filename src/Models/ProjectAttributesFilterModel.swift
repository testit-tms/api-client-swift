//
// ProjectAttributesFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct ProjectAttributesFilterModel: Codable, JSONEncodable, Hashable {

    static let typesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Specifies an attribute name to search for */
    internal var name: String
    /** Specifies an attribute mandatory status to search for */
    internal var isRequired: Bool?
    /** Specifies an attribute global status to search for */
    internal var isGlobal: Bool?
    /** Specifies an attribute types to search for */
    internal var types: Set<CustomAttributeTypesEnum>
    /** Specifies an attribute enabled status to search for */
    internal var isEnabled: Bool?

    internal init(name: String, isRequired: Bool? = nil, isGlobal: Bool? = nil, types: Set<CustomAttributeTypesEnum>, isEnabled: Bool? = nil) {
        self.name = name
        self.isRequired = isRequired
        self.isGlobal = isGlobal
        self.types = types
        self.isEnabled = isEnabled
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case isRequired
        case isGlobal
        case types
        case isEnabled
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
        try container.encodeIfPresent(isGlobal, forKey: .isGlobal)
        try container.encode(types, forKey: .types)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
    }
}

