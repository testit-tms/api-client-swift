//
// AutoTestApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AutoTestApiResult: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var projectId: UUID
    public var externalId: String?
    public var name: String
    public var namespace: String?
    public var classname: String?
    public var steps: [AutoTestStepApiResult]?
    public var setup: [AutoTestStepApiResult]?
    public var teardown: [AutoTestStepApiResult]?
    public var title: String?
    public var description: String?
    public var isFlaky: Bool
    public var externalKey: String?
    public var globalId: Int64
    public var isDeleted: Bool
    public var mustBeApproved: Bool
    public var createdDate: Date
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var lastTestRunId: UUID?
    public var lastTestRunName: String?
    public var lastTestResultId: UUID?
    public var lastTestResultConfiguration: ConfigurationShortApiResult?
    public var lastTestResultOutcome: String?
    public var lastTestResultStatus: TestStatusApiResult?
    public var stabilityPercentage: Int64?
    public var links: [LinkApiResult]?
    public var labels: [LabelApiResult]?

    public init(id: UUID, projectId: UUID, externalId: String? = nil, name: String, namespace: String? = nil, classname: String? = nil, steps: [AutoTestStepApiResult]? = nil, setup: [AutoTestStepApiResult]? = nil, teardown: [AutoTestStepApiResult]? = nil, title: String? = nil, description: String? = nil, isFlaky: Bool, externalKey: String? = nil, globalId: Int64, isDeleted: Bool, mustBeApproved: Bool, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, lastTestRunId: UUID? = nil, lastTestRunName: String? = nil, lastTestResultId: UUID? = nil, lastTestResultConfiguration: ConfigurationShortApiResult? = nil, lastTestResultOutcome: String? = nil, lastTestResultStatus: TestStatusApiResult? = nil, stabilityPercentage: Int64? = nil, links: [LinkApiResult]? = nil, labels: [LabelApiResult]? = nil) {
        self.id = id
        self.projectId = projectId
        self.externalId = externalId
        self.name = name
        self.namespace = namespace
        self.classname = classname
        self.steps = steps
        self.setup = setup
        self.teardown = teardown
        self.title = title
        self.description = description
        self.isFlaky = isFlaky
        self.externalKey = externalKey
        self.globalId = globalId
        self.isDeleted = isDeleted
        self.mustBeApproved = mustBeApproved
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.lastTestRunId = lastTestRunId
        self.lastTestRunName = lastTestRunName
        self.lastTestResultId = lastTestResultId
        self.lastTestResultConfiguration = lastTestResultConfiguration
        self.lastTestResultOutcome = lastTestResultOutcome
        self.lastTestResultStatus = lastTestResultStatus
        self.stabilityPercentage = stabilityPercentage
        self.links = links
        self.labels = labels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case projectId
        case externalId
        case name
        case namespace
        case classname
        case steps
        case setup
        case teardown
        case title
        case description
        case isFlaky
        case externalKey
        case globalId
        case isDeleted
        case mustBeApproved
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case lastTestRunId
        case lastTestRunName
        case lastTestResultId
        case lastTestResultConfiguration
        case lastTestResultOutcome
        case lastTestResultStatus
        case stabilityPercentage
        case links
        case labels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(classname, forKey: .classname)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(setup, forKey: .setup)
        try container.encodeIfPresent(teardown, forKey: .teardown)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(mustBeApproved, forKey: .mustBeApproved)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(lastTestRunId, forKey: .lastTestRunId)
        try container.encodeIfPresent(lastTestRunName, forKey: .lastTestRunName)
        try container.encodeIfPresent(lastTestResultId, forKey: .lastTestResultId)
        try container.encodeIfPresent(lastTestResultConfiguration, forKey: .lastTestResultConfiguration)
        try container.encodeIfPresent(lastTestResultOutcome, forKey: .lastTestResultOutcome)
        try container.encodeIfPresent(lastTestResultStatus, forKey: .lastTestResultStatus)
        try container.encodeIfPresent(stabilityPercentage, forKey: .stabilityPercentage)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(labels, forKey: .labels)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AutoTestApiResult: Identifiable {}
