//
// WebHookModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WebHookModel: Codable, JSONEncodable, Hashable {

    /** Name of the webhook */
    public var name: String
    /** Type of event which triggers the webhook */
    public var eventType: WebHookEventTypeModel
    /** Description of the webhook */
    public var description: String?
    /** Url to which the webhook sends request */
    public var url: String
    /** Method which the webhook uses */
    public var requestType: RequestTypeModel
    /** Indicates if the webhook sends body */
    public var shouldSendBody: Bool
    /** Collection of headers which the webhook sends */
    public var headers: [String: String]?
    /** Collection of query parameters which the webhook sends */
    public var queryParameters: [String: String]?
    /** Indicates if the webhook is active */
    public var isEnabled: Bool
    /** Indicates if the webhook sends custom body */
    public var shouldSendCustomBody: Bool
    /** Custom body of the webhook */
    public var customBody: String?
    /** MIME type of body of the webhook */
    public var customBodyMediaType: String?
    /** Indicates if the webhook injects parameters */
    public var shouldReplaceParameters: Bool
    /** Indicates if the webhook escapes invalid characters in parameters */
    public var shouldEscapeParameters: Bool
    /** Creation date of the webhook */
    public var createdDate: Date
    /** Unique ID of user who created the webhook */
    public var createdById: UUID
    /** Last modification date of the webhook */
    public var modifiedDate: Date?
    /** Unique ID of user who modified the webhook last time */
    public var modifiedById: UUID?
    /** Unique ID of project where the webhook is located */
    public var projectId: UUID
    /** Unique ID of the entity */
    public var id: UUID
    /** Indicates if the entity is deleted */
    public var isDeleted: Bool

    public init(name: String, eventType: WebHookEventTypeModel, description: String? = nil, url: String, requestType: RequestTypeModel, shouldSendBody: Bool, headers: [String: String]? = nil, queryParameters: [String: String]? = nil, isEnabled: Bool, shouldSendCustomBody: Bool, customBody: String? = nil, customBodyMediaType: String? = nil, shouldReplaceParameters: Bool, shouldEscapeParameters: Bool, createdDate: Date, createdById: UUID, modifiedDate: Date? = nil, modifiedById: UUID? = nil, projectId: UUID, id: UUID, isDeleted: Bool) {
        self.name = name
        self.eventType = eventType
        self.description = description
        self.url = url
        self.requestType = requestType
        self.shouldSendBody = shouldSendBody
        self.headers = headers
        self.queryParameters = queryParameters
        self.isEnabled = isEnabled
        self.shouldSendCustomBody = shouldSendCustomBody
        self.customBody = customBody
        self.customBodyMediaType = customBodyMediaType
        self.shouldReplaceParameters = shouldReplaceParameters
        self.shouldEscapeParameters = shouldEscapeParameters
        self.createdDate = createdDate
        self.createdById = createdById
        self.modifiedDate = modifiedDate
        self.modifiedById = modifiedById
        self.projectId = projectId
        self.id = id
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case eventType
        case description
        case url
        case requestType
        case shouldSendBody
        case headers
        case queryParameters
        case isEnabled
        case shouldSendCustomBody
        case customBody
        case customBodyMediaType
        case shouldReplaceParameters
        case shouldEscapeParameters
        case createdDate
        case createdById
        case modifiedDate
        case modifiedById
        case projectId
        case id
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(eventType, forKey: .eventType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(url, forKey: .url)
        try container.encode(requestType, forKey: .requestType)
        try container.encode(shouldSendBody, forKey: .shouldSendBody)
        try container.encodeIfPresent(headers, forKey: .headers)
        try container.encodeIfPresent(queryParameters, forKey: .queryParameters)
        try container.encode(isEnabled, forKey: .isEnabled)
        try container.encode(shouldSendCustomBody, forKey: .shouldSendCustomBody)
        try container.encodeIfPresent(customBody, forKey: .customBody)
        try container.encodeIfPresent(customBodyMediaType, forKey: .customBodyMediaType)
        try container.encode(shouldReplaceParameters, forKey: .shouldReplaceParameters)
        try container.encode(shouldEscapeParameters, forKey: .shouldEscapeParameters)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WebHookModel: Identifiable {}
