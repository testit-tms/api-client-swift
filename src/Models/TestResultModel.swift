//
// TestResultModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestResultModel: Codable, JSONEncodable, Hashable {

    internal var autoTestId: UUID?
    internal var configurationId: UUID
    internal var startedOn: Date?
    internal var completedOn: Date?
    internal var durationInMs: Int64?
    internal var traces: String?
    internal var failureType: String?
    internal var message: String?
    internal var runByUserId: UUID?
    internal var stoppedByUserId: UUID?
    internal var testPointId: UUID
    internal var testRunId: UUID
    internal var testPoint: TestPointPutModel?
    internal var autoTest: AutoTestModel?
    internal var autoTestStepResults: [AttachmentModelAutoTestStepResultsModel]?
    internal var setupResults: [AttachmentModelAutoTestStepResultsModel]?
    internal var teardownResults: [AttachmentModelAutoTestStepResultsModel]?
    internal var workItemVersionId: UUID
    internal var workItemVersionNumber: Int?
    internal var parameters: [String: String]?
    internal var properties: [String: String]?
    internal var id: UUID
    internal var createdDate: Date
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var stepComments: [StepCommentModel]?
    internal var failureClassIds: [UUID]
    internal var outcome: TestResultOutcome?
    internal var comment: String?
    internal var links: [LinkModel]?
    internal var stepResults: [StepResultModel]?
    internal var attachments: [AttachmentModel]?

    internal init(autoTestId: UUID? = nil, configurationId: UUID, startedOn: Date? = nil, completedOn: Date? = nil, durationInMs: Int64? = nil, traces: String? = nil, failureType: String? = nil, message: String? = nil, runByUserId: UUID? = nil, stoppedByUserId: UUID? = nil, testPointId: UUID, testRunId: UUID, testPoint: TestPointPutModel? = nil, autoTest: AutoTestModel? = nil, autoTestStepResults: [AttachmentModelAutoTestStepResultsModel]? = nil, setupResults: [AttachmentModelAutoTestStepResultsModel]? = nil, teardownResults: [AttachmentModelAutoTestStepResultsModel]? = nil, workItemVersionId: UUID, workItemVersionNumber: Int? = nil, parameters: [String: String]? = nil, properties: [String: String]? = nil, id: UUID, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, stepComments: [StepCommentModel]? = nil, failureClassIds: [UUID], outcome: TestResultOutcome? = nil, comment: String? = nil, links: [LinkModel]? = nil, stepResults: [StepResultModel]? = nil, attachments: [AttachmentModel]? = nil) {
        self.autoTestId = autoTestId
        self.configurationId = configurationId
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.durationInMs = durationInMs
        self.traces = traces
        self.failureType = failureType
        self.message = message
        self.runByUserId = runByUserId
        self.stoppedByUserId = stoppedByUserId
        self.testPointId = testPointId
        self.testRunId = testRunId
        self.testPoint = testPoint
        self.autoTest = autoTest
        self.autoTestStepResults = autoTestStepResults
        self.setupResults = setupResults
        self.teardownResults = teardownResults
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.parameters = parameters
        self.properties = properties
        self.id = id
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.stepComments = stepComments
        self.failureClassIds = failureClassIds
        self.outcome = outcome
        self.comment = comment
        self.links = links
        self.stepResults = stepResults
        self.attachments = attachments
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case autoTestId
        case configurationId
        case startedOn
        case completedOn
        case durationInMs
        case traces
        case failureType
        case message
        case runByUserId
        case stoppedByUserId
        case testPointId
        case testRunId
        case testPoint
        case autoTest
        case autoTestStepResults
        case setupResults
        case teardownResults
        case workItemVersionId
        case workItemVersionNumber
        case parameters
        case properties
        case id
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case stepComments
        case failureClassIds
        case outcome
        case comment
        case links
        case stepResults
        case attachments
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoTestId, forKey: .autoTestId)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(durationInMs, forKey: .durationInMs)
        try container.encodeIfPresent(traces, forKey: .traces)
        try container.encodeIfPresent(failureType, forKey: .failureType)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(runByUserId, forKey: .runByUserId)
        try container.encodeIfPresent(stoppedByUserId, forKey: .stoppedByUserId)
        try container.encode(testPointId, forKey: .testPointId)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encodeIfPresent(testPoint, forKey: .testPoint)
        try container.encodeIfPresent(autoTest, forKey: .autoTest)
        try container.encodeIfPresent(autoTestStepResults, forKey: .autoTestStepResults)
        try container.encodeIfPresent(setupResults, forKey: .setupResults)
        try container.encodeIfPresent(teardownResults, forKey: .teardownResults)
        try container.encode(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(stepComments, forKey: .stepComments)
        try container.encode(failureClassIds, forKey: .failureClassIds)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(stepResults, forKey: .stepResults)
        try container.encodeIfPresent(attachments, forKey: .attachments)
    }
}

