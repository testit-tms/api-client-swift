//
// CustomAttributePutModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CustomAttributePutModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    /** Unique ID of the attribute */
    internal var id: UUID
    /** Collection of the attribute options     Available for attributes of type `options` and `multiple options` only */
    internal var options: [CustomAttributeOptionModel]?
    /** Type of the attribute */
    internal var type: CustomAttributeTypesEnum
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool
    /** Name of the attribute */
    internal var name: String
    /** Indicates if the attribute is enabled */
    internal var isEnabled: Bool
    /** Indicates if the attribute value is mandatory to specify */
    internal var isRequired: Bool
    /** Indicates if the attribute is available across all projects */
    internal var isGlobal: Bool

    internal init(id: UUID, options: [CustomAttributeOptionModel]? = nil, type: CustomAttributeTypesEnum, isDeleted: Bool, name: String, isEnabled: Bool, isRequired: Bool, isGlobal: Bool) {
        self.id = id
        self.options = options
        self.type = type
        self.isDeleted = isDeleted
        self.name = name
        self.isEnabled = isEnabled
        self.isRequired = isRequired
        self.isGlobal = isGlobal
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case options
        case type
        case isDeleted
        case name
        case isEnabled
        case isRequired
        case isGlobal
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encode(type, forKey: .type)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(name, forKey: .name)
        try container.encode(isEnabled, forKey: .isEnabled)
        try container.encode(isRequired, forKey: .isRequired)
        try container.encode(isGlobal, forKey: .isGlobal)
    }
}

