//
// CreateTestRunAndFillByAutoTestsApiModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateTestRunAndFillByAutoTestsApiModel: Codable, JSONEncodable, Hashable {

    public static let configurationIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let autoTestExternalIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Specifies the GUID of the project, in which a test run will be created. */
    public var projectId: UUID
    /** Specifies the name of the test run. */
    public var name: String?
    /** Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs. */
    public var configurationIds: [UUID]
    /** Specifies the external ID of the autotest. You can specify several IDs. */
    public var autoTestExternalIds: [String]
    /** Specifies the test run description. */
    public var description: String?
    /** Specifies the test run launch source. */
    public var launchSource: String?
    /** Collection of attachment ids to relate to the test run */
    public var attachments: [AssignAttachmentApiModel]?
    /** Collection of links to relate to the test run */
    public var links: [CreateLinkApiModel]?

    public init(projectId: UUID, name: String? = nil, configurationIds: [UUID], autoTestExternalIds: [String], description: String? = nil, launchSource: String? = nil, attachments: [AssignAttachmentApiModel]? = nil, links: [CreateLinkApiModel]? = nil) {
        self.projectId = projectId
        self.name = name
        self.configurationIds = configurationIds
        self.autoTestExternalIds = autoTestExternalIds
        self.description = description
        self.launchSource = launchSource
        self.attachments = attachments
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectId
        case name
        case configurationIds
        case autoTestExternalIds
        case description
        case launchSource
        case attachments
        case links
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(configurationIds, forKey: .configurationIds)
        try container.encode(autoTestExternalIds, forKey: .autoTestExternalIds)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

