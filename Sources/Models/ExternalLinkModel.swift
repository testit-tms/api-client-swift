//
// ExternalLinkModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExternalLinkModel: Codable, JSONEncodable, Hashable {

    public var url: String?
    public var title: String?
    public var issueTypeName: String?
    public var issueTypeIconUrl: String?
    public var priorityName: String?
    public var priorityIconUrl: String?
    public var statusName: String?
    public var assigneeDisplayName: String?

    public init(url: String? = nil, title: String? = nil, issueTypeName: String? = nil, issueTypeIconUrl: String? = nil, priorityName: String? = nil, priorityIconUrl: String? = nil, statusName: String? = nil, assigneeDisplayName: String? = nil) {
        self.url = url
        self.title = title
        self.issueTypeName = issueTypeName
        self.issueTypeIconUrl = issueTypeIconUrl
        self.priorityName = priorityName
        self.priorityIconUrl = priorityIconUrl
        self.statusName = statusName
        self.assigneeDisplayName = assigneeDisplayName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case title
        case issueTypeName
        case issueTypeIconUrl
        case priorityName
        case priorityIconUrl
        case statusName
        case assigneeDisplayName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(issueTypeName, forKey: .issueTypeName)
        try container.encodeIfPresent(issueTypeIconUrl, forKey: .issueTypeIconUrl)
        try container.encodeIfPresent(priorityName, forKey: .priorityName)
        try container.encodeIfPresent(priorityIconUrl, forKey: .priorityIconUrl)
        try container.encodeIfPresent(statusName, forKey: .statusName)
        try container.encodeIfPresent(assigneeDisplayName, forKey: .assigneeDisplayName)
    }
}

