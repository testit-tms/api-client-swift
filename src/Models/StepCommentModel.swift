//
// StepCommentModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct StepCommentModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var text: String?
    internal var stepId: UUID
    internal var parentStepId: UUID?
    internal var attachments: [AttachmentModel]?
    internal var testResultId: UUID
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var createdDate: Date
    internal var modifiedDate: Date?

    internal init(id: UUID, text: String? = nil, stepId: UUID, parentStepId: UUID? = nil, attachments: [AttachmentModel]? = nil, testResultId: UUID, createdById: UUID, modifiedById: UUID? = nil, createdDate: Date, modifiedDate: Date? = nil) {
        self.id = id
        self.text = text
        self.stepId = stepId
        self.parentStepId = parentStepId
        self.attachments = attachments
        self.testResultId = testResultId
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case text
        case stepId
        case parentStepId
        case attachments
        case testResultId
        case createdById
        case modifiedById
        case createdDate
        case modifiedDate
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encode(stepId, forKey: .stepId)
        try container.encodeIfPresent(parentStepId, forKey: .parentStepId)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encode(testResultId, forKey: .testResultId)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
    }
}

