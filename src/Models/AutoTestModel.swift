//
// AutoTestModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AutoTestModel: Codable, JSONEncodable, Hashable {

    static let externalIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Global ID of the autotest */
    internal var globalId: Int64
    /** Indicates if the autotest is deleted */
    internal var isDeleted: Bool
    /** Indicates if the autotest has unapproved changes from linked work items */
    internal var mustBeApproved: Bool
    /** Unique ID of the autotest */
    internal var id: UUID
    /** Creation date of the autotest */
    internal var createdDate: Date
    /** Last modification date of the project */
    internal var modifiedDate: Date?
    /** Unique ID of the project creator */
    internal var createdById: UUID
    /** Unique ID of the project last editor */
    internal var modifiedById: UUID?
    /** Unique ID of the autotest last test run */
    internal var lastTestRunId: UUID?
    /** Name of the autotest last test run */
    internal var lastTestRunName: String?
    /** Unique ID of the autotest last test result */
    internal var lastTestResultId: UUID?
    /** Outcome of the autotest last test result */
    internal var lastTestResultOutcome: String?
    /** Stability percentage of the autotest */
    internal var stabilityPercentage: Int?
    /** External ID of the autotest */
    internal var externalId: String
    /** Collection of the autotest links */
    internal var links: [LinkPutModel]?
    /** Unique ID of the autotest project */
    internal var projectId: UUID
    /** Name of the autotest */
    internal var name: String
    /** Name of the autotest namespace */
    internal var namespace: String?
    /** Name of the autotest class */
    internal var classname: String?
    /** Collection of the autotest steps */
    internal var steps: [AutoTestStepModel]?
    /** Collection of the autotest setup steps */
    internal var setup: [AutoTestStepModel]?
    /** Collection of the autotest teardown steps */
    internal var teardown: [AutoTestStepModel]?
    /** Name of the autotest in autotest's card */
    internal var title: String?
    /** Description of the autotest in autotest's card */
    internal var description: String?
    /** Collection of the autotest labels */
    internal var labels: [LabelShortModel]?
    /** Indicates if the autotest is marked as flaky */
    internal var isFlaky: Bool?
    /** External key of the autotest */
    internal var externalKey: String?

    internal init(globalId: Int64, isDeleted: Bool, mustBeApproved: Bool, id: UUID, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, lastTestRunId: UUID? = nil, lastTestRunName: String? = nil, lastTestResultId: UUID? = nil, lastTestResultOutcome: String? = nil, stabilityPercentage: Int? = nil, externalId: String, links: [LinkPutModel]? = nil, projectId: UUID, name: String, namespace: String? = nil, classname: String? = nil, steps: [AutoTestStepModel]? = nil, setup: [AutoTestStepModel]? = nil, teardown: [AutoTestStepModel]? = nil, title: String? = nil, description: String? = nil, labels: [LabelShortModel]? = nil, isFlaky: Bool? = nil, externalKey: String? = nil) {
        self.globalId = globalId
        self.isDeleted = isDeleted
        self.mustBeApproved = mustBeApproved
        self.id = id
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.lastTestRunId = lastTestRunId
        self.lastTestRunName = lastTestRunName
        self.lastTestResultId = lastTestResultId
        self.lastTestResultOutcome = lastTestResultOutcome
        self.stabilityPercentage = stabilityPercentage
        self.externalId = externalId
        self.links = links
        self.projectId = projectId
        self.name = name
        self.namespace = namespace
        self.classname = classname
        self.steps = steps
        self.setup = setup
        self.teardown = teardown
        self.title = title
        self.description = description
        self.labels = labels
        self.isFlaky = isFlaky
        self.externalKey = externalKey
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case globalId
        case isDeleted
        case mustBeApproved
        case id
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case lastTestRunId
        case lastTestRunName
        case lastTestResultId
        case lastTestResultOutcome
        case stabilityPercentage
        case externalId
        case links
        case projectId
        case name
        case namespace
        case classname
        case steps
        case setup
        case teardown
        case title
        case description
        case labels
        case isFlaky
        case externalKey
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(mustBeApproved, forKey: .mustBeApproved)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(lastTestRunId, forKey: .lastTestRunId)
        try container.encodeIfPresent(lastTestRunName, forKey: .lastTestRunName)
        try container.encodeIfPresent(lastTestResultId, forKey: .lastTestResultId)
        try container.encodeIfPresent(lastTestResultOutcome, forKey: .lastTestResultOutcome)
        try container.encodeIfPresent(stabilityPercentage, forKey: .stabilityPercentage)
        try container.encode(externalId, forKey: .externalId)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(classname, forKey: .classname)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(setup, forKey: .setup)
        try container.encodeIfPresent(teardown, forKey: .teardown)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
    }
}

