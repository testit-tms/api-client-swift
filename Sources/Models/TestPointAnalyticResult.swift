//
// TestPointAnalyticResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPointAnalyticResult: Codable, JSONEncodable, Hashable {

    @available(*, deprecated, message: "This property is deprecated.")
    public var countGroupByStatus: [TestPlanGroupByStatus]
    public var sumGroupByTester: [TestPlanGroupByTester]
    public var countGroupByTester: [TestPlanGroupByTester]
    public var countGroupByTestSuite: [TestPlanGroupByTestSuite]
    @available(*, deprecated, message: "This property is deprecated.")
    public var countGroupByTesterAndStatus: [TestPlanGroupByTesterAndStatus]
    public var countGroupByStatusCode: [TestPlanGroupByStatusCode]
    public var countGroupByTesterAndStatusCode: [TestPlanGroupByTesterAndStatusCode]
    public var countGroupByStatusType: [TestPlanGroupByStatusType]

    public init(countGroupByStatus: [TestPlanGroupByStatus], sumGroupByTester: [TestPlanGroupByTester], countGroupByTester: [TestPlanGroupByTester], countGroupByTestSuite: [TestPlanGroupByTestSuite], countGroupByTesterAndStatus: [TestPlanGroupByTesterAndStatus], countGroupByStatusCode: [TestPlanGroupByStatusCode], countGroupByTesterAndStatusCode: [TestPlanGroupByTesterAndStatusCode], countGroupByStatusType: [TestPlanGroupByStatusType]) {
        self.countGroupByStatus = countGroupByStatus
        self.sumGroupByTester = sumGroupByTester
        self.countGroupByTester = countGroupByTester
        self.countGroupByTestSuite = countGroupByTestSuite
        self.countGroupByTesterAndStatus = countGroupByTesterAndStatus
        self.countGroupByStatusCode = countGroupByStatusCode
        self.countGroupByTesterAndStatusCode = countGroupByTesterAndStatusCode
        self.countGroupByStatusType = countGroupByStatusType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countGroupByStatus
        case sumGroupByTester
        case countGroupByTester
        case countGroupByTestSuite
        case countGroupByTesterAndStatus
        case countGroupByStatusCode
        case countGroupByTesterAndStatusCode
        case countGroupByStatusType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(countGroupByStatus, forKey: .countGroupByStatus)
        try container.encode(sumGroupByTester, forKey: .sumGroupByTester)
        try container.encode(countGroupByTester, forKey: .countGroupByTester)
        try container.encode(countGroupByTestSuite, forKey: .countGroupByTestSuite)
        try container.encode(countGroupByTesterAndStatus, forKey: .countGroupByTesterAndStatus)
        try container.encode(countGroupByStatusCode, forKey: .countGroupByStatusCode)
        try container.encode(countGroupByTesterAndStatusCode, forKey: .countGroupByTesterAndStatusCode)
        try container.encode(countGroupByStatusType, forKey: .countGroupByStatusType)
    }
}

