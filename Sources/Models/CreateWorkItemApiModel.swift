//
// CreateWorkItemApiModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateWorkItemApiModel: Codable, JSONEncodable, Hashable {

    public static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400000, exclusiveMaximum: false, multipleOf: nil)
    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var entityTypeName: WorkItemEntityTypes
    /** Workitem description */
    public var description: String?
    public var state: WorkItemStates
    public var priority: WorkItemPriorityModel
    /** Collection of workitem steps */
    public var steps: [CreateStepApiModel]
    /** Collection of workitem precondition steps */
    public var preconditionSteps: [CreateStepApiModel]
    /** Collection of workitem postcondition steps */
    public var postconditionSteps: [CreateStepApiModel]
    /** WorkItem duration in milliseconds, must be 0 for shared steps and greater than 0 for the other types of work items */
    public var duration: Int
    /** Key value pair of custom workitem attributes */
    public var attributes: [String: AnyCodable]
    /** Collection of workitem tags */
    public var tags: [TagModel]
    /** Collection of workitem attachments */
    public var attachments: [AssignAttachmentApiModel]?
    /** Collection of parameter sets */
    public var iterations: [AssignIterationApiModel]?
    /** Collection of workitem links */
    public var links: [CreateLinkApiModel]
    /** Workitem name */
    public var name: String
    /** Project unique identifier - used to link workitem with project */
    public var projectId: UUID
    /** Internal identifier of section where workitem is located */
    public var sectionId: UUID
    /** Collection of autotest internal ids */
    public var autoTests: [AutoTestIdModel]?

    public init(entityTypeName: WorkItemEntityTypes, description: String? = nil, state: WorkItemStates, priority: WorkItemPriorityModel, steps: [CreateStepApiModel], preconditionSteps: [CreateStepApiModel], postconditionSteps: [CreateStepApiModel], duration: Int, attributes: [String: AnyCodable], tags: [TagModel], attachments: [AssignAttachmentApiModel]? = nil, iterations: [AssignIterationApiModel]? = nil, links: [CreateLinkApiModel], name: String, projectId: UUID, sectionId: UUID, autoTests: [AutoTestIdModel]? = nil) {
        self.entityTypeName = entityTypeName
        self.description = description
        self.state = state
        self.priority = priority
        self.steps = steps
        self.preconditionSteps = preconditionSteps
        self.postconditionSteps = postconditionSteps
        self.duration = duration
        self.attributes = attributes
        self.tags = tags
        self.attachments = attachments
        self.iterations = iterations
        self.links = links
        self.name = name
        self.projectId = projectId
        self.sectionId = sectionId
        self.autoTests = autoTests
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case entityTypeName
        case description
        case state
        case priority
        case steps
        case preconditionSteps
        case postconditionSteps
        case duration
        case attributes
        case tags
        case attachments
        case iterations
        case links
        case name
        case projectId
        case sectionId
        case autoTests
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(steps, forKey: .steps)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(duration, forKey: .duration)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(iterations, forKey: .iterations)
        try container.encode(links, forKey: .links)
        try container.encode(name, forKey: .name)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
    }
}

