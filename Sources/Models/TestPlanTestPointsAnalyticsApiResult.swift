//
// TestPlanTestPointsAnalyticsApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPlanTestPointsAnalyticsApiResult: Codable, JSONEncodable, Hashable {

    public var countGroupByStatus: [TestPlanTestPointsStatusGroupApiResult]
    public var sumGroupByTester: [TestPlanTestPointsTesterGroupApiResult]
    public var countGroupByTester: [TestPlanTestPointsTesterGroupApiResult]
    public var countGroupByTesterAndStatus: [TestPlanTestPointsTesterAndStatusGroupApiResult]

    public init(countGroupByStatus: [TestPlanTestPointsStatusGroupApiResult], sumGroupByTester: [TestPlanTestPointsTesterGroupApiResult], countGroupByTester: [TestPlanTestPointsTesterGroupApiResult], countGroupByTesterAndStatus: [TestPlanTestPointsTesterAndStatusGroupApiResult]) {
        self.countGroupByStatus = countGroupByStatus
        self.sumGroupByTester = sumGroupByTester
        self.countGroupByTester = countGroupByTester
        self.countGroupByTesterAndStatus = countGroupByTesterAndStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countGroupByStatus
        case sumGroupByTester
        case countGroupByTester
        case countGroupByTesterAndStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(countGroupByStatus, forKey: .countGroupByStatus)
        try container.encode(sumGroupByTester, forKey: .sumGroupByTester)
        try container.encode(countGroupByTester, forKey: .countGroupByTester)
        try container.encode(countGroupByTesterAndStatus, forKey: .countGroupByTesterAndStatus)
    }
}

