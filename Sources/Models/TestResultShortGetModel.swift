//
// TestResultShortGetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultShortGetModel: Codable, JSONEncodable, Hashable {

    /** Unique ID of the test result */
    public var id: UUID
    /** Name of autotest represented by the test result */
    public var name: String
    /** Global ID of autotest represented by the test result */
    public var autotestGlobalId: Int64
    /** Unique ID of test run where the test result is located */
    public var testRunId: UUID
    /** Unique ID of configuration which the test result uses */
    public var configurationId: UUID
    /** Name of configuration which the test result uses */
    public var configurationName: String
    /** Outcome of the test result */
    public var outcome: String
    /** Collection of result reasons which the test result have */
    public var resultReasons: [AutotestResultReasonSubGetModel]
    /** Comment to the test result */
    public var comment: String?
    /** Date when the test result was completed or started or created */
    @available(*, deprecated, message: "This property is deprecated.")
    public var date: Date
    /** Date when the test result has been created */
    public var createdDate: Date
    /** Date when the test result has been modified */
    public var modifiedDate: Date?
    /** Date when the test result has been started */
    public var startedOn: Date?
    /** Date when the test result has been completed */
    public var completedOn: Date?
    /** Time which it took to run the test */
    public var duration: Int64?
    /** Collection of links attached to the test result */
    public var links: [LinkSubGetModel]
    /** Collection of files attached to the test result */
    public var attachments: [AttachmentModel]

    public init(id: UUID, name: String, autotestGlobalId: Int64, testRunId: UUID, configurationId: UUID, configurationName: String, outcome: String, resultReasons: [AutotestResultReasonSubGetModel], comment: String? = nil, date: Date, createdDate: Date, modifiedDate: Date? = nil, startedOn: Date? = nil, completedOn: Date? = nil, duration: Int64? = nil, links: [LinkSubGetModel], attachments: [AttachmentModel]) {
        self.id = id
        self.name = name
        self.autotestGlobalId = autotestGlobalId
        self.testRunId = testRunId
        self.configurationId = configurationId
        self.configurationName = configurationName
        self.outcome = outcome
        self.resultReasons = resultReasons
        self.comment = comment
        self.date = date
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.duration = duration
        self.links = links
        self.attachments = attachments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case autotestGlobalId
        case testRunId
        case configurationId
        case configurationName
        case outcome
        case resultReasons
        case comment
        case date
        case createdDate
        case modifiedDate
        case startedOn
        case completedOn
        case duration
        case links
        case attachments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(autotestGlobalId, forKey: .autotestGlobalId)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(configurationName, forKey: .configurationName)
        try container.encode(outcome, forKey: .outcome)
        try container.encode(resultReasons, forKey: .resultReasons)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encode(date, forKey: .date)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encode(links, forKey: .links)
        try container.encode(attachments, forKey: .attachments)
    }
}

