//
// SharedStepReferenceSectionsQueryFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SharedStepReferenceSectionsQueryFilterModel: Codable, JSONEncodable, Hashable {

    public static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Name of section */
    public var name: String?
    /** Collection of identifiers of users who created work item */
    public var createdByIds: Set<UUID>?
    /** Collection of identifiers of users who applied last modification to work item */
    public var modifiedByIds: Set<UUID>?
    /** Date and time of work item creation */
    public var createdDate: DateTimeRangeSelectorModel?
    /** Date and time of work item last modification */
    public var modifiedDate: DateTimeRangeSelectorModel?

    public init(name: String? = nil, createdByIds: Set<UUID>? = nil, modifiedByIds: Set<UUID>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil) {
        self.name = name
        self.createdByIds = createdByIds
        self.modifiedByIds = modifiedByIds
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case createdByIds
        case modifiedByIds
        case createdDate
        case modifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
    }
}

