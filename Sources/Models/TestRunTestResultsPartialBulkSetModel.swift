//
// TestRunTestResultsPartialBulkSetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestRunTestResultsPartialBulkSetModel: Codable, JSONEncodable, Hashable {

    static let resultReasonIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let linksRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let attachmentIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Object with filters and extraction parameters */
    public var selector: TestRunTestResultsSelectModel?
    /** Unique IDs of result reasons to be assigned to test results */
    public var resultReasonIds: Set<UUID>?
    /** Collection of links to be assigned to test results */
    public var links: Set<LinkPostModel>?
    /** Comment to be added to test results */
    public var comment: String?
    /** Unique IDs of files to be attached to test results */
    public var attachmentIds: Set<UUID>?

    public init(selector: TestRunTestResultsSelectModel? = nil, resultReasonIds: Set<UUID>? = nil, links: Set<LinkPostModel>? = nil, comment: String? = nil, attachmentIds: Set<UUID>? = nil) {
        self.selector = selector
        self.resultReasonIds = resultReasonIds
        self.links = links
        self.comment = comment
        self.attachmentIds = attachmentIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case selector
        case resultReasonIds
        case links
        case comment
        case attachmentIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(selector, forKey: .selector)
        try container.encodeIfPresent(resultReasonIds, forKey: .resultReasonIds)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(attachmentIds, forKey: .attachmentIds)
    }
}

