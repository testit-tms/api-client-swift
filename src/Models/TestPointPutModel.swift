//
// TestPointPutModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPointPutModel: Codable, JSONEncodable, Hashable {

    internal var testerId: UUID?
    internal var iterationId: UUID
    internal var workItemId: UUID?
    internal var configurationId: UUID?
    internal var testSuiteId: UUID
    internal var status: String?
    internal var lastTestResultId: UUID?
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(testerId: UUID? = nil, iterationId: UUID, workItemId: UUID? = nil, configurationId: UUID? = nil, testSuiteId: UUID, status: String? = nil, lastTestResultId: UUID? = nil, id: UUID, isDeleted: Bool) {
        self.testerId = testerId
        self.iterationId = iterationId
        self.workItemId = workItemId
        self.configurationId = configurationId
        self.testSuiteId = testSuiteId
        self.status = status
        self.lastTestResultId = lastTestResultId
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case testerId
        case iterationId
        case workItemId
        case configurationId
        case testSuiteId
        case status
        case lastTestResultId
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encode(iterationId, forKey: .iterationId)
        try container.encodeIfPresent(workItemId, forKey: .workItemId)
        try container.encodeIfPresent(configurationId, forKey: .configurationId)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(lastTestResultId, forKey: .lastTestResultId)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

