//
// TestRunSearchQueryModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestRunSearchQueryModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let statesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public var name: String?
    public var states: Set<TestRunState>?
    public var startedDate: DateTimeRangeSelectorModel?
    public var completedDate: DateTimeRangeSelectorModel?
    public var createdByIds: Set<UUID>?
    public var modifiedByIds: Set<UUID>?

    public init(name: String? = nil, states: Set<TestRunState>? = nil, startedDate: DateTimeRangeSelectorModel? = nil, completedDate: DateTimeRangeSelectorModel? = nil, createdByIds: Set<UUID>? = nil, modifiedByIds: Set<UUID>? = nil) {
        self.name = name
        self.states = states
        self.startedDate = startedDate
        self.completedDate = completedDate
        self.createdByIds = createdByIds
        self.modifiedByIds = modifiedByIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case states
        case startedDate
        case completedDate
        case createdByIds
        case modifiedByIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(startedDate, forKey: .startedDate)
        try container.encodeIfPresent(completedDate, forKey: .completedDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
    }
}

