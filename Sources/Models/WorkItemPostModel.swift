//
// WorkItemPostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WorkItemPostModel: Codable, JSONEncodable, Hashable {

    static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400000, exclusiveMaximum: false, multipleOf: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var entityTypeName: WorkItemEntityTypes
    public var description: String?
    public var state: WorkItemStates
    public var priority: WorkItemPriorityModel
    public var steps: [StepPostModel]
    public var preconditionSteps: [StepPostModel]
    public var postconditionSteps: [StepPostModel]
    /** Must be 0 for shared steps and greater than 0 for the other types of work items */
    public var duration: Int
    public var attributes: [String: AnyCodable]
    public var tags: [TagPostModel]
    public var attachments: [AttachmentPutModel]?
    public var iterations: [IterationPutModel]?
    public var links: [LinkPostModel]
    public var name: String
    /** This property is used to link workitem with project */
    public var projectId: UUID
    public var sectionId: UUID
    public var autoTests: [AutoTestIdModel]?

    public init(entityTypeName: WorkItemEntityTypes, description: String? = nil, state: WorkItemStates, priority: WorkItemPriorityModel, steps: [StepPostModel], preconditionSteps: [StepPostModel], postconditionSteps: [StepPostModel], duration: Int, attributes: [String: AnyCodable], tags: [TagPostModel], attachments: [AttachmentPutModel]? = nil, iterations: [IterationPutModel]? = nil, links: [LinkPostModel], name: String, projectId: UUID, sectionId: UUID, autoTests: [AutoTestIdModel]? = nil) {
        self.entityTypeName = entityTypeName
        self.description = description
        self.state = state
        self.priority = priority
        self.steps = steps
        self.preconditionSteps = preconditionSteps
        self.postconditionSteps = postconditionSteps
        self.duration = duration
        self.attributes = attributes
        self.tags = tags
        self.attachments = attachments
        self.iterations = iterations
        self.links = links
        self.name = name
        self.projectId = projectId
        self.sectionId = sectionId
        self.autoTests = autoTests
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case entityTypeName
        case description
        case state
        case priority
        case steps
        case preconditionSteps
        case postconditionSteps
        case duration
        case attributes
        case tags
        case attachments
        case iterations
        case links
        case name
        case projectId
        case sectionId
        case autoTests
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(steps, forKey: .steps)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(duration, forKey: .duration)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(iterations, forKey: .iterations)
        try container.encode(links, forKey: .links)
        try container.encode(name, forKey: .name)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
    }
}

