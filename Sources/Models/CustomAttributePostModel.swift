//
// CustomAttributePostModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomAttributePostModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    /** Collection of attribute options     Available for attributes of type `options` and `multiple options` only */
    public var options: [CustomAttributeOptionPostModel]?
    /** Type of attribute */
    public var type: CustomAttributeTypesEnum
    /** Name of the attribute */
    public var name: String
    /** Indicates if the attribute is enabled */
    public var isEnabled: Bool
    /** Indicates if the attribute value is mandatory to specify */
    public var isRequired: Bool
    /** Indicates if the attribute is available across all projects */
    public var isGlobal: Bool

    public init(options: [CustomAttributeOptionPostModel]? = nil, type: CustomAttributeTypesEnum, name: String, isEnabled: Bool, isRequired: Bool, isGlobal: Bool) {
        self.options = options
        self.type = type
        self.name = name
        self.isEnabled = isEnabled
        self.isRequired = isRequired
        self.isGlobal = isGlobal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case options
        case type
        case name
        case isEnabled
        case isRequired
        case isGlobal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encode(type, forKey: .type)
        try container.encode(name, forKey: .name)
        try container.encode(isEnabled, forKey: .isEnabled)
        try container.encode(isRequired, forKey: .isRequired)
        try container.encode(isGlobal, forKey: .isGlobal)
    }
}

