//
// AutotestFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AutotestFilterModel: Codable, JSONEncodable, Hashable {

    static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let externalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Specifies an autotest projects IDs to search for */
    internal var projectIds: Set<UUID>?
    /** Specifies an autotest external IDs to search for */
    internal var externalIds: Set<String>?
    /** Specifies an autotest global IDs to search for */
    internal var globalIds: Set<Int64>?
    /** Specifies an autotest name to search for */
    internal var name: String?
    /** Specifies an autotest flaky status to search for */
    internal var isFlaky: Bool?
    /** Specifies an autotest unapproved changes status to search for */
    internal var mustBeApproved: Bool?
    /** Specifies an autotest range of stability percentage to search for */
    internal var stabilityPercentage: Int64RangeSelectorModel?
    /** Specifies an autotest range of creation date to search for */
    internal var createdDate: DateTimeRangeSelectorModel?
    /** Specifies an autotest creator IDs to search for */
    internal var createdByIds: Set<UUID>?
    /** Specifies an autotest range of last modification date to search for */
    internal var modifiedDate: DateTimeRangeSelectorModel?
    /** Specifies an autotest last editor IDs to search for */
    internal var modifiedByIds: Set<UUID>?
    /** Specifies an autotest deleted status to search for */
    internal var isDeleted: Bool?
    /** Specifies an autotest namespace to search for */
    internal var namespace: String?
    /** Specifies an autotest namespace name presence status to search for */
    internal var isEmptyNamespace: Bool?
    /** Specifies an autotest class name to search for */
    internal var className: String?
    /** Specifies an autotest class name presence status to search for */
    internal var isEmptyClassName: Bool?
    /** Specifies an autotest outcome of the last test result to search for */
    internal var lastTestResultOutcome: AutotestResultOutcome?
    /** Specifies an autotest external key to search for */
    internal var externalKey: String?

    internal init(projectIds: Set<UUID>? = nil, externalIds: Set<String>? = nil, globalIds: Set<Int64>? = nil, name: String? = nil, isFlaky: Bool? = nil, mustBeApproved: Bool? = nil, stabilityPercentage: Int64RangeSelectorModel? = nil, createdDate: DateTimeRangeSelectorModel? = nil, createdByIds: Set<UUID>? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, modifiedByIds: Set<UUID>? = nil, isDeleted: Bool? = nil, namespace: String? = nil, isEmptyNamespace: Bool? = nil, className: String? = nil, isEmptyClassName: Bool? = nil, lastTestResultOutcome: AutotestResultOutcome? = nil, externalKey: String? = nil) {
        self.projectIds = projectIds
        self.externalIds = externalIds
        self.globalIds = globalIds
        self.name = name
        self.isFlaky = isFlaky
        self.mustBeApproved = mustBeApproved
        self.stabilityPercentage = stabilityPercentage
        self.createdDate = createdDate
        self.createdByIds = createdByIds
        self.modifiedDate = modifiedDate
        self.modifiedByIds = modifiedByIds
        self.isDeleted = isDeleted
        self.namespace = namespace
        self.isEmptyNamespace = isEmptyNamespace
        self.className = className
        self.isEmptyClassName = isEmptyClassName
        self.lastTestResultOutcome = lastTestResultOutcome
        self.externalKey = externalKey
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case projectIds
        case externalIds
        case globalIds
        case name
        case isFlaky
        case mustBeApproved
        case stabilityPercentage
        case createdDate
        case createdByIds
        case modifiedDate
        case modifiedByIds
        case isDeleted
        case namespace
        case isEmptyNamespace
        case className
        case isEmptyClassName
        case lastTestResultOutcome
        case externalKey
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(externalIds, forKey: .externalIds)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(mustBeApproved, forKey: .mustBeApproved)
        try container.encodeIfPresent(stabilityPercentage, forKey: .stabilityPercentage)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(isEmptyNamespace, forKey: .isEmptyNamespace)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(isEmptyClassName, forKey: .isEmptyClassName)
        try container.encodeIfPresent(lastTestResultOutcome, forKey: .lastTestResultOutcome)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
    }
}

