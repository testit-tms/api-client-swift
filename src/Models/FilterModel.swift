//
// FilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct FilterModel: Codable, JSONEncodable, Hashable {

    internal var createdDate: Date
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var data: WorkItemSearchQueryModel
    internal var projectId: UUID
    internal var fieldsToShow: AnyCodable?
    internal var name: String
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, data: WorkItemSearchQueryModel, projectId: UUID, fieldsToShow: AnyCodable? = nil, name: String, id: UUID, isDeleted: Bool) {
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.data = data
        self.projectId = projectId
        self.fieldsToShow = fieldsToShow
        self.name = name
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case data
        case projectId
        case fieldsToShow
        case name
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(data, forKey: .data)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(fieldsToShow, forKey: .fieldsToShow)
        try container.encode(name, forKey: .name)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

