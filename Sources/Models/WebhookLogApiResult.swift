//
// WebhookLogApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WebhookLogApiResult: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var isDeleted: Bool
    public var webHookName: String
    public var eventType: WebHookEventType
    public var webHookId: UUID
    public var requestBody: String?
    public var requestMeta: String?
    public var responseStatusCode: Int
    public var responseBody: String?
    public var responseMeta: String?
    public var projectId: UUID
    public var url: String
    public var requestType: RequestType
    public var createdDate: Date?
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?

    public init(id: UUID, isDeleted: Bool, webHookName: String, eventType: WebHookEventType, webHookId: UUID, requestBody: String? = nil, requestMeta: String? = nil, responseStatusCode: Int, responseBody: String? = nil, responseMeta: String? = nil, projectId: UUID, url: String, requestType: RequestType, createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil) {
        self.id = id
        self.isDeleted = isDeleted
        self.webHookName = webHookName
        self.eventType = eventType
        self.webHookId = webHookId
        self.requestBody = requestBody
        self.requestMeta = requestMeta
        self.responseStatusCode = responseStatusCode
        self.responseBody = responseBody
        self.responseMeta = responseMeta
        self.projectId = projectId
        self.url = url
        self.requestType = requestType
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case isDeleted
        case webHookName
        case eventType
        case webHookId
        case requestBody
        case requestMeta
        case responseStatusCode
        case responseBody
        case responseMeta
        case projectId
        case url
        case requestType
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(webHookName, forKey: .webHookName)
        try container.encode(eventType, forKey: .eventType)
        try container.encode(webHookId, forKey: .webHookId)
        try container.encodeIfPresent(requestBody, forKey: .requestBody)
        try container.encodeIfPresent(requestMeta, forKey: .requestMeta)
        try container.encode(responseStatusCode, forKey: .responseStatusCode)
        try container.encodeIfPresent(responseBody, forKey: .responseBody)
        try container.encodeIfPresent(responseMeta, forKey: .responseMeta)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(url, forKey: .url)
        try container.encode(requestType, forKey: .requestType)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WebhookLogApiResult: Identifiable {}
