//
// WebHookLogModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct WebHookLogModel: Codable, JSONEncodable, Hashable {

    internal var webHookName: String
    internal var eventType: WebHookEventTypeModel
    internal var webHookId: UUID
    internal var requestBody: String?
    internal var requestMeta: String?
    internal var responseStatusCode: Int
    internal var responseBody: String?
    internal var responseMeta: String?
    internal var projectId: UUID
    internal var url: String
    internal var requestType: RequestTypeModel
    internal var createdDate: Date?
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(webHookName: String, eventType: WebHookEventTypeModel, webHookId: UUID, requestBody: String? = nil, requestMeta: String? = nil, responseStatusCode: Int, responseBody: String? = nil, responseMeta: String? = nil, projectId: UUID, url: String, requestType: RequestTypeModel, createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, id: UUID, isDeleted: Bool) {
        self.webHookName = webHookName
        self.eventType = eventType
        self.webHookId = webHookId
        self.requestBody = requestBody
        self.requestMeta = requestMeta
        self.responseStatusCode = responseStatusCode
        self.responseBody = responseBody
        self.responseMeta = responseMeta
        self.projectId = projectId
        self.url = url
        self.requestType = requestType
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case webHookName
        case eventType
        case webHookId
        case requestBody
        case requestMeta
        case responseStatusCode
        case responseBody
        case responseMeta
        case projectId
        case url
        case requestType
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webHookName, forKey: .webHookName)
        try container.encode(eventType, forKey: .eventType)
        try container.encode(webHookId, forKey: .webHookId)
        try container.encodeIfPresent(requestBody, forKey: .requestBody)
        try container.encodeIfPresent(requestMeta, forKey: .requestMeta)
        try container.encode(responseStatusCode, forKey: .responseStatusCode)
        try container.encodeIfPresent(responseBody, forKey: .responseBody)
        try container.encodeIfPresent(responseMeta, forKey: .responseMeta)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(url, forKey: .url)
        try container.encode(requestType, forKey: .requestType)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

