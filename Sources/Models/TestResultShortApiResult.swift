//
// TestResultShortApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultShortApiResult: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var outcome: String
    public var status: TestStatusApiResult
    public var traces: String?
    public var failureType: String?
    public var message: String?
    public var testPoint: TestPointShortApiResult?
    public var createdDate: Date
    public var autoTest: AutoTestShortApiResult?
    public var attachments: [AttachmentApiResult]

    public init(id: UUID, outcome: String, status: TestStatusApiResult, traces: String? = nil, failureType: String? = nil, message: String? = nil, testPoint: TestPointShortApiResult? = nil, createdDate: Date, autoTest: AutoTestShortApiResult? = nil, attachments: [AttachmentApiResult]) {
        self.id = id
        self.outcome = outcome
        self.status = status
        self.traces = traces
        self.failureType = failureType
        self.message = message
        self.testPoint = testPoint
        self.createdDate = createdDate
        self.autoTest = autoTest
        self.attachments = attachments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case outcome
        case status
        case traces
        case failureType
        case message
        case testPoint
        case createdDate
        case autoTest
        case attachments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(outcome, forKey: .outcome)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(traces, forKey: .traces)
        try container.encodeIfPresent(failureType, forKey: .failureType)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(testPoint, forKey: .testPoint)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(autoTest, forKey: .autoTest)
        try container.encode(attachments, forKey: .attachments)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestResultShortApiResult: Identifiable {}
