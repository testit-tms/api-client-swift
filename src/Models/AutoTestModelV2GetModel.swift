//
// AutoTestModelV2GetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AutoTestModelV2GetModel: Codable, JSONEncodable, Hashable {

    /** This property is used to set autotest identifier from client system */
    internal var externalId: String
    internal var links: [LinkModel]?
    /** This property is used to link autotest with project */
    internal var projectId: UUID
    internal var name: String
    internal var namespace: String?
    internal var classname: String?
    internal var steps: [AutoTestStepModel]?
    internal var setup: [AutoTestStepModel]?
    internal var teardown: [AutoTestStepModel]?
    internal var globalId: Int64
    internal var createdDate: Date?
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var labels: [LabelShortModel]?
    internal var externalKey: String?
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(externalId: String, links: [LinkModel]? = nil, projectId: UUID, name: String, namespace: String? = nil, classname: String? = nil, steps: [AutoTestStepModel]? = nil, setup: [AutoTestStepModel]? = nil, teardown: [AutoTestStepModel]? = nil, globalId: Int64, createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, labels: [LabelShortModel]? = nil, externalKey: String? = nil, id: UUID, isDeleted: Bool) {
        self.externalId = externalId
        self.links = links
        self.projectId = projectId
        self.name = name
        self.namespace = namespace
        self.classname = classname
        self.steps = steps
        self.setup = setup
        self.teardown = teardown
        self.globalId = globalId
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.labels = labels
        self.externalKey = externalKey
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case externalId
        case links
        case projectId
        case name
        case namespace
        case classname
        case steps
        case setup
        case teardown
        case globalId
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case labels
        case externalKey
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(externalId, forKey: .externalId)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(classname, forKey: .classname)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(setup, forKey: .setup)
        try container.encodeIfPresent(teardown, forKey: .teardown)
        try container.encode(globalId, forKey: .globalId)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

