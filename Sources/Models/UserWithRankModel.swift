//
// UserWithRankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserWithRankModel: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var firstName: String
    public var lastName: String
    public var middleName: String
    public var userName: String
    public var displayName: String
    public var userType: String
    public var avatarUrl: String
    public var avatarMetadata: String
    public var isDeleted: Bool
    public var isDisabled: Bool
    public var providerId: UUID?
    public var isActiveStatusByEntity: Bool
    public var userRank: UserRankModel

    public init(id: UUID, firstName: String, lastName: String, middleName: String, userName: String, displayName: String, userType: String, avatarUrl: String, avatarMetadata: String, isDeleted: Bool, isDisabled: Bool, providerId: UUID? = nil, isActiveStatusByEntity: Bool, userRank: UserRankModel) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
        self.userName = userName
        self.displayName = displayName
        self.userType = userType
        self.avatarUrl = avatarUrl
        self.avatarMetadata = avatarMetadata
        self.isDeleted = isDeleted
        self.isDisabled = isDisabled
        self.providerId = providerId
        self.isActiveStatusByEntity = isActiveStatusByEntity
        self.userRank = userRank
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName
        case lastName
        case middleName
        case userName
        case displayName
        case userType
        case avatarUrl
        case avatarMetadata
        case isDeleted
        case isDisabled
        case providerId
        case isActiveStatusByEntity
        case userRank
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(middleName, forKey: .middleName)
        try container.encode(userName, forKey: .userName)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(userType, forKey: .userType)
        try container.encode(avatarUrl, forKey: .avatarUrl)
        try container.encode(avatarMetadata, forKey: .avatarMetadata)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(isDisabled, forKey: .isDisabled)
        try container.encodeIfPresent(providerId, forKey: .providerId)
        try container.encode(isActiveStatusByEntity, forKey: .isActiveStatusByEntity)
        try container.encode(userRank, forKey: .userRank)
    }
}

