//
// PublicTestRunModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct PublicTestRunModel: Codable, JSONEncodable, Hashable {

    internal var testRunId: UUID
    internal var testPlanId: UUID?
    internal var testPlanGlobalId: Int64
    internal var name: String
    internal var productName: String?
    internal var build: String?
    internal var configurations: [ConfigurationModel]
    internal var autoTests: [AutoTestModel]
    internal var testPoints: [PublicTestPointModel]
    internal var status: String
    internal var customParameters: [String: String]?
    internal var testRunDescription: String?

    internal init(testRunId: UUID, testPlanId: UUID? = nil, testPlanGlobalId: Int64, name: String, productName: String? = nil, build: String? = nil, configurations: [ConfigurationModel], autoTests: [AutoTestModel], testPoints: [PublicTestPointModel], status: String, customParameters: [String: String]? = nil, testRunDescription: String? = nil) {
        self.testRunId = testRunId
        self.testPlanId = testPlanId
        self.testPlanGlobalId = testPlanGlobalId
        self.name = name
        self.productName = productName
        self.build = build
        self.configurations = configurations
        self.autoTests = autoTests
        self.testPoints = testPoints
        self.status = status
        self.customParameters = customParameters
        self.testRunDescription = testRunDescription
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case testRunId
        case testPlanId
        case testPlanGlobalId
        case name
        case productName
        case build
        case configurations
        case autoTests
        case testPoints
        case status
        case customParameters
        case testRunDescription
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encode(testPlanGlobalId, forKey: .testPlanGlobalId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encode(configurations, forKey: .configurations)
        try container.encode(autoTests, forKey: .autoTests)
        try container.encode(testPoints, forKey: .testPoints)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(customParameters, forKey: .customParameters)
        try container.encodeIfPresent(testRunDescription, forKey: .testRunDescription)
    }
}

