//
// AutoTestResultHistorySelectApiModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AutoTestResultHistorySelectApiModel: Codable, JSONEncodable, Hashable {

    public static let outcomesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let statusCodesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let testPlanIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let testRunIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let configurationIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let launchSourceRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let userIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    @available(*, deprecated, message: "This property is deprecated.")
    public var outcomes: Set<AutotestResultOutcome>?
    public var statusCodes: Set<String>?
    public var testPlanIds: Set<UUID>?
    public var testRunIds: Set<UUID>?
    public var configurationIds: Set<UUID>?
    public var launchSource: String?
    public var userIds: Set<UUID>?
    public var duration: Int64RangeSelectorModel?

    public init(outcomes: Set<AutotestResultOutcome>? = nil, statusCodes: Set<String>? = nil, testPlanIds: Set<UUID>? = nil, testRunIds: Set<UUID>? = nil, configurationIds: Set<UUID>? = nil, launchSource: String? = nil, userIds: Set<UUID>? = nil, duration: Int64RangeSelectorModel? = nil) {
        self.outcomes = outcomes
        self.statusCodes = statusCodes
        self.testPlanIds = testPlanIds
        self.testRunIds = testRunIds
        self.configurationIds = configurationIds
        self.launchSource = launchSource
        self.userIds = userIds
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case outcomes
        case statusCodes
        case testPlanIds
        case testRunIds
        case configurationIds
        case launchSource
        case userIds
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(outcomes, forKey: .outcomes)
        try container.encodeIfPresent(statusCodes, forKey: .statusCodes)
        try container.encodeIfPresent(testPlanIds, forKey: .testPlanIds)
        try container.encodeIfPresent(testRunIds, forKey: .testRunIds)
        try container.encodeIfPresent(configurationIds, forKey: .configurationIds)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encodeIfPresent(userIds, forKey: .userIds)
        try container.encodeIfPresent(duration, forKey: .duration)
    }
}

