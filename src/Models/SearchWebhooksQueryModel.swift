//
// SearchWebhooksQueryModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct SearchWebhooksQueryModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let eventTypesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let methodsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Specifies a webhook name to search for */
    internal var name: String?
    /** Specifies a webhook event types to search for */
    internal var eventTypes: Set<WebHookEventTypeModel>?
    /** Specifies a webhook methods to search for */
    internal var methods: Set<RequestTypeModel>?
    /** Specifies a webhook project IDs to search for */
    internal var projectIds: Set<UUID>?
    /** Specifies a webhook deleted status to search for */
    internal var isEnabled: Bool?

    internal init(name: String? = nil, eventTypes: Set<WebHookEventTypeModel>? = nil, methods: Set<RequestTypeModel>? = nil, projectIds: Set<UUID>? = nil, isEnabled: Bool? = nil) {
        self.name = name
        self.eventTypes = eventTypes
        self.methods = methods
        self.projectIds = projectIds
        self.isEnabled = isEnabled
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case eventTypes
        case methods
        case projectIds
        case isEnabled
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(eventTypes, forKey: .eventTypes)
        try container.encodeIfPresent(methods, forKey: .methods)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
    }
}

