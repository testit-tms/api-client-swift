//
// TestRunV2GetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestRunV2GetModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var startedOn: Date?
    public var completedOn: Date?
    public var stateName: TestRunState
    /** This property is used to link test run with project */
    public var projectId: UUID
    /** This property is used to link test run with test plan */
    public var testPlanId: UUID?
    public var testResults: [TestResultV2GetModel]?
    public var createdDate: Date
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var createdByUserName: String?
    public var attachments: [AttachmentModel]
    public var links: [LinkModel]
    public var customParameters: [String: String]?
    public var webhooks: [NamedEntityModel]
    public var id: UUID
    public var name: String
    public var description: String?
    /** Once launch source is specified it cannot be updated */
    public var launchSource: String?

    public init(startedOn: Date? = nil, completedOn: Date? = nil, stateName: TestRunState, projectId: UUID, testPlanId: UUID? = nil, testResults: [TestResultV2GetModel]? = nil, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, createdByUserName: String? = nil, attachments: [AttachmentModel], links: [LinkModel], customParameters: [String: String]? = nil, webhooks: [NamedEntityModel], id: UUID, name: String, description: String? = nil, launchSource: String? = nil) {
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.stateName = stateName
        self.projectId = projectId
        self.testPlanId = testPlanId
        self.testResults = testResults
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdByUserName = createdByUserName
        self.attachments = attachments
        self.links = links
        self.customParameters = customParameters
        self.webhooks = webhooks
        self.id = id
        self.name = name
        self.description = description
        self.launchSource = launchSource
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startedOn
        case completedOn
        case stateName
        case projectId
        case testPlanId
        case testResults
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case createdByUserName
        case attachments
        case links
        case customParameters
        case webhooks
        case id
        case name
        case description
        case launchSource
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encode(stateName, forKey: .stateName)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(testResults, forKey: .testResults)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(createdByUserName, forKey: .createdByUserName)
        try container.encode(attachments, forKey: .attachments)
        try container.encode(links, forKey: .links)
        try container.encodeIfPresent(customParameters, forKey: .customParameters)
        try container.encode(webhooks, forKey: .webhooks)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
    }
}

