//
// TestPoint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPoint: Codable, JSONEncodable, Hashable {

    /** Unique ID of the entity */
    public var id: UUID
    /** Indicates if the entity is deleted */
    public var isDeleted: Bool
    public var testerId: UUID?
    public var iterationId: UUID
    public var workItemId: UUID?
    public var configurationId: UUID?
    public var testSuiteId: UUID
    @available(*, deprecated, message: "This property is deprecated.")
    public var status: String?
    public var statusModel: TestStatusApiResult?
    public var lastTestResultId: UUID?

    public init(id: UUID, isDeleted: Bool, testerId: UUID? = nil, iterationId: UUID, workItemId: UUID? = nil, configurationId: UUID? = nil, testSuiteId: UUID, status: String? = nil, statusModel: TestStatusApiResult? = nil, lastTestResultId: UUID? = nil) {
        self.id = id
        self.isDeleted = isDeleted
        self.testerId = testerId
        self.iterationId = iterationId
        self.workItemId = workItemId
        self.configurationId = configurationId
        self.testSuiteId = testSuiteId
        self.status = status
        self.statusModel = statusModel
        self.lastTestResultId = lastTestResultId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case isDeleted
        case testerId
        case iterationId
        case workItemId
        case configurationId
        case testSuiteId
        case status
        case statusModel
        case lastTestResultId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encode(iterationId, forKey: .iterationId)
        try container.encodeIfPresent(workItemId, forKey: .workItemId)
        try container.encodeIfPresent(configurationId, forKey: .configurationId)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusModel, forKey: .statusModel)
        try container.encodeIfPresent(lastTestResultId, forKey: .lastTestResultId)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestPoint: Identifiable {}
