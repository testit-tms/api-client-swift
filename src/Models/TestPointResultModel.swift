//
// TestPointResultModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPointResultModel: Codable, JSONEncodable, Hashable {

    internal var testPointId: UUID?
    internal var aggregatedOutcome: String?
    internal var workItemGlobalId: Int64?
    internal var workItemName: String?
    internal var configurationName: String?
    internal var testResults: [TestResultShortModel]?
    internal var attachments: [AttachmentModel]?

    internal init(testPointId: UUID? = nil, aggregatedOutcome: String? = nil, workItemGlobalId: Int64? = nil, workItemName: String? = nil, configurationName: String? = nil, testResults: [TestResultShortModel]? = nil, attachments: [AttachmentModel]? = nil) {
        self.testPointId = testPointId
        self.aggregatedOutcome = aggregatedOutcome
        self.workItemGlobalId = workItemGlobalId
        self.workItemName = workItemName
        self.configurationName = configurationName
        self.testResults = testResults
        self.attachments = attachments
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case testPointId
        case aggregatedOutcome
        case workItemGlobalId
        case workItemName
        case configurationName
        case testResults
        case attachments
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(testPointId, forKey: .testPointId)
        try container.encodeIfPresent(aggregatedOutcome, forKey: .aggregatedOutcome)
        try container.encodeIfPresent(workItemGlobalId, forKey: .workItemGlobalId)
        try container.encodeIfPresent(workItemName, forKey: .workItemName)
        try container.encodeIfPresent(configurationName, forKey: .configurationName)
        try container.encodeIfPresent(testResults, forKey: .testResults)
        try container.encodeIfPresent(attachments, forKey: .attachments)
    }
}

