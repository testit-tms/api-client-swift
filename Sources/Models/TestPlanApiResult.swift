//
// TestPlanApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPlanApiResult: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var name: String
    public var startDate: Date?
    public var endDate: Date?
    public var startedOn: Date?
    public var completedOn: Date?
    public var description: String?
    public var build: String?
    public var projectId: UUID?
    public var productName: String?
    public var status: TestPlanStatus
    public var tags: [TestPlanTagApiResult]
    public var globalId: Int64
    public var hasAutomaticDurationTimer: Bool?
    public var lockedById: UUID?
    public var lockedDate: Date?
    public var attributes: [String: AnyCodable]
    public var createdDate: Date?
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var isDeleted: Bool

    public init(id: UUID, name: String, startDate: Date? = nil, endDate: Date? = nil, startedOn: Date? = nil, completedOn: Date? = nil, description: String? = nil, build: String? = nil, projectId: UUID? = nil, productName: String? = nil, status: TestPlanStatus, tags: [TestPlanTagApiResult], globalId: Int64, hasAutomaticDurationTimer: Bool? = nil, lockedById: UUID? = nil, lockedDate: Date? = nil, attributes: [String: AnyCodable], createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, isDeleted: Bool) {
        self.id = id
        self.name = name
        self.startDate = startDate
        self.endDate = endDate
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.description = description
        self.build = build
        self.projectId = projectId
        self.productName = productName
        self.status = status
        self.tags = tags
        self.globalId = globalId
        self.hasAutomaticDurationTimer = hasAutomaticDurationTimer
        self.lockedById = lockedById
        self.lockedDate = lockedDate
        self.attributes = attributes
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case startDate
        case endDate
        case startedOn
        case completedOn
        case description
        case build
        case projectId
        case productName
        case status
        case tags
        case globalId
        case hasAutomaticDurationTimer
        case lockedById
        case lockedDate
        case attributes
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(projectId, forKey: .projectId)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encode(status, forKey: .status)
        try container.encode(tags, forKey: .tags)
        try container.encode(globalId, forKey: .globalId)
        try container.encodeIfPresent(hasAutomaticDurationTimer, forKey: .hasAutomaticDurationTimer)
        try container.encodeIfPresent(lockedById, forKey: .lockedById)
        try container.encodeIfPresent(lockedDate, forKey: .lockedDate)
        try container.encode(attributes, forKey: .attributes)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestPlanApiResult: Identifiable {}
