//
// WorkItemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct WorkItemModel: Codable, JSONEncodable, Hashable {

    static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400000, exclusiveMaximum: false, multipleOf: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** used for versioning changes in workitem */
    internal var versionId: UUID
    /** used for getting a median duration of all autotests related to this workitem */
    internal var medianDuration: Int64
    internal var isDeleted: Bool
    internal var projectId: UUID
    internal var entityTypeName: WorkItemEntityTypes
    internal var isAutomated: Bool
    internal var autoTests: [AutoTestModel]?
    internal var attachments: [AttachmentModel]?
    internal var sectionPreconditionSteps: [StepModel]?
    internal var sectionPostconditionSteps: [StepModel]?
    /** used for define chronology of workitem state in each version */
    internal var versionNumber: Int
    internal var iterations: [IterationModel]?
    internal var createdDate: Date
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var globalId: Int64
    internal var id: UUID
    internal var sectionId: UUID
    internal var description: String?
    internal var state: WorkItemStates
    internal var priority: WorkItemPriorityModel
    internal var steps: [StepModel]
    internal var preconditionSteps: [StepModel]
    internal var postconditionSteps: [StepModel]
    internal var duration: Int
    internal var attributes: [String: AnyCodable]
    internal var tags: [TagPutModel]
    internal var links: [LinkModel]
    internal var name: String

    internal init(versionId: UUID, medianDuration: Int64, isDeleted: Bool, projectId: UUID, entityTypeName: WorkItemEntityTypes, isAutomated: Bool, autoTests: [AutoTestModel]? = nil, attachments: [AttachmentModel]? = nil, sectionPreconditionSteps: [StepModel]? = nil, sectionPostconditionSteps: [StepModel]? = nil, versionNumber: Int, iterations: [IterationModel]? = nil, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, globalId: Int64, id: UUID, sectionId: UUID, description: String? = nil, state: WorkItemStates, priority: WorkItemPriorityModel, steps: [StepModel], preconditionSteps: [StepModel], postconditionSteps: [StepModel], duration: Int, attributes: [String: AnyCodable], tags: [TagPutModel], links: [LinkModel], name: String) {
        self.versionId = versionId
        self.medianDuration = medianDuration
        self.isDeleted = isDeleted
        self.projectId = projectId
        self.entityTypeName = entityTypeName
        self.isAutomated = isAutomated
        self.autoTests = autoTests
        self.attachments = attachments
        self.sectionPreconditionSteps = sectionPreconditionSteps
        self.sectionPostconditionSteps = sectionPostconditionSteps
        self.versionNumber = versionNumber
        self.iterations = iterations
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.globalId = globalId
        self.id = id
        self.sectionId = sectionId
        self.description = description
        self.state = state
        self.priority = priority
        self.steps = steps
        self.preconditionSteps = preconditionSteps
        self.postconditionSteps = postconditionSteps
        self.duration = duration
        self.attributes = attributes
        self.tags = tags
        self.links = links
        self.name = name
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case versionId
        case medianDuration
        case isDeleted
        case projectId
        case entityTypeName
        case isAutomated
        case autoTests
        case attachments
        case sectionPreconditionSteps
        case sectionPostconditionSteps
        case versionNumber
        case iterations
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case globalId
        case id
        case sectionId
        case description
        case state
        case priority
        case steps
        case preconditionSteps
        case postconditionSteps
        case duration
        case attributes
        case tags
        case links
        case name
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(versionId, forKey: .versionId)
        try container.encode(medianDuration, forKey: .medianDuration)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(sectionPreconditionSteps, forKey: .sectionPreconditionSteps)
        try container.encodeIfPresent(sectionPostconditionSteps, forKey: .sectionPostconditionSteps)
        try container.encode(versionNumber, forKey: .versionNumber)
        try container.encodeIfPresent(iterations, forKey: .iterations)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(id, forKey: .id)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(steps, forKey: .steps)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(duration, forKey: .duration)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(links, forKey: .links)
        try container.encode(name, forKey: .name)
    }
}

