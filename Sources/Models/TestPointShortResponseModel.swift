//
// TestPointShortResponseModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPointShortResponseModel: Codable, JSONEncodable, Hashable {

    /** Unique ID of the test point */
    public var id: UUID
    /** Creation date of the test point */
    public var createdDate: Date
    /** Unique ID of the test point creator */
    public var createdById: UUID
    /** Last modification date of the test point */
    public var modifiedDate: Date?
    /** Unique ID of the test point last editor */
    public var modifiedById: UUID?
    /** Unique ID of the test point assigned user */
    public var testerId: UUID?
    /** Collection of the test point parameters */
    public var parameters: [String: String]?
    /** Collection of attributes of work item the test point represents */
    public var attributes: [String: AnyCodable]
    /** Collection of the test point tags */
    public var tags: [String]
    /** Collection of the test point links */
    public var links: [String]
    /** Unique ID of test suite the test point assigned to */
    public var testSuiteId: UUID
    /** Name of the test suite */
    public var testSuiteName: String
    /** Unique ID of work item the test point represents */
    public var workItemId: UUID
    /** Global ID of work item the test point represents */
    public var workItemGlobalId: Int64
    /** Unique ID of work item version the test point represents */
    public var workItemVersionId: UUID
    /** Number of work item version the test point represents */
    public var workItemVersionNumber: Int
    /** Median duration of work item the test point represents */
    public var workItemMedianDuration: Int64?
    /** Status of the test point */
    @available(*, deprecated, message: "This property is deprecated.")
    public var status: TestPointStatus
    /** Status of the test point */
    public var statusModel: TestStatusApiResult
    /** Priority of the test point */
    public var priority: WorkItemPriorityModel
    /** Source type of the test point */
    public var sourceType: WorkItemSourceTypeModel
    /** Indicates if the test point represents an autotest */
    public var isAutomated: Bool
    /** Name of the test point */
    public var name: String
    /** Unique ID of the test point configuration */
    public var configurationId: UUID
    /** Duration of the test point */
    public var duration: Int
    /** Unique ID of section where work item the test point represents is located */
    public var sectionId: UUID
    /** Name of section where work item the test point represents is located */
    public var sectionName: String?
    /** Unique ID of the test point project */
    public var projectId: UUID
    /** Model of the test point last test result */
    public var lastTestResult: LastTestResultModel?
    /** Unique ID of work item iteration the test point represents */
    public var iterationId: UUID
    /** Work item state */
    public var workItemState: WorkItemState
    /** Unique ID of the work item creator */
    public var workItemCreatedById: UUID
    /** Creation date of work item */
    public var workItemCreatedDate: Date
    /** Unique ID of the work item last editor */
    public var workItemModifiedById: UUID?
    /** Modified date of work item */
    public var workItemModifiedDate: Date?

    public init(id: UUID, createdDate: Date, createdById: UUID, modifiedDate: Date? = nil, modifiedById: UUID? = nil, testerId: UUID? = nil, parameters: [String: String]? = nil, attributes: [String: AnyCodable], tags: [String], links: [String], testSuiteId: UUID, testSuiteName: String, workItemId: UUID, workItemGlobalId: Int64, workItemVersionId: UUID, workItemVersionNumber: Int, workItemMedianDuration: Int64? = nil, status: TestPointStatus, statusModel: TestStatusApiResult, priority: WorkItemPriorityModel, sourceType: WorkItemSourceTypeModel, isAutomated: Bool, name: String, configurationId: UUID, duration: Int, sectionId: UUID, sectionName: String? = nil, projectId: UUID, lastTestResult: LastTestResultModel? = nil, iterationId: UUID, workItemState: WorkItemState, workItemCreatedById: UUID, workItemCreatedDate: Date, workItemModifiedById: UUID? = nil, workItemModifiedDate: Date? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.createdById = createdById
        self.modifiedDate = modifiedDate
        self.modifiedById = modifiedById
        self.testerId = testerId
        self.parameters = parameters
        self.attributes = attributes
        self.tags = tags
        self.links = links
        self.testSuiteId = testSuiteId
        self.testSuiteName = testSuiteName
        self.workItemId = workItemId
        self.workItemGlobalId = workItemGlobalId
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.workItemMedianDuration = workItemMedianDuration
        self.status = status
        self.statusModel = statusModel
        self.priority = priority
        self.sourceType = sourceType
        self.isAutomated = isAutomated
        self.name = name
        self.configurationId = configurationId
        self.duration = duration
        self.sectionId = sectionId
        self.sectionName = sectionName
        self.projectId = projectId
        self.lastTestResult = lastTestResult
        self.iterationId = iterationId
        self.workItemState = workItemState
        self.workItemCreatedById = workItemCreatedById
        self.workItemCreatedDate = workItemCreatedDate
        self.workItemModifiedById = workItemModifiedById
        self.workItemModifiedDate = workItemModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case createdById
        case modifiedDate
        case modifiedById
        case testerId
        case parameters
        case attributes
        case tags
        case links
        case testSuiteId
        case testSuiteName
        case workItemId
        case workItemGlobalId
        case workItemVersionId
        case workItemVersionNumber
        case workItemMedianDuration
        case status
        case statusModel
        case priority
        case sourceType
        case isAutomated
        case name
        case configurationId
        case duration
        case sectionId
        case sectionName
        case projectId
        case lastTestResult
        case iterationId
        case workItemState
        case workItemCreatedById
        case workItemCreatedDate
        case workItemModifiedById
        case workItemModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(links, forKey: .links)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encode(testSuiteName, forKey: .testSuiteName)
        try container.encode(workItemId, forKey: .workItemId)
        try container.encode(workItemGlobalId, forKey: .workItemGlobalId)
        try container.encode(workItemVersionId, forKey: .workItemVersionId)
        try container.encode(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encodeIfPresent(workItemMedianDuration, forKey: .workItemMedianDuration)
        try container.encode(status, forKey: .status)
        try container.encode(statusModel, forKey: .statusModel)
        try container.encode(priority, forKey: .priority)
        try container.encode(sourceType, forKey: .sourceType)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(name, forKey: .name)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(duration, forKey: .duration)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(sectionName, forKey: .sectionName)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(lastTestResult, forKey: .lastTestResult)
        try container.encode(iterationId, forKey: .iterationId)
        try container.encode(workItemState, forKey: .workItemState)
        try container.encode(workItemCreatedById, forKey: .workItemCreatedById)
        try container.encode(workItemCreatedDate, forKey: .workItemCreatedDate)
        try container.encodeIfPresent(workItemModifiedById, forKey: .workItemModifiedById)
        try container.encodeIfPresent(workItemModifiedDate, forKey: .workItemModifiedDate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestPointShortResponseModel: Identifiable {}
