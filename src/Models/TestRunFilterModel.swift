//
// TestRunFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestRunFilterModel: Codable, JSONEncodable, Hashable {

    static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let statesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Specifies a test run project IDs to search for */
    internal var projectIds: Set<UUID>?
    /** Specifies test run name */
    internal var name: String?
    /** Specifies a test run states to search for */
    internal var states: Set<TestRunState>?
    /** Specifies a test run range of created date to search for */
    internal var createdDate: DateTimeRangeSelectorModel?
    /** Specifies a test run range of started date to search for */
    internal var startedDate: DateTimeRangeSelectorModel?
    /** Specifies a test run creator IDs to search for */
    internal var createdByIds: Set<UUID>?
    /** Specifies a test run last editor IDs to search for */
    internal var modifiedByIds: Set<UUID>?
    /** Specifies a test run deleted status to search for */
    internal var isDeleted: Bool?
    /** Number of autoTests run in the test run */
    internal var autoTestsCount: Int32RangeSelectorModel?
    /** Specifies test results outcomes */
    internal var testResultsOutcome: [TestResultOutcome]?
    /** Specifies failure categories */
    internal var failureCategory: [FailureCategoryModel]?
    /** Specifies a test run range of completed date to search for */
    internal var completedDate: DateTimeRangeSelectorModel?

    internal init(projectIds: Set<UUID>? = nil, name: String? = nil, states: Set<TestRunState>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, startedDate: DateTimeRangeSelectorModel? = nil, createdByIds: Set<UUID>? = nil, modifiedByIds: Set<UUID>? = nil, isDeleted: Bool? = nil, autoTestsCount: Int32RangeSelectorModel? = nil, testResultsOutcome: [TestResultOutcome]? = nil, failureCategory: [FailureCategoryModel]? = nil, completedDate: DateTimeRangeSelectorModel? = nil) {
        self.projectIds = projectIds
        self.name = name
        self.states = states
        self.createdDate = createdDate
        self.startedDate = startedDate
        self.createdByIds = createdByIds
        self.modifiedByIds = modifiedByIds
        self.isDeleted = isDeleted
        self.autoTestsCount = autoTestsCount
        self.testResultsOutcome = testResultsOutcome
        self.failureCategory = failureCategory
        self.completedDate = completedDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case projectIds
        case name
        case states
        case createdDate
        case startedDate
        case createdByIds
        case modifiedByIds
        case isDeleted
        case autoTestsCount
        case testResultsOutcome
        case failureCategory
        case completedDate
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(startedDate, forKey: .startedDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(autoTestsCount, forKey: .autoTestsCount)
        try container.encodeIfPresent(testResultsOutcome, forKey: .testResultsOutcome)
        try container.encodeIfPresent(failureCategory, forKey: .failureCategory)
        try container.encodeIfPresent(completedDate, forKey: .completedDate)
    }
}

