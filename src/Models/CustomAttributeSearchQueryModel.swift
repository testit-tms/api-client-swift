//
// CustomAttributeSearchQueryModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CustomAttributeSearchQueryModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let customAttributeIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let customAttributeTypesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Name of attribute */
    internal var name: String?
    /** Unique IDs of projects where attribute is in use */
    internal var projectIds: Set<UUID>?
    /** Unique IDs of attributes for search restriction */
    internal var customAttributeIds: Set<UUID>?
    /** Collection of attribute types */
    internal var customAttributeTypes: Set<CustomAttributeTypesEnum>?
    /** Indicates whether the attribute is available across all projects */
    internal var isGlobal: Bool?
    /** Indicates whether the attribute is deleted */
    internal var isDeleted: Bool?

    internal init(name: String? = nil, projectIds: Set<UUID>? = nil, customAttributeIds: Set<UUID>? = nil, customAttributeTypes: Set<CustomAttributeTypesEnum>? = nil, isGlobal: Bool? = nil, isDeleted: Bool? = nil) {
        self.name = name
        self.projectIds = projectIds
        self.customAttributeIds = customAttributeIds
        self.customAttributeTypes = customAttributeTypes
        self.isGlobal = isGlobal
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case projectIds
        case customAttributeIds
        case customAttributeTypes
        case isGlobal
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(customAttributeIds, forKey: .customAttributeIds)
        try container.encodeIfPresent(customAttributeTypes, forKey: .customAttributeTypes)
        try container.encodeIfPresent(isGlobal, forKey: .isGlobal)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
    }
}

