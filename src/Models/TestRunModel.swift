//
// TestRunModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestRunModel: Codable, JSONEncodable, Hashable {

    static let buildRule = StringRule(minLength: 0, maxLength: 450, pattern: nil)
    internal var autoTests: [AutoTestModel]?
    internal var autoTestsCount: Int
    internal var testSuiteIds: [UUID]?
    internal var isAutomated: Bool
    internal var analytic: TestRunAnalyticResultModel
    internal var testResults: [TestResultModel]?
    internal var testPlan: TestPlanModel?
    internal var createdDate: Date
    internal var modifiedDate: Date?
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var createdByUserName: String?
    internal var startedDate: Date?
    internal var completedDate: Date?
    internal var build: String
    internal var description: String
    internal var stateName: TestRunState
    internal var projectId: UUID
    internal var testPlanId: UUID?
    internal var runByUserId: UUID?
    internal var stoppedByUserId: UUID?
    internal var name: String
    internal var launchSource: String
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(autoTests: [AutoTestModel]? = nil, autoTestsCount: Int, testSuiteIds: [UUID]? = nil, isAutomated: Bool, analytic: TestRunAnalyticResultModel, testResults: [TestResultModel]? = nil, testPlan: TestPlanModel? = nil, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, createdByUserName: String? = nil, startedDate: Date? = nil, completedDate: Date? = nil, build: String, description: String, stateName: TestRunState, projectId: UUID, testPlanId: UUID? = nil, runByUserId: UUID? = nil, stoppedByUserId: UUID? = nil, name: String, launchSource: String, id: UUID, isDeleted: Bool) {
        self.autoTests = autoTests
        self.autoTestsCount = autoTestsCount
        self.testSuiteIds = testSuiteIds
        self.isAutomated = isAutomated
        self.analytic = analytic
        self.testResults = testResults
        self.testPlan = testPlan
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdByUserName = createdByUserName
        self.startedDate = startedDate
        self.completedDate = completedDate
        self.build = build
        self.description = description
        self.stateName = stateName
        self.projectId = projectId
        self.testPlanId = testPlanId
        self.runByUserId = runByUserId
        self.stoppedByUserId = stoppedByUserId
        self.name = name
        self.launchSource = launchSource
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case autoTests
        case autoTestsCount
        case testSuiteIds
        case isAutomated
        case analytic
        case testResults
        case testPlan
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case createdByUserName
        case startedDate
        case completedDate
        case build
        case description
        case stateName
        case projectId
        case testPlanId
        case runByUserId
        case stoppedByUserId
        case name
        case launchSource
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
        try container.encode(autoTestsCount, forKey: .autoTestsCount)
        try container.encodeIfPresent(testSuiteIds, forKey: .testSuiteIds)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(analytic, forKey: .analytic)
        try container.encodeIfPresent(testResults, forKey: .testResults)
        try container.encodeIfPresent(testPlan, forKey: .testPlan)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(createdByUserName, forKey: .createdByUserName)
        try container.encodeIfPresent(startedDate, forKey: .startedDate)
        try container.encodeIfPresent(completedDate, forKey: .completedDate)
        try container.encode(build, forKey: .build)
        try container.encode(description, forKey: .description)
        try container.encode(stateName, forKey: .stateName)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(runByUserId, forKey: .runByUserId)
        try container.encodeIfPresent(stoppedByUserId, forKey: .stoppedByUserId)
        try container.encode(name, forKey: .name)
        try container.encode(launchSource, forKey: .launchSource)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

