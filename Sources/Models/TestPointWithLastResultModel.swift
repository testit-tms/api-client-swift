//
// TestPointWithLastResultModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPointWithLastResultModel: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var workItemName: String?
    public var isAutomated: Bool
    public var testerId: UUID?
    public var workItemId: UUID
    public var configurationId: UUID?
    public var testSuiteId: UUID
    public var lastTestResult: LastTestResultModel?
    public var status: String?
    public var workItemGlobalId: Int64?
    public var workItemEntityTypeName: String?
    public var sectionId: UUID
    public var sectionName: String?
    public var createdDate: Date?
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var attributes: [String: AnyCodable]?
    public var tagNames: [String]?
    public var duration: Int
    public var priority: WorkItemPriorityModel
    public var testSuiteNameBreadCrumbs: [String]?
    public var groupCount: Int?
    public var iteration: IterationModel?

    public init(id: UUID, workItemName: String? = nil, isAutomated: Bool, testerId: UUID? = nil, workItemId: UUID, configurationId: UUID? = nil, testSuiteId: UUID, lastTestResult: LastTestResultModel? = nil, status: String? = nil, workItemGlobalId: Int64? = nil, workItemEntityTypeName: String? = nil, sectionId: UUID, sectionName: String? = nil, createdDate: Date? = nil, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, attributes: [String: AnyCodable]? = nil, tagNames: [String]? = nil, duration: Int, priority: WorkItemPriorityModel, testSuiteNameBreadCrumbs: [String]? = nil, groupCount: Int? = nil, iteration: IterationModel? = nil) {
        self.id = id
        self.workItemName = workItemName
        self.isAutomated = isAutomated
        self.testerId = testerId
        self.workItemId = workItemId
        self.configurationId = configurationId
        self.testSuiteId = testSuiteId
        self.lastTestResult = lastTestResult
        self.status = status
        self.workItemGlobalId = workItemGlobalId
        self.workItemEntityTypeName = workItemEntityTypeName
        self.sectionId = sectionId
        self.sectionName = sectionName
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.attributes = attributes
        self.tagNames = tagNames
        self.duration = duration
        self.priority = priority
        self.testSuiteNameBreadCrumbs = testSuiteNameBreadCrumbs
        self.groupCount = groupCount
        self.iteration = iteration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case workItemName
        case isAutomated
        case testerId
        case workItemId
        case configurationId
        case testSuiteId
        case lastTestResult
        case status
        case workItemGlobalId
        case workItemEntityTypeName
        case sectionId
        case sectionName
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case attributes
        case tagNames
        case duration
        case priority
        case testSuiteNameBreadCrumbs
        case groupCount
        case iteration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(workItemName, forKey: .workItemName)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encode(workItemId, forKey: .workItemId)
        try container.encodeIfPresent(configurationId, forKey: .configurationId)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encodeIfPresent(lastTestResult, forKey: .lastTestResult)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(workItemGlobalId, forKey: .workItemGlobalId)
        try container.encodeIfPresent(workItemEntityTypeName, forKey: .workItemEntityTypeName)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(sectionName, forKey: .sectionName)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(tagNames, forKey: .tagNames)
        try container.encode(duration, forKey: .duration)
        try container.encode(priority, forKey: .priority)
        try container.encodeIfPresent(testSuiteNameBreadCrumbs, forKey: .testSuiteNameBreadCrumbs)
        try container.encodeIfPresent(groupCount, forKey: .groupCount)
        try container.encodeIfPresent(iteration, forKey: .iteration)
    }
}

