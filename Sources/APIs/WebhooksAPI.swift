//
// WebhooksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WebhooksAPI {

    /**

     - parameter webhooksDeleteApiModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksDelete(webhooksDeleteApiModel: WebhooksDeleteApiModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksDeleteWithRequestBuilder(webhooksDeleteApiModel: webhooksDeleteApiModel).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/webhooks
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter webhooksDeleteApiModel: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2WebhooksDeleteWithRequestBuilder(webhooksDeleteApiModel: WebhooksDeleteApiModel? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v2/webhooks"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhooksDeleteApiModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all webhooks
     
     - parameter projectId: (query) Project unique ID (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksGet(projectId: UUID? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [WebHookModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksGetWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all webhooks
     - GET /api/v2/webhooks
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter projectId: (query) Project unique ID (optional)
     - returns: RequestBuilder<[WebHookModel]> 
     */
    open class func apiV2WebhooksGetWithRequestBuilder(projectId: UUID? = nil) -> RequestBuilder<[WebHookModel]> {
        let localVariablePath = "/api/v2/webhooks"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "projectId": (wrappedValue: projectId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WebHookModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete webhook by ID
     
     - parameter id: (path) Webhook unique ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksIdDelete(id: UUID, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete webhook by ID
     - DELETE /api/v2/webhooks/{id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Webhook unique ID 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2WebhooksIdDeleteWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/webhooks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TestitApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook by ID
     
     - parameter id: (path) Webhook unique ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksIdGet(id: UUID, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebHookModel?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get webhook by ID
     - GET /api/v2/webhooks/{id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Webhook unique ID 
     - returns: RequestBuilder<WebHookModel> 
     */
    open class func apiV2WebhooksIdGetWithRequestBuilder(id: UUID) -> RequestBuilder<WebHookModel> {
        var localVariablePath = "/api/v2/webhooks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebHookModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit webhook by ID
     
     - parameter id: (path) Webhook unique ID 
     - parameter webHookPostModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksIdPut(id: UUID, webHookPostModel: WebHookPostModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebHookModel?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksIdPutWithRequestBuilder(id: id, webHookPostModel: webHookPostModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit webhook by ID
     - PUT /api/v2/webhooks/{id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter id: (path) Webhook unique ID 
     - parameter webHookPostModel: (body)  (optional)
     - returns: RequestBuilder<WebHookModel> 
     */
    open class func apiV2WebhooksIdPutWithRequestBuilder(id: UUID, webHookPostModel: WebHookPostModel? = nil) -> RequestBuilder<WebHookModel> {
        var localVariablePath = "/api/v2/webhooks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webHookPostModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebHookModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create webhook
     
     - parameter webHookPostModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksPost(webHookPostModel: WebHookPostModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebHookModel?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksPostWithRequestBuilder(webHookPostModel: webHookPostModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create webhook
     - POST /api/v2/webhooks
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter webHookPostModel: (body)  (optional)
     - returns: RequestBuilder<WebHookModel> 
     */
    open class func apiV2WebhooksPostWithRequestBuilder(webHookPostModel: WebHookPostModel? = nil) -> RequestBuilder<WebHookModel> {
        let localVariablePath = "/api/v2/webhooks"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webHookPostModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebHookModel>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter webhooksUpdateApiModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksPut(webhooksUpdateApiModel: WebhooksUpdateApiModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhooksUpdateApiResult?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksPutWithRequestBuilder(webhooksUpdateApiModel: webhooksUpdateApiModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/webhooks
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter webhooksUpdateApiModel: (body)  (optional)
     - returns: RequestBuilder<WebhooksUpdateApiResult> 
     */
    open class func apiV2WebhooksPutWithRequestBuilder(webhooksUpdateApiModel: WebhooksUpdateApiModel? = nil) -> RequestBuilder<WebhooksUpdateApiResult> {
        let localVariablePath = "/api/v2/webhooks"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhooksUpdateApiModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhooksUpdateApiResult>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search for webhooks
     
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter searchWebhooksQueryModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksSearchPost(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, searchWebhooksQueryModel: SearchWebhooksQueryModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [WebHookModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksSearchPostWithRequestBuilder(skip: skip, take: take, orderBy: orderBy, searchField: searchField, searchValue: searchValue, searchWebhooksQueryModel: searchWebhooksQueryModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for webhooks
     - POST /api/v2/webhooks/search
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - responseHeaders: [Pagination-Skip(Int), Pagination-Take(Int), Pagination-Pages(Int), Pagination-Total-Items(Int)]
     - parameter skip: (query) Amount of items to be skipped (offset) (optional)
     - parameter take: (query) Amount of items to be taken (limit) (optional)
     - parameter orderBy: (query) SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC) (optional)
     - parameter searchField: (query) Property name for searching (optional)
     - parameter searchValue: (query) Value for searching (optional)
     - parameter searchWebhooksQueryModel: (body)  (optional)
     - returns: RequestBuilder<[WebHookModel]> 
     */
    open class func apiV2WebhooksSearchPostWithRequestBuilder(skip: Int? = nil, take: Int? = nil, orderBy: String? = nil, searchField: String? = nil, searchValue: String? = nil, searchWebhooksQueryModel: SearchWebhooksQueryModel? = nil) -> RequestBuilder<[WebHookModel]> {
        let localVariablePath = "/api/v2/webhooks/search"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchWebhooksQueryModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "Take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "SearchField": (wrappedValue: searchField?.encodeToJSON(), isExplode: true),
            "SearchValue": (wrappedValue: searchValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WebHookModel]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get special variables for webhook event type
     
     - parameter eventType: (query) Webhook event type (optional)
     - parameter variablesType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksSpecialVariablesGet(eventType: WebHookEventType? = nil, variablesType: WebhookVariablesType? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksSpecialVariablesGetWithRequestBuilder(eventType: eventType, variablesType: variablesType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get special variables for webhook event type
     - GET /api/v2/webhooks/specialVariables
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter eventType: (query) Webhook event type (optional)
     - parameter variablesType: (query)  (optional)
     - returns: RequestBuilder<[String]> 
     */
    open class func apiV2WebhooksSpecialVariablesGetWithRequestBuilder(eventType: WebHookEventType? = nil, variablesType: WebhookVariablesType? = nil) -> RequestBuilder<[String]> {
        let localVariablePath = "/api/v2/webhooks/specialVariables"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventType": (wrappedValue: eventType?.encodeToJSON(), isExplode: true),
            "variablesType": (wrappedValue: variablesType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Test webhook's url
     
     - parameter webHookTestModel: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2WebhooksTestPost(webHookTestModel: WebHookTestModel? = nil, apiResponseQueue: DispatchQueue = TestitApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebhookResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2WebhooksTestPostWithRequestBuilder(webHookTestModel: webHookTestModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Test webhook's url
     - POST /api/v2/webhooks/test
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer or PrivateToken
     - parameter webHookTestModel: (body)  (optional)
     - returns: RequestBuilder<WebhookResponse> 
     */
    open class func apiV2WebhooksTestPostWithRequestBuilder(webHookTestModel: WebHookTestModel? = nil) -> RequestBuilder<WebhookResponse> {
        let localVariablePath = "/api/v2/webhooks/test"
        let localVariableURLString = TestitApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webHookTestModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookResponse>.Type = TestitApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
