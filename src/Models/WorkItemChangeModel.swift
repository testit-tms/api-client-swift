//
// WorkItemChangeModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct WorkItemChangeModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var workItemId: UUID
    internal var oldVersionId: UUID
    internal var newVersionId: UUID
    internal var workItemChangedFields: WorkItemChangedFieldsViewModel
    internal var createdById: UUID
    internal var createdDate: Date?

    internal init(id: UUID, workItemId: UUID, oldVersionId: UUID, newVersionId: UUID, workItemChangedFields: WorkItemChangedFieldsViewModel, createdById: UUID, createdDate: Date? = nil) {
        self.id = id
        self.workItemId = workItemId
        self.oldVersionId = oldVersionId
        self.newVersionId = newVersionId
        self.workItemChangedFields = workItemChangedFields
        self.createdById = createdById
        self.createdDate = createdDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case workItemId
        case oldVersionId
        case newVersionId
        case workItemChangedFields
        case createdById
        case createdDate
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(workItemId, forKey: .workItemId)
        try container.encode(oldVersionId, forKey: .oldVersionId)
        try container.encode(newVersionId, forKey: .newVersionId)
        try container.encode(workItemChangedFields, forKey: .workItemChangedFields)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
    }
}

