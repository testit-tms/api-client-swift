//
// TestPlanLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPlanLink: Codable, JSONEncodable, Hashable {

    internal var bugLink: LinkModel?
    internal var workItemGlobalId: Int64?
    internal var workItemName: String?
    internal var configurationName: String?
    internal var createdById: UUID?
    internal var comment: String?
    internal var info: ExternalLinkModel?

    internal init(bugLink: LinkModel? = nil, workItemGlobalId: Int64? = nil, workItemName: String? = nil, configurationName: String? = nil, createdById: UUID? = nil, comment: String? = nil, info: ExternalLinkModel? = nil) {
        self.bugLink = bugLink
        self.workItemGlobalId = workItemGlobalId
        self.workItemName = workItemName
        self.configurationName = configurationName
        self.createdById = createdById
        self.comment = comment
        self.info = info
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case bugLink
        case workItemGlobalId
        case workItemName
        case configurationName
        case createdById
        case comment
        case info
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bugLink, forKey: .bugLink)
        try container.encodeIfPresent(workItemGlobalId, forKey: .workItemGlobalId)
        try container.encodeIfPresent(workItemName, forKey: .workItemName)
        try container.encodeIfPresent(configurationName, forKey: .configurationName)
        try container.encodeIfPresent(createdById, forKey: .createdById)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(info, forKey: .info)
    }
}

