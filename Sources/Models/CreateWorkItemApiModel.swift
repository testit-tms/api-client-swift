//
// CreateWorkItemApiModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateWorkItemApiModel: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let durationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400000, exclusiveMaximum: false, multipleOf: nil)
    /** Unique identifier of the project */
    public var projectId: UUID
    /** Unique identifier of the section within a project */
    public var sectionId: UUID?
    /** Name of the work item */
    public var name: String
    /** Description of the work item */
    public var description: String?
    /** Type of entity associated with this work item */
    public var entityTypeName: WorkItemEntityTypeApiModel
    /** Duration of the work item in milliseconds */
    public var duration: Int
    /** State of the work item */
    public var state: WorkItemStateApiModel
    /** Priority level of the work item */
    public var priority: WorkItemPriorityApiModel
    /** Set of custom attributes associated with the work item */
    public var attributes: [String: AnyCodable]
    /** Set of tags applied to the work item */
    public var tags: [TagModel]
    /** Set of precondition steps that need to be executed before starting the main steps */
    public var preconditionSteps: [CreateStepApiModel]
    /** Main steps or actions defined for the work item */
    public var steps: [CreateStepApiModel]
    /** Set of postcondition steps that are executed after completing the main steps */
    public var postconditionSteps: [CreateStepApiModel]
    /** Associated iterations linked to the work item */
    public var iterations: [AssignIterationApiModel]?
    /** Automated tests associated with the work item */
    public var autoTests: [AutoTestIdModel]?
    /** Files attached to the work item */
    public var attachments: [AssignAttachmentApiModel]?
    /** Set of links related to the work item */
    public var links: [CreateLinkApiModel]

    public init(projectId: UUID, sectionId: UUID? = nil, name: String, description: String? = nil, entityTypeName: WorkItemEntityTypeApiModel, duration: Int, state: WorkItemStateApiModel, priority: WorkItemPriorityApiModel, attributes: [String: AnyCodable], tags: [TagModel], preconditionSteps: [CreateStepApiModel], steps: [CreateStepApiModel], postconditionSteps: [CreateStepApiModel], iterations: [AssignIterationApiModel]? = nil, autoTests: [AutoTestIdModel]? = nil, attachments: [AssignAttachmentApiModel]? = nil, links: [CreateLinkApiModel]) {
        self.projectId = projectId
        self.sectionId = sectionId
        self.name = name
        self.description = description
        self.entityTypeName = entityTypeName
        self.duration = duration
        self.state = state
        self.priority = priority
        self.attributes = attributes
        self.tags = tags
        self.preconditionSteps = preconditionSteps
        self.steps = steps
        self.postconditionSteps = postconditionSteps
        self.iterations = iterations
        self.autoTests = autoTests
        self.attachments = attachments
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectId
        case sectionId
        case name
        case description
        case entityTypeName
        case duration
        case state
        case priority
        case attributes
        case tags
        case preconditionSteps
        case steps
        case postconditionSteps
        case iterations
        case autoTests
        case attachments
        case links
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(sectionId, forKey: .sectionId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encode(duration, forKey: .duration)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(steps, forKey: .steps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encodeIfPresent(iterations, forKey: .iterations)
        try container.encodeIfPresent(autoTests, forKey: .autoTests)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encode(links, forKey: .links)
    }
}

