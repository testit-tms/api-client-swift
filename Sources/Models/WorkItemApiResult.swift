//
// WorkItemApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WorkItemApiResult: Codable, JSONEncodable, Hashable {

    /** Unique identifier of the work item */
    public var id: UUID
    /** Global identifier of the work item */
    public var globalId: Int64
    /** Version identifier of the work item */
    public var versionId: UUID
    /** Version number of the work item */
    public var versionNumber: Int
    /** Unique identifier of the project */
    public var projectId: UUID
    /** Unique identifier of the section within a project */
    public var sectionId: UUID
    /** Name of the work item */
    public var name: String
    /** Description of the work item */
    public var description: String?
    /** Source type of the work item */
    public var sourceType: WorkItemSourceTypeApiModel
    /** Type of entity associated with this work item */
    public var entityTypeName: WorkItemEntityTypeApiModel
    /** Duration of the work item in milliseconds */
    public var duration: Int
    /** Median duration of the work item in milliseconds */
    public var medianDuration: Int64
    /** State of the work item */
    public var state: WorkItemStateApiModel
    /** Priority level of the work item */
    public var priority: WorkItemPriorityApiModel
    public var isAutomated: Bool
    /** Set of custom attributes associated with the work item */
    public var attributes: [String: AnyCodable]
    /** Set of tags applied to the work item */
    public var tags: [TagModel]
    /** Set of section precondition steps that need to be executed before starting the work item steps */
    public var sectionPreconditionSteps: [StepModel]
    /** Set of section postcondition steps that need to be executed after completing the work item steps */
    public var sectionPostconditionSteps: [StepModel]
    /** Set of precondition steps that need to be executed before starting the main steps */
    public var preconditionSteps: [StepModel]
    /** Main steps or actions defined for the work item */
    public var steps: [StepModel]
    /** Set of postcondition steps that are executed after completing the main steps */
    public var postconditionSteps: [StepModel]
    /** Associated iterations linked to the work item */
    public var iterations: [IterationModel]
    /** Automated tests associated with the work item */
    public var autoTests: [AutoTestModel]
    /** Files attached to the work item */
    public var attachments: [AttachmentModel]
    /** Set of links related to the work item */
    public var links: [LinkModel]
    /** Creation date of the work item */
    public var createdDate: Date
    /** Unique identifier of the work item creator */
    public var createdById: UUID
    /** Modification date of the work item */
    public var modifiedDate: Date?
    /** Unique identifier of the work item modifier */
    public var modifiedById: UUID?
    /** Indicates whether the work item is marked as deleted */
    public var isDeleted: Bool

    public init(id: UUID, globalId: Int64, versionId: UUID, versionNumber: Int, projectId: UUID, sectionId: UUID, name: String, description: String? = nil, sourceType: WorkItemSourceTypeApiModel, entityTypeName: WorkItemEntityTypeApiModel, duration: Int, medianDuration: Int64, state: WorkItemStateApiModel, priority: WorkItemPriorityApiModel, isAutomated: Bool, attributes: [String: AnyCodable], tags: [TagModel], sectionPreconditionSteps: [StepModel], sectionPostconditionSteps: [StepModel], preconditionSteps: [StepModel], steps: [StepModel], postconditionSteps: [StepModel], iterations: [IterationModel], autoTests: [AutoTestModel], attachments: [AttachmentModel], links: [LinkModel], createdDate: Date, createdById: UUID, modifiedDate: Date? = nil, modifiedById: UUID? = nil, isDeleted: Bool) {
        self.id = id
        self.globalId = globalId
        self.versionId = versionId
        self.versionNumber = versionNumber
        self.projectId = projectId
        self.sectionId = sectionId
        self.name = name
        self.description = description
        self.sourceType = sourceType
        self.entityTypeName = entityTypeName
        self.duration = duration
        self.medianDuration = medianDuration
        self.state = state
        self.priority = priority
        self.isAutomated = isAutomated
        self.attributes = attributes
        self.tags = tags
        self.sectionPreconditionSteps = sectionPreconditionSteps
        self.sectionPostconditionSteps = sectionPostconditionSteps
        self.preconditionSteps = preconditionSteps
        self.steps = steps
        self.postconditionSteps = postconditionSteps
        self.iterations = iterations
        self.autoTests = autoTests
        self.attachments = attachments
        self.links = links
        self.createdDate = createdDate
        self.createdById = createdById
        self.modifiedDate = modifiedDate
        self.modifiedById = modifiedById
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case globalId
        case versionId
        case versionNumber
        case projectId
        case sectionId
        case name
        case description
        case sourceType
        case entityTypeName
        case duration
        case medianDuration
        case state
        case priority
        case isAutomated
        case attributes
        case tags
        case sectionPreconditionSteps
        case sectionPostconditionSteps
        case preconditionSteps
        case steps
        case postconditionSteps
        case iterations
        case autoTests
        case attachments
        case links
        case createdDate
        case createdById
        case modifiedDate
        case modifiedById
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(versionId, forKey: .versionId)
        try container.encode(versionNumber, forKey: .versionNumber)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(sourceType, forKey: .sourceType)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encode(duration, forKey: .duration)
        try container.encode(medianDuration, forKey: .medianDuration)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(sectionPreconditionSteps, forKey: .sectionPreconditionSteps)
        try container.encode(sectionPostconditionSteps, forKey: .sectionPostconditionSteps)
        try container.encode(preconditionSteps, forKey: .preconditionSteps)
        try container.encode(steps, forKey: .steps)
        try container.encode(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(iterations, forKey: .iterations)
        try container.encode(autoTests, forKey: .autoTests)
        try container.encode(attachments, forKey: .attachments)
        try container.encode(links, forKey: .links)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WorkItemApiResult: Identifiable {}
