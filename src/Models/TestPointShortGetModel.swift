//
// TestPointShortGetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPointShortGetModel: Codable, JSONEncodable, Hashable {

    /** Unique ID of the test point */
    internal var id: UUID
    /** Creation date of the test point */
    internal var createdDate: Date
    /** Unique ID of the test point creator */
    internal var createdById: UUID
    /** Last modification date of the test point */
    internal var modifiedDate: Date?
    /** Unique ID of the test point last editor */
    internal var modifiedById: UUID?
    /** Unique ID of the test point assigned user */
    internal var testerId: UUID?
    /** Collection of the test point parameters */
    internal var parameters: [String: String]?
    /** Collection of attributes of work item the test point represents */
    internal var attributes: [String: AnyCodable]
    /** Collection of the test point tags */
    internal var tags: [String]
    /** Collection of the test point links */
    internal var links: [String]
    /** Unique ID of test suite the test point assigned to */
    internal var testSuiteId: UUID
    /** Name of the test suite */
    internal var testSuiteName: String
    /** Unique ID of work item the test point represents */
    internal var workItemId: UUID
    /** Global ID of work item the test point represents */
    internal var workItemGlobalId: Int64
    /** Unique ID of work item version the test point represents */
    internal var workItemVersionId: UUID
    /** Number of work item version the test point represents */
    internal var workItemVersionNumber: Int
    /** Median duration of work item the test point represents */
    internal var workItemMedianDuration: Int64?
    /** Status of the test point */
    internal var status: TestPointStatus
    /** Priority of the test point */
    internal var priority: WorkItemPriorityModel
    /** Indicates if the test point represents an autotest */
    internal var isAutomated: Bool
    /** Name of the test point */
    internal var name: String
    /** Unique ID of the test point configuration */
    internal var configurationId: UUID
    /** Duration of the test point */
    internal var duration: Int
    /** Unique ID of section where work item the test point represents is located */
    internal var sectionId: UUID
    /** Name of section where work item the test point represents is located */
    internal var sectionName: String?
    /** Unique ID of the test point project */
    internal var projectId: UUID
    /** Model of the test point last test result */
    internal var lastTestResult: LastTestResultModel
    /** Unique ID of work item iteration the test point represents */
    internal var iterationId: UUID
    /** Work item state */
    internal var workItemState: WorkItemState
    /** Unique ID of the work item creator */
    internal var workItemCreatedById: UUID
    /** Creation date of work item */
    internal var workItemCreatedDate: Date
    /** Unique ID of the work item last editor */
    internal var workItemModifiedById: UUID?
    /** Modified date of work item */
    internal var workItemModifiedDate: Date?

    internal init(id: UUID, createdDate: Date, createdById: UUID, modifiedDate: Date? = nil, modifiedById: UUID? = nil, testerId: UUID? = nil, parameters: [String: String]? = nil, attributes: [String: AnyCodable], tags: [String], links: [String], testSuiteId: UUID, testSuiteName: String, workItemId: UUID, workItemGlobalId: Int64, workItemVersionId: UUID, workItemVersionNumber: Int, workItemMedianDuration: Int64? = nil, status: TestPointStatus, priority: WorkItemPriorityModel, isAutomated: Bool, name: String, configurationId: UUID, duration: Int, sectionId: UUID, sectionName: String? = nil, projectId: UUID, lastTestResult: LastTestResultModel, iterationId: UUID, workItemState: WorkItemState, workItemCreatedById: UUID, workItemCreatedDate: Date, workItemModifiedById: UUID? = nil, workItemModifiedDate: Date? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.createdById = createdById
        self.modifiedDate = modifiedDate
        self.modifiedById = modifiedById
        self.testerId = testerId
        self.parameters = parameters
        self.attributes = attributes
        self.tags = tags
        self.links = links
        self.testSuiteId = testSuiteId
        self.testSuiteName = testSuiteName
        self.workItemId = workItemId
        self.workItemGlobalId = workItemGlobalId
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.workItemMedianDuration = workItemMedianDuration
        self.status = status
        self.priority = priority
        self.isAutomated = isAutomated
        self.name = name
        self.configurationId = configurationId
        self.duration = duration
        self.sectionId = sectionId
        self.sectionName = sectionName
        self.projectId = projectId
        self.lastTestResult = lastTestResult
        self.iterationId = iterationId
        self.workItemState = workItemState
        self.workItemCreatedById = workItemCreatedById
        self.workItemCreatedDate = workItemCreatedDate
        self.workItemModifiedById = workItemModifiedById
        self.workItemModifiedDate = workItemModifiedDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case createdById
        case modifiedDate
        case modifiedById
        case testerId
        case parameters
        case attributes
        case tags
        case links
        case testSuiteId
        case testSuiteName
        case workItemId
        case workItemGlobalId
        case workItemVersionId
        case workItemVersionNumber
        case workItemMedianDuration
        case status
        case priority
        case isAutomated
        case name
        case configurationId
        case duration
        case sectionId
        case sectionName
        case projectId
        case lastTestResult
        case iterationId
        case workItemState
        case workItemCreatedById
        case workItemCreatedDate
        case workItemModifiedById
        case workItemModifiedDate
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encode(attributes, forKey: .attributes)
        try container.encode(tags, forKey: .tags)
        try container.encode(links, forKey: .links)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encode(testSuiteName, forKey: .testSuiteName)
        try container.encode(workItemId, forKey: .workItemId)
        try container.encode(workItemGlobalId, forKey: .workItemGlobalId)
        try container.encode(workItemVersionId, forKey: .workItemVersionId)
        try container.encode(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encodeIfPresent(workItemMedianDuration, forKey: .workItemMedianDuration)
        try container.encode(status, forKey: .status)
        try container.encode(priority, forKey: .priority)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(name, forKey: .name)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(duration, forKey: .duration)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(sectionName, forKey: .sectionName)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(lastTestResult, forKey: .lastTestResult)
        try container.encode(iterationId, forKey: .iterationId)
        try container.encode(workItemState, forKey: .workItemState)
        try container.encode(workItemCreatedById, forKey: .workItemCreatedById)
        try container.encode(workItemCreatedDate, forKey: .workItemCreatedDate)
        try container.encodeIfPresent(workItemModifiedById, forKey: .workItemModifiedById)
        try container.encodeIfPresent(workItemModifiedDate, forKey: .workItemModifiedDate)
    }
}

