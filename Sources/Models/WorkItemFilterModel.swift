//
// WorkItemFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Collection of filters to apply to search */
public struct WorkItemFilterModel: Codable, JSONEncodable, Hashable {

    static let includeIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let excludeIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let projectIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let idsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let sectionIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let statesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let prioritiesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let typesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    static let autoTestIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Name or identifier (UUID) of work item */
    public var nameOrId: String?
    /** Collection of identifiers of work items which need to be included in result regardless of filtering */
    public var includeIds: Set<UUID>?
    /** Collection of identifiers of work items which need to be excluded from result regardless of filtering */
    public var excludeIds: Set<UUID>?
    /** Collection of project identifiers */
    public var projectIds: Set<UUID>?
    /** Name of work item */
    public var name: String?
    /** Specifies a work item unique IDs to search for */
    public var ids: Set<UUID>?
    /** Collection of global (integer) identifiers */
    public var globalIds: Set<Int64>?
    /** Custom attributes of work item */
    public var attributes: [String: Set<String>]?
    /** Is result must consist of only actual/deleted work items */
    public var isDeleted: Bool?
    /** Collection of section identifiers */
    public var sectionIds: Set<UUID>?
    /** Collection of identifiers of users who created work item */
    public var createdByIds: Set<UUID>?
    /** Collection of identifiers of users who applied last modification to work item */
    public var modifiedByIds: Set<UUID>?
    /** Collection of states of work item */
    public var states: Set<WorkItemStates>?
    /** Collection of priorities of work item */
    public var priorities: Set<WorkItemPriorityModel>?
    /** Collection of types of work item */
    public var types: Set<WorkItemEntityTypes>?
    /** Specifies a work item range of creation date to search for */
    public var createdDate: DateTimeRangeSelectorModel?
    /** Specifies a work item range of last modification date to search for */
    public var modifiedDate: DateTimeRangeSelectorModel?
    /** Specifies a work item duration range to search for */
    public var duration: Int32RangeSelectorModel?
    /** Specifies a work item median duration range to search for */
    public var medianDuration: Int64RangeSelectorModel?
    /** Is result must consist of only manual/automated work items */
    public var isAutomated: Bool?
    /** Collection of tags */
    public var tags: Set<String>?
    /** Collection of identifiers of linked autotests */
    public var autoTestIds: Set<UUID>?
    /** Collection of identifiers work items versions. */
    public var workItemVersionIds: [UUID]?

    public init(nameOrId: String? = nil, includeIds: Set<UUID>? = nil, excludeIds: Set<UUID>? = nil, projectIds: Set<UUID>? = nil, name: String? = nil, ids: Set<UUID>? = nil, globalIds: Set<Int64>? = nil, attributes: [String: Set<String>]? = nil, isDeleted: Bool? = nil, sectionIds: Set<UUID>? = nil, createdByIds: Set<UUID>? = nil, modifiedByIds: Set<UUID>? = nil, states: Set<WorkItemStates>? = nil, priorities: Set<WorkItemPriorityModel>? = nil, types: Set<WorkItemEntityTypes>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, duration: Int32RangeSelectorModel? = nil, medianDuration: Int64RangeSelectorModel? = nil, isAutomated: Bool? = nil, tags: Set<String>? = nil, autoTestIds: Set<UUID>? = nil, workItemVersionIds: [UUID]? = nil) {
        self.nameOrId = nameOrId
        self.includeIds = includeIds
        self.excludeIds = excludeIds
        self.projectIds = projectIds
        self.name = name
        self.ids = ids
        self.globalIds = globalIds
        self.attributes = attributes
        self.isDeleted = isDeleted
        self.sectionIds = sectionIds
        self.createdByIds = createdByIds
        self.modifiedByIds = modifiedByIds
        self.states = states
        self.priorities = priorities
        self.types = types
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.duration = duration
        self.medianDuration = medianDuration
        self.isAutomated = isAutomated
        self.tags = tags
        self.autoTestIds = autoTestIds
        self.workItemVersionIds = workItemVersionIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nameOrId
        case includeIds
        case excludeIds
        case projectIds
        case name
        case ids
        case globalIds
        case attributes
        case isDeleted
        case sectionIds
        case createdByIds
        case modifiedByIds
        case states
        case priorities
        case types
        case createdDate
        case modifiedDate
        case duration
        case medianDuration
        case isAutomated
        case tags
        case autoTestIds
        case workItemVersionIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nameOrId, forKey: .nameOrId)
        try container.encodeIfPresent(includeIds, forKey: .includeIds)
        try container.encodeIfPresent(excludeIds, forKey: .excludeIds)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ids, forKey: .ids)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(sectionIds, forKey: .sectionIds)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(priorities, forKey: .priorities)
        try container.encodeIfPresent(types, forKey: .types)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(medianDuration, forKey: .medianDuration)
        try container.encodeIfPresent(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(autoTestIds, forKey: .autoTestIds)
        try container.encodeIfPresent(workItemVersionIds, forKey: .workItemVersionIds)
    }
}

