//
// TestResultV2GetModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultV2GetModel: Codable, JSONEncodable, Hashable {

    public var configuration: ConfigurationModel?
    public var autoTest: AutoTestModelV2GetModel?
    public var id: UUID
    public var configurationId: UUID
    public var workItemVersionId: UUID
    public var autoTestId: UUID?
    public var message: String?
    public var traces: String?
    public var startedOn: Date?
    public var completedOn: Date?
    public var runByUserId: UUID?
    public var stoppedByUserId: UUID?
    public var testPointId: UUID?
    public var testPoint: TestPointShortModel?
    public var testRunId: UUID
    /** Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped */
    public var outcome: String
    public var comment: String?
    public var links: [LinkModel]?
    public var attachments: [AttachmentModel]?
    public var parameters: [String: String]?
    public var properties: [String: String]?

    public init(configuration: ConfigurationModel? = nil, autoTest: AutoTestModelV2GetModel? = nil, id: UUID, configurationId: UUID, workItemVersionId: UUID, autoTestId: UUID? = nil, message: String? = nil, traces: String? = nil, startedOn: Date? = nil, completedOn: Date? = nil, runByUserId: UUID? = nil, stoppedByUserId: UUID? = nil, testPointId: UUID? = nil, testPoint: TestPointShortModel? = nil, testRunId: UUID, outcome: String, comment: String? = nil, links: [LinkModel]? = nil, attachments: [AttachmentModel]? = nil, parameters: [String: String]? = nil, properties: [String: String]? = nil) {
        self.configuration = configuration
        self.autoTest = autoTest
        self.id = id
        self.configurationId = configurationId
        self.workItemVersionId = workItemVersionId
        self.autoTestId = autoTestId
        self.message = message
        self.traces = traces
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.runByUserId = runByUserId
        self.stoppedByUserId = stoppedByUserId
        self.testPointId = testPointId
        self.testPoint = testPoint
        self.testRunId = testRunId
        self.outcome = outcome
        self.comment = comment
        self.links = links
        self.attachments = attachments
        self.parameters = parameters
        self.properties = properties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case configuration
        case autoTest
        case id
        case configurationId
        case workItemVersionId
        case autoTestId
        case message
        case traces
        case startedOn
        case completedOn
        case runByUserId
        case stoppedByUserId
        case testPointId
        case testPoint
        case testRunId
        case outcome
        case comment
        case links
        case attachments
        case parameters
        case properties
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(autoTest, forKey: .autoTest)
        try container.encode(id, forKey: .id)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(autoTestId, forKey: .autoTestId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(traces, forKey: .traces)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(runByUserId, forKey: .runByUserId)
        try container.encodeIfPresent(stoppedByUserId, forKey: .stoppedByUserId)
        try container.encodeIfPresent(testPointId, forKey: .testPointId)
        try container.encodeIfPresent(testPoint, forKey: .testPoint)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encode(outcome, forKey: .outcome)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(properties, forKey: .properties)
    }
}

