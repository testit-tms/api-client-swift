//
// SectionModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SectionModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var projectId: UUID?
    public var parentId: UUID?
    public var isDeleted: Bool
    public var id: UUID
    public var createdDate: Date
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var name: String

    public init(projectId: UUID? = nil, parentId: UUID? = nil, isDeleted: Bool, id: UUID, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, name: String) {
        self.projectId = projectId
        self.parentId = parentId
        self.isDeleted = isDeleted
        self.id = id
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectId
        case parentId
        case isDeleted
        case id
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectId, forKey: .projectId)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(name, forKey: .name)
    }
}

