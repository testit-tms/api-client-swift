//
// TestResultHistoryReportApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultHistoryReportApiResult: Codable, JSONEncodable, Hashable {

    /** Internal test result identifier */
    public var id: UUID
    /** Test result creation date */
    public var createdDate: Date
    /** Test result last modification date */
    public var modifiedDate: Date?
    /** Internal identifier of user who stopped test run related to the test result or user who created the test result              If test run was stopped, this property equals identifier of user who stopped it. Otherwise, the property equals identifier of user who created the test result */
    public var userId: UUID
    /** Identifier of test run related to the test result */
    public var testRunId: UUID?
    /** Name of test run related to the test result */
    public var testRunName: String?
    /** Username of user who created test run */
    public var createdByUserName: String?
    /** Internal identifier of test plan related to the test result's test run */
    public var testPlanId: UUID?
    /** Global identifier of test plan related to the test result's test run */
    public var testPlanGlobalId: Int64?
    /** Name of test plan related to the test result's test run */
    public var testPlanName: String?
    /** Configuration name of test point related to the test result or from test result itself              If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name */
    public var configurationName: String?
    /** Boolean flag defines if test point related to the test result is automated or not */
    public var isAutomated: Bool
    /** Outcome from test result with max modified date or from first created test result              Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.              If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the test run. */
    public var outcome: String?
    /** Status from test result with max modified date or from first created test result */
    public var status: TestStatusApiResult
    /** Test result comment              If any test result related to the test run is linked with autotest, comment will have default value. Otherwise, the comment equals to the comment of first created test result in the test run */
    public var comment: String?
    /** Test result links              If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result. Otherwise, the links equals to the links of first created test result in the test run. */
    public var links: [LinkApiResult]?
    /** Start date time from test result or from test run (if test run new state is Running or Completed state) */
    public var startedOn: Date?
    /** End date time from test result or from test run (if test run new state is In progress, Stopped or Completed) */
    public var completedOn: Date?
    /** Duration of first created test result in the test run */
    public var duration: Int64?
    /** Unique identifier of user who created first test result in the test run */
    public var createdById: UUID
    /** Unique identifier of user who applied last modification of first test result in the test run */
    public var modifiedById: UUID?
    /** Attachments related to the test result              If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result. Otherwise, the attachments equals to the attachments of first created test result in the test run. */
    public var attachments: [AttachmentApiResult]?
    /** Unique identifier of workitem version related to the first test result in the test run */
    public var workItemVersionId: UUID?
    /** Number of workitem version related to the first test result in the test run */
    public var workItemVersionNumber: Int?
    public var launchSource: String?
    /** Unique identifier of failure classes related to the first test result in the test run */
    public var failureClassIds: [UUID]
    /** Parameters of test result */
    public var parameters: [String: String]?

    public init(id: UUID, createdDate: Date, modifiedDate: Date? = nil, userId: UUID, testRunId: UUID? = nil, testRunName: String? = nil, createdByUserName: String? = nil, testPlanId: UUID? = nil, testPlanGlobalId: Int64? = nil, testPlanName: String? = nil, configurationName: String? = nil, isAutomated: Bool, outcome: String? = nil, status: TestStatusApiResult, comment: String? = nil, links: [LinkApiResult]? = nil, startedOn: Date? = nil, completedOn: Date? = nil, duration: Int64? = nil, createdById: UUID, modifiedById: UUID? = nil, attachments: [AttachmentApiResult]? = nil, workItemVersionId: UUID? = nil, workItemVersionNumber: Int? = nil, launchSource: String? = nil, failureClassIds: [UUID], parameters: [String: String]? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.userId = userId
        self.testRunId = testRunId
        self.testRunName = testRunName
        self.createdByUserName = createdByUserName
        self.testPlanId = testPlanId
        self.testPlanGlobalId = testPlanGlobalId
        self.testPlanName = testPlanName
        self.configurationName = configurationName
        self.isAutomated = isAutomated
        self.outcome = outcome
        self.status = status
        self.comment = comment
        self.links = links
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.duration = duration
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.attachments = attachments
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.launchSource = launchSource
        self.failureClassIds = failureClassIds
        self.parameters = parameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case modifiedDate
        case userId
        case testRunId
        case testRunName
        case createdByUserName
        case testPlanId
        case testPlanGlobalId
        case testPlanName
        case configurationName
        case isAutomated
        case outcome
        case status
        case comment
        case links
        case startedOn
        case completedOn
        case duration
        case createdById
        case modifiedById
        case attachments
        case workItemVersionId
        case workItemVersionNumber
        case launchSource
        case failureClassIds
        case parameters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(testRunId, forKey: .testRunId)
        try container.encodeIfPresent(testRunName, forKey: .testRunName)
        try container.encodeIfPresent(createdByUserName, forKey: .createdByUserName)
        try container.encodeIfPresent(testPlanId, forKey: .testPlanId)
        try container.encodeIfPresent(testPlanGlobalId, forKey: .testPlanGlobalId)
        try container.encodeIfPresent(testPlanName, forKey: .testPlanName)
        try container.encodeIfPresent(configurationName, forKey: .configurationName)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encodeIfPresent(launchSource, forKey: .launchSource)
        try container.encode(failureClassIds, forKey: .failureClassIds)
        try container.encodeIfPresent(parameters, forKey: .parameters)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestResultHistoryReportApiResult: Identifiable {}
