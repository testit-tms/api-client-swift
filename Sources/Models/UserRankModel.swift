//
// UserRankModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserRankModel: Codable, JSONEncodable, Hashable {

    public var score: Int
    public var workItemsCreated: Int
    public var passedTestPoints: Int
    public var failedTestPoints: Int
    public var skippedTestPoints: Int
    public var blockedTestPoints: Int
    public var levelAvatarEnabled: Bool

    public init(score: Int, workItemsCreated: Int, passedTestPoints: Int, failedTestPoints: Int, skippedTestPoints: Int, blockedTestPoints: Int, levelAvatarEnabled: Bool) {
        self.score = score
        self.workItemsCreated = workItemsCreated
        self.passedTestPoints = passedTestPoints
        self.failedTestPoints = failedTestPoints
        self.skippedTestPoints = skippedTestPoints
        self.blockedTestPoints = blockedTestPoints
        self.levelAvatarEnabled = levelAvatarEnabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case score
        case workItemsCreated
        case passedTestPoints
        case failedTestPoints
        case skippedTestPoints
        case blockedTestPoints
        case levelAvatarEnabled
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(score, forKey: .score)
        try container.encode(workItemsCreated, forKey: .workItemsCreated)
        try container.encode(passedTestPoints, forKey: .passedTestPoints)
        try container.encode(failedTestPoints, forKey: .failedTestPoints)
        try container.encode(skippedTestPoints, forKey: .skippedTestPoints)
        try container.encode(blockedTestPoints, forKey: .blockedTestPoints)
        try container.encode(levelAvatarEnabled, forKey: .levelAvatarEnabled)
    }
}

