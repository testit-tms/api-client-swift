//
// SectionPutModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct SectionPutModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    internal var id: UUID
    internal var name: String
    internal var projectId: UUID
    internal var parentId: UUID?
    internal var preconditionSteps: [StepPutModel]?
    internal var postconditionSteps: [StepPutModel]?
    internal var attachments: [AttachmentPutModel]

    internal init(id: UUID, name: String, projectId: UUID, parentId: UUID? = nil, preconditionSteps: [StepPutModel]? = nil, postconditionSteps: [StepPutModel]? = nil, attachments: [AttachmentPutModel]) {
        self.id = id
        self.name = name
        self.projectId = projectId
        self.parentId = parentId
        self.preconditionSteps = preconditionSteps
        self.postconditionSteps = postconditionSteps
        self.attachments = attachments
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case projectId
        case parentId
        case preconditionSteps
        case postconditionSteps
        case attachments
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(projectId, forKey: .projectId)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(preconditionSteps, forKey: .preconditionSteps)
        try container.encodeIfPresent(postconditionSteps, forKey: .postconditionSteps)
        try container.encode(attachments, forKey: .attachments)
    }
}

