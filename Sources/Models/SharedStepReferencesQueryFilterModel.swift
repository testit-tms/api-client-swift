//
// SharedStepReferencesQueryFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SharedStepReferencesQueryFilterModel: Codable, JSONEncodable, Hashable {

    public static let globalIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let sectionIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let createdByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let modifiedByIdsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let statesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let prioritiesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let entityTypesRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    public static let tagsRule = ArrayRule(minItems: nil, maxItems: nil, uniqueItems: true)
    /** Name of work item */
    public var name: String?
    /** Collection of global (integer) identifiers */
    public var globalIds: Set<Int64>?
    /** Collection of section identifiers */
    public var sectionIds: Set<UUID>?
    /** Collection of identifiers of users who created work item */
    public var createdByIds: Set<UUID>?
    /** Collection of identifiers of users who applied last modification to work item */
    public var modifiedByIds: Set<UUID>?
    /** Collection of states of work item */
    public var states: Set<WorkItemStates>?
    /** Collection of priorities of work item */
    public var priorities: Set<WorkItemPriorityModel>?
    /** Collection of types of work item    Allowed values: `TestCases`, `CheckLists`, `SharedSteps` */
    public var entityTypes: Set<String>?
    /** Date and time of work item creation */
    public var createdDate: DateTimeRangeSelectorModel?
    /** Date and time of work item last modification */
    public var modifiedDate: DateTimeRangeSelectorModel?
    /** Is result must consist of only manual/automated work items */
    public var isAutomated: Bool?
    /** Collection of tags */
    public var tags: Set<String>?

    public init(name: String? = nil, globalIds: Set<Int64>? = nil, sectionIds: Set<UUID>? = nil, createdByIds: Set<UUID>? = nil, modifiedByIds: Set<UUID>? = nil, states: Set<WorkItemStates>? = nil, priorities: Set<WorkItemPriorityModel>? = nil, entityTypes: Set<String>? = nil, createdDate: DateTimeRangeSelectorModel? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, isAutomated: Bool? = nil, tags: Set<String>? = nil) {
        self.name = name
        self.globalIds = globalIds
        self.sectionIds = sectionIds
        self.createdByIds = createdByIds
        self.modifiedByIds = modifiedByIds
        self.states = states
        self.priorities = priorities
        self.entityTypes = entityTypes
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.isAutomated = isAutomated
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case globalIds
        case sectionIds
        case createdByIds
        case modifiedByIds
        case states
        case priorities
        case entityTypes
        case createdDate
        case modifiedDate
        case isAutomated
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(sectionIds, forKey: .sectionIds)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(priorities, forKey: .priorities)
        try container.encodeIfPresent(entityTypes, forKey: .entityTypes)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(isAutomated, forKey: .isAutomated)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

