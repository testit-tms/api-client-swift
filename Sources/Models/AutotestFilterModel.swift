//
// AutoTestFilterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AutoTestFilterModel: Codable, JSONEncodable, Hashable {

    public var projectIds: [UUID]?
    public var externalIds: [String]?
    public var globalIds: [Int64]?
    public var name: String?
    public var isFlaky: Bool?
    public var mustBeApproved: Bool?
    public var stabilityPercentage: Int64RangeSelectorModel?
    public var createdDate: DateTimeRangeSelectorModel?
    public var createdByIds: [UUID]?
    public var modifiedDate: DateTimeRangeSelectorModel?
    public var modifiedByIds: [UUID]?
    public var isDeleted: Bool?
    public var namespace: String?
    public var isEmptyNamespace: Bool?
    public var className: String?
    public var isEmptyClassName: Bool?
    public var lastTestResultOutcome: AutotestResultOutcome?
    public var lastTestResultStatusCode: String?
    public var externalKey: String?
    public var lastTestResultConfigurationIds: [UUID]?

    public init(projectIds: [UUID]? = nil, externalIds: [String]? = nil, globalIds: [Int64]? = nil, name: String? = nil, isFlaky: Bool? = nil, mustBeApproved: Bool? = nil, stabilityPercentage: Int64RangeSelectorModel? = nil, createdDate: DateTimeRangeSelectorModel? = nil, createdByIds: [UUID]? = nil, modifiedDate: DateTimeRangeSelectorModel? = nil, modifiedByIds: [UUID]? = nil, isDeleted: Bool? = nil, namespace: String? = nil, isEmptyNamespace: Bool? = nil, className: String? = nil, isEmptyClassName: Bool? = nil, lastTestResultOutcome: AutotestResultOutcome? = nil, lastTestResultStatusCode: String? = nil, externalKey: String? = nil, lastTestResultConfigurationIds: [UUID]? = nil) {
        self.projectIds = projectIds
        self.externalIds = externalIds
        self.globalIds = globalIds
        self.name = name
        self.isFlaky = isFlaky
        self.mustBeApproved = mustBeApproved
        self.stabilityPercentage = stabilityPercentage
        self.createdDate = createdDate
        self.createdByIds = createdByIds
        self.modifiedDate = modifiedDate
        self.modifiedByIds = modifiedByIds
        self.isDeleted = isDeleted
        self.namespace = namespace
        self.isEmptyNamespace = isEmptyNamespace
        self.className = className
        self.isEmptyClassName = isEmptyClassName
        self.lastTestResultOutcome = lastTestResultOutcome
        self.lastTestResultStatusCode = lastTestResultStatusCode
        self.externalKey = externalKey
        self.lastTestResultConfigurationIds = lastTestResultConfigurationIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectIds
        case externalIds
        case globalIds
        case name
        case isFlaky
        case mustBeApproved
        case stabilityPercentage
        case createdDate
        case createdByIds
        case modifiedDate
        case modifiedByIds
        case isDeleted
        case namespace
        case isEmptyNamespace
        case className
        case isEmptyClassName
        case lastTestResultOutcome
        case lastTestResultStatusCode
        case externalKey
        case lastTestResultConfigurationIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectIds, forKey: .projectIds)
        try container.encodeIfPresent(externalIds, forKey: .externalIds)
        try container.encodeIfPresent(globalIds, forKey: .globalIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isFlaky, forKey: .isFlaky)
        try container.encodeIfPresent(mustBeApproved, forKey: .mustBeApproved)
        try container.encodeIfPresent(stabilityPercentage, forKey: .stabilityPercentage)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(createdByIds, forKey: .createdByIds)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedByIds, forKey: .modifiedByIds)
        try container.encodeIfPresent(isDeleted, forKey: .isDeleted)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(isEmptyNamespace, forKey: .isEmptyNamespace)
        try container.encodeIfPresent(className, forKey: .className)
        try container.encodeIfPresent(isEmptyClassName, forKey: .isEmptyClassName)
        try container.encodeIfPresent(lastTestResultOutcome, forKey: .lastTestResultOutcome)
        try container.encodeIfPresent(lastTestResultStatusCode, forKey: .lastTestResultStatusCode)
        try container.encodeIfPresent(externalKey, forKey: .externalKey)
        try container.encodeIfPresent(lastTestResultConfigurationIds, forKey: .lastTestResultConfigurationIds)
    }
}

