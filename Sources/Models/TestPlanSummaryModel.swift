//
// TestPlanSummaryModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestPlanSummaryModel: Codable, JSONEncodable, Hashable {

    public var totalTestPointsCount: Int
    public var manualTestPointsCount: Int
    public var automatedTestPointsCount: Int
    public var completedTestPointsCount: Int
    public var defectsCount: Int
    public var plannedTestPointsDuration: Int64
    public var spentTestPointsDuration: Int64?

    public init(totalTestPointsCount: Int, manualTestPointsCount: Int, automatedTestPointsCount: Int, completedTestPointsCount: Int, defectsCount: Int, plannedTestPointsDuration: Int64, spentTestPointsDuration: Int64? = nil) {
        self.totalTestPointsCount = totalTestPointsCount
        self.manualTestPointsCount = manualTestPointsCount
        self.automatedTestPointsCount = automatedTestPointsCount
        self.completedTestPointsCount = completedTestPointsCount
        self.defectsCount = defectsCount
        self.plannedTestPointsDuration = plannedTestPointsDuration
        self.spentTestPointsDuration = spentTestPointsDuration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalTestPointsCount
        case manualTestPointsCount
        case automatedTestPointsCount
        case completedTestPointsCount
        case defectsCount
        case plannedTestPointsDuration
        case spentTestPointsDuration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(totalTestPointsCount, forKey: .totalTestPointsCount)
        try container.encode(manualTestPointsCount, forKey: .manualTestPointsCount)
        try container.encode(automatedTestPointsCount, forKey: .automatedTestPointsCount)
        try container.encode(completedTestPointsCount, forKey: .completedTestPointsCount)
        try container.encode(defectsCount, forKey: .defectsCount)
        try container.encode(plannedTestPointsDuration, forKey: .plannedTestPointsDuration)
        try container.encodeIfPresent(spentTestPointsDuration, forKey: .spentTestPointsDuration)
    }
}

