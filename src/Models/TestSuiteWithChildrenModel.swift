//
// TestSuiteWithChildrenModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestSuiteWithChildrenModel: Codable, JSONEncodable, Hashable {

    internal var children: [TestSuiteWithChildrenModel]?
    internal var testerId: UUID?
    internal var parentId: UUID?
    internal var testPlanId: UUID
    internal var name: String
    /** Unique ID of the entity */
    internal var id: UUID
    /** Indicates if the entity is deleted */
    internal var isDeleted: Bool

    internal init(children: [TestSuiteWithChildrenModel]? = nil, testerId: UUID? = nil, parentId: UUID? = nil, testPlanId: UUID, name: String, id: UUID, isDeleted: Bool) {
        self.children = children
        self.testerId = testerId
        self.parentId = parentId
        self.testPlanId = testPlanId
        self.name = name
        self.id = id
        self.isDeleted = isDeleted
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case children
        case testerId
        case parentId
        case testPlanId
        case name
        case id
        case isDeleted
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(children, forKey: .children)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encode(testPlanId, forKey: .testPlanId)
        try container.encode(name, forKey: .name)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}

