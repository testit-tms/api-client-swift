//
// TestResultApiResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TestResultApiResult: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var startedOn: Date?
    public var completedOn: Date?
    public var durationInMs: Int64?
    public var traces: String?
    public var failureType: String?
    public var message: String?
    public var runByUserId: UUID?
    public var stoppedByUserId: UUID?
    public var outcome: String
    public var autoTestId: UUID?
    public var testPointId: UUID?
    public var testRunId: UUID
    public var configurationId: UUID
    public var status: TestStatusApiResult
    public var testPoint: TestPointShortApiResult?
    public var autoTest: AutoTestApiResult?
    public var autoTestStepResults: [AutoTestStepResultsApiResult]?
    public var setupResults: [AutoTestStepResultsApiResult]?
    public var teardownResults: [AutoTestStepResultsApiResult]?
    public var workItemVersionId: UUID?
    public var workItemVersionNumber: Int?
    public var attachments: [AttachmentApiResult]
    public var links: [LinkApiResult]
    public var failureClasses: [TestResultFailureClassApiResult]
    public var stepComments: [StepCommentApiModel]?
    public var parameters: [String: String]?
    public var properties: [String: String]?
    public var createdDate: Date
    public var modifiedDate: Date?
    public var createdById: UUID
    public var modifiedById: UUID?
    public var isDeleted: Bool

    public init(id: UUID, startedOn: Date? = nil, completedOn: Date? = nil, durationInMs: Int64? = nil, traces: String? = nil, failureType: String? = nil, message: String? = nil, runByUserId: UUID? = nil, stoppedByUserId: UUID? = nil, outcome: String, autoTestId: UUID? = nil, testPointId: UUID? = nil, testRunId: UUID, configurationId: UUID, status: TestStatusApiResult, testPoint: TestPointShortApiResult? = nil, autoTest: AutoTestApiResult? = nil, autoTestStepResults: [AutoTestStepResultsApiResult]? = nil, setupResults: [AutoTestStepResultsApiResult]? = nil, teardownResults: [AutoTestStepResultsApiResult]? = nil, workItemVersionId: UUID? = nil, workItemVersionNumber: Int? = nil, attachments: [AttachmentApiResult], links: [LinkApiResult], failureClasses: [TestResultFailureClassApiResult], stepComments: [StepCommentApiModel]? = nil, parameters: [String: String]? = nil, properties: [String: String]? = nil, createdDate: Date, modifiedDate: Date? = nil, createdById: UUID, modifiedById: UUID? = nil, isDeleted: Bool) {
        self.id = id
        self.startedOn = startedOn
        self.completedOn = completedOn
        self.durationInMs = durationInMs
        self.traces = traces
        self.failureType = failureType
        self.message = message
        self.runByUserId = runByUserId
        self.stoppedByUserId = stoppedByUserId
        self.outcome = outcome
        self.autoTestId = autoTestId
        self.testPointId = testPointId
        self.testRunId = testRunId
        self.configurationId = configurationId
        self.status = status
        self.testPoint = testPoint
        self.autoTest = autoTest
        self.autoTestStepResults = autoTestStepResults
        self.setupResults = setupResults
        self.teardownResults = teardownResults
        self.workItemVersionId = workItemVersionId
        self.workItemVersionNumber = workItemVersionNumber
        self.attachments = attachments
        self.links = links
        self.failureClasses = failureClasses
        self.stepComments = stepComments
        self.parameters = parameters
        self.properties = properties
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.isDeleted = isDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case startedOn
        case completedOn
        case durationInMs
        case traces
        case failureType
        case message
        case runByUserId
        case stoppedByUserId
        case outcome
        case autoTestId
        case testPointId
        case testRunId
        case configurationId
        case status
        case testPoint
        case autoTest
        case autoTestStepResults
        case setupResults
        case teardownResults
        case workItemVersionId
        case workItemVersionNumber
        case attachments
        case links
        case failureClasses
        case stepComments
        case parameters
        case properties
        case createdDate
        case modifiedDate
        case createdById
        case modifiedById
        case isDeleted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(startedOn, forKey: .startedOn)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encodeIfPresent(durationInMs, forKey: .durationInMs)
        try container.encodeIfPresent(traces, forKey: .traces)
        try container.encodeIfPresent(failureType, forKey: .failureType)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(runByUserId, forKey: .runByUserId)
        try container.encodeIfPresent(stoppedByUserId, forKey: .stoppedByUserId)
        try container.encode(outcome, forKey: .outcome)
        try container.encodeIfPresent(autoTestId, forKey: .autoTestId)
        try container.encodeIfPresent(testPointId, forKey: .testPointId)
        try container.encode(testRunId, forKey: .testRunId)
        try container.encode(configurationId, forKey: .configurationId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(testPoint, forKey: .testPoint)
        try container.encodeIfPresent(autoTest, forKey: .autoTest)
        try container.encodeIfPresent(autoTestStepResults, forKey: .autoTestStepResults)
        try container.encodeIfPresent(setupResults, forKey: .setupResults)
        try container.encodeIfPresent(teardownResults, forKey: .teardownResults)
        try container.encodeIfPresent(workItemVersionId, forKey: .workItemVersionId)
        try container.encodeIfPresent(workItemVersionNumber, forKey: .workItemVersionNumber)
        try container.encode(attachments, forKey: .attachments)
        try container.encode(links, forKey: .links)
        try container.encode(failureClasses, forKey: .failureClasses)
        try container.encodeIfPresent(stepComments, forKey: .stepComments)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encode(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encode(isDeleted, forKey: .isDeleted)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TestResultApiResult: Identifiable {}
