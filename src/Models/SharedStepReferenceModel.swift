//
// SharedStepReferenceModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct SharedStepReferenceModel: Codable, JSONEncodable, Hashable {

    internal var id: UUID
    internal var globalId: Int64
    internal var name: String
    internal var entityTypeName: String
    internal var hasThisSharedStepAsStep: Bool
    internal var hasThisSharedStepAsPrecondition: Bool
    internal var hasThisSharedStepAsPostcondition: Bool
    internal var createdById: UUID
    internal var modifiedById: UUID?
    internal var createdDate: Date?
    internal var modifiedDate: Date?
    internal var state: String
    internal var priority: WorkItemPriorityModel
    internal var isDeleted: Bool
    /** used for versioning changes in workitem */
    internal var versionId: UUID
    internal var isAutomated: Bool
    internal var sectionId: UUID
    internal var tags: [TagModel]?

    internal init(id: UUID, globalId: Int64, name: String, entityTypeName: String, hasThisSharedStepAsStep: Bool, hasThisSharedStepAsPrecondition: Bool, hasThisSharedStepAsPostcondition: Bool, createdById: UUID, modifiedById: UUID? = nil, createdDate: Date? = nil, modifiedDate: Date? = nil, state: String, priority: WorkItemPriorityModel, isDeleted: Bool, versionId: UUID, isAutomated: Bool, sectionId: UUID, tags: [TagModel]? = nil) {
        self.id = id
        self.globalId = globalId
        self.name = name
        self.entityTypeName = entityTypeName
        self.hasThisSharedStepAsStep = hasThisSharedStepAsStep
        self.hasThisSharedStepAsPrecondition = hasThisSharedStepAsPrecondition
        self.hasThisSharedStepAsPostcondition = hasThisSharedStepAsPostcondition
        self.createdById = createdById
        self.modifiedById = modifiedById
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.state = state
        self.priority = priority
        self.isDeleted = isDeleted
        self.versionId = versionId
        self.isAutomated = isAutomated
        self.sectionId = sectionId
        self.tags = tags
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case globalId
        case name
        case entityTypeName
        case hasThisSharedStepAsStep
        case hasThisSharedStepAsPrecondition
        case hasThisSharedStepAsPostcondition
        case createdById
        case modifiedById
        case createdDate
        case modifiedDate
        case state
        case priority
        case isDeleted
        case versionId
        case isAutomated
        case sectionId
        case tags
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(globalId, forKey: .globalId)
        try container.encode(name, forKey: .name)
        try container.encode(entityTypeName, forKey: .entityTypeName)
        try container.encode(hasThisSharedStepAsStep, forKey: .hasThisSharedStepAsStep)
        try container.encode(hasThisSharedStepAsPrecondition, forKey: .hasThisSharedStepAsPrecondition)
        try container.encode(hasThisSharedStepAsPostcondition, forKey: .hasThisSharedStepAsPostcondition)
        try container.encode(createdById, forKey: .createdById)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encode(state, forKey: .state)
        try container.encode(priority, forKey: .priority)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(versionId, forKey: .versionId)
        try container.encode(isAutomated, forKey: .isAutomated)
        try container.encode(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

