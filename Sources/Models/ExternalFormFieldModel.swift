//
// ExternalFormFieldModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExternalFormFieldModel: Codable, JSONEncodable, Hashable {

    public var fieldId: String?
    public var fieldName: String?
    public var helpText: String?
    public var type: String?
    public var arrayValuesType: String?
    public var defaultValue: AnyCodable?
    public var isCustomValueAllowed: Bool
    public var autoCompleteUrl: String?
    public var controlType: String?
    public var minLength: Double?
    public var maxLength: Double?
    public var isRequired: Bool?
    public var min: AnyCodable?
    public var max: AnyCodable?

    public init(fieldId: String? = nil, fieldName: String? = nil, helpText: String? = nil, type: String? = nil, arrayValuesType: String? = nil, defaultValue: AnyCodable? = nil, isCustomValueAllowed: Bool, autoCompleteUrl: String? = nil, controlType: String? = nil, minLength: Double? = nil, maxLength: Double? = nil, isRequired: Bool? = nil, min: AnyCodable? = nil, max: AnyCodable? = nil) {
        self.fieldId = fieldId
        self.fieldName = fieldName
        self.helpText = helpText
        self.type = type
        self.arrayValuesType = arrayValuesType
        self.defaultValue = defaultValue
        self.isCustomValueAllowed = isCustomValueAllowed
        self.autoCompleteUrl = autoCompleteUrl
        self.controlType = controlType
        self.minLength = minLength
        self.maxLength = maxLength
        self.isRequired = isRequired
        self.min = min
        self.max = max
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fieldId
        case fieldName
        case helpText
        case type
        case arrayValuesType
        case defaultValue
        case isCustomValueAllowed
        case autoCompleteUrl
        case controlType
        case minLength
        case maxLength
        case isRequired
        case min
        case max
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fieldId, forKey: .fieldId)
        try container.encodeIfPresent(fieldName, forKey: .fieldName)
        try container.encodeIfPresent(helpText, forKey: .helpText)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(arrayValuesType, forKey: .arrayValuesType)
        try container.encodeIfPresent(defaultValue, forKey: .defaultValue)
        try container.encode(isCustomValueAllowed, forKey: .isCustomValueAllowed)
        try container.encodeIfPresent(autoCompleteUrl, forKey: .autoCompleteUrl)
        try container.encodeIfPresent(controlType, forKey: .controlType)
        try container.encodeIfPresent(minLength, forKey: .minLength)
        try container.encodeIfPresent(maxLength, forKey: .maxLength)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
        try container.encodeIfPresent(min, forKey: .min)
        try container.encodeIfPresent(max, forKey: .max)
    }
}

