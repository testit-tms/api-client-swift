//
// TestPointShortModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TestPointShortModel: Codable, JSONEncodable, Hashable {

    internal var testSuiteId: UUID
    /** Test point unique internal identifier */
    internal var id: UUID
    /** Tester who is responded for the test unique internal identifier */
    internal var testerId: UUID?
    /** Workitem to which test point relates unique identifier */
    internal var workItemId: UUID?
    /** Configuration to which test point relates unique identifier */
    internal var configurationId: UUID?
    /** Test point status   Applies one of these values: Blocked, NoResults, Failed, Passed */
    internal var status: String?
    /** Last test result unique identifier */
    internal var lastTestResultId: UUID?
    /** Iteration unique identifier */
    internal var iterationId: UUID
    /** Median duration of work item the test point represents */
    internal var workItemMedianDuration: Int64?

    internal init(testSuiteId: UUID, id: UUID, testerId: UUID? = nil, workItemId: UUID? = nil, configurationId: UUID? = nil, status: String? = nil, lastTestResultId: UUID? = nil, iterationId: UUID, workItemMedianDuration: Int64? = nil) {
        self.testSuiteId = testSuiteId
        self.id = id
        self.testerId = testerId
        self.workItemId = workItemId
        self.configurationId = configurationId
        self.status = status
        self.lastTestResultId = lastTestResultId
        self.iterationId = iterationId
        self.workItemMedianDuration = workItemMedianDuration
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case testSuiteId
        case id
        case testerId
        case workItemId
        case configurationId
        case status
        case lastTestResultId
        case iterationId
        case workItemMedianDuration
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(testSuiteId, forKey: .testSuiteId)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(testerId, forKey: .testerId)
        try container.encodeIfPresent(workItemId, forKey: .workItemId)
        try container.encodeIfPresent(configurationId, forKey: .configurationId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(lastTestResultId, forKey: .lastTestResultId)
        try container.encode(iterationId, forKey: .iterationId)
        try container.encodeIfPresent(workItemMedianDuration, forKey: .workItemMedianDuration)
    }
}

